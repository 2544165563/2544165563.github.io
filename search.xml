<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>I/O流</title>
    <url>/2020/10/10/IO%E6%B5%81/</url>
    <content><![CDATA[<h1 id="1-File类"><a href="#1-File类" class="headerlink" title="1.File类"></a>1.File类</h1><a id="more"></a>

<p>常用方法：boolean exists()   判断对应文件或目录是否存在</p>
<p>​                    boolean delete()        boolean createNewFile()</p>
<p>​                    String getName()       String getParent ()</p>
<p>​                    String getPath()          String getAbsolutePath()</p>
<p>​                    boolean canRead()    boolean canWrite()</p>
<p>​                    boolean isFile()           boolean isDirectory()</p>
<p>​                    boolean isAbsolute()  long lastModified()</p>
<p>​                    long length()                 String []list()</p>
<p>​                    File[] listFiles()</p>
<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">And</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span></span><br><span class="line"><span class="function"> </span>&#123;    </span><br><span class="line">   File fi=<span class="keyword">new</span> File(<span class="string">&quot;D:\\JAVA测试&quot;</span>,<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span>(fi.exists()) &#123;</span><br><span class="line">	   System.out.println(fi.getName());</span><br><span class="line">	   System.out.println(fi.length());</span><br><span class="line">	   System.out.println(fi.canRead());&#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">	   fi.createNewFile();</span><br><span class="line">   &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="运行可执行文件"><a href="#运行可执行文件" class="headerlink" title="运行可执行文件"></a>运行可执行文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jydge</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Runtime c=Runtime.getRuntime();</span><br><span class="line">  File f=<span class="keyword">new</span> File(<span class="string">&quot;文件地址&quot;</span>,<span class="string">&quot;文件名&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">	c.exec(f.getAbsolutePath());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2-文件字节流"><a href="#2-文件字节流" class="headerlink" title="2.文件字节流"></a>2.文件字节流</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">And</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//建立文件链接</span></span><br><span class="line">   File f1=<span class="keyword">new</span> File(<span class="string">&quot;D:\\JAVA测试&quot;</span>,<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">   File f2=<span class="keyword">new</span> File(<span class="string">&quot;D:\\JAVA测试&quot;</span>,<span class="string">&quot;test1.txt&quot;</span>);</span><br><span class="line"><span class="comment">//选择流</span></span><br><span class="line">   FileInputStream in=<span class="keyword">new</span> FileInputStream(f1);  </span><br><span class="line">   FileOutputStream out=<span class="keyword">new</span> FileOutputStream(f2);</span><br><span class="line"><span class="comment">//拷贝</span></span><br><span class="line">   <span class="keyword">byte</span> b[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>((len=in.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">	   out.write(b,<span class="number">0</span>,len);</span><br><span class="line">   &#125;</span><br><span class="line">   out.flush();   <span class="comment">//将缓存区域的内容读取到文件当中（不理解）。。</span></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">   out.close(); </span><br><span class="line">   in.close();   <span class="comment">//先打开的后关闭</span></span><br><span class="line">   &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-文件字符流"><a href="#3-文件字符流" class="headerlink" title="3.文件字符流"></a>3.文件字符流</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">And</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"><span class="comment">//建立文件链接</span></span><br><span class="line">   File f1=<span class="keyword">new</span> File(<span class="string">&quot;D:\\JAVA测试&quot;</span>,<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">   File f2=<span class="keyword">new</span> File(<span class="string">&quot;D:\\JAVA测试&quot;</span>,<span class="string">&quot;test1.txt&quot;</span>);</span><br><span class="line"><span class="comment">//选择流</span></span><br><span class="line">   FileReader in=<span class="keyword">new</span> FileReader(f1);</span><br><span class="line">   FileWriter out=<span class="keyword">new</span> FileWriter(f2);</span><br><span class="line"><span class="comment">//拷贝</span></span><br><span class="line">   <span class="keyword">char</span>[] b=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>((len=in.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">	   out.write(b, <span class="number">0</span>, len);</span><br><span class="line">   &#125;</span><br><span class="line">   out.flush();  <span class="comment">//将缓存区域的内容读取到文件当中（不理解）。。</span></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">    out.close();</span><br><span class="line">    in.close();    <span class="comment">//先打开的后关闭</span></span><br><span class="line">   &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-缓冲流"><a href="#4-缓冲流" class="headerlink" title="4.缓冲流"></a>4.缓冲流</h1><p>可以使字符串数组中的元素换行写入文本，也可以让文本中不同行的元素读取时在同一行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jydge</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> File file=<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\asus\\Desktop\\我滴东西\\456.txt&quot;</span>);</span><br><span class="line">	String content[]= &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line">        </span><br><span class="line">	FileWriter out1=<span class="keyword">new</span> FileWriter(file);</span><br><span class="line">	BufferedWriter out2=<span class="keyword">new</span> BufferedWriter(out1);</span><br><span class="line">	<span class="keyword">for</span>(String str:content) &#123;</span><br><span class="line">        out2.write(str);</span><br><span class="line">		out2.newLine();&#125;</span><br><span class="line">	out2.close();</span><br><span class="line">	out1.close();</span><br><span class="line">        </span><br><span class="line">	FileReader in1=<span class="keyword">new</span> FileReader(file);</span><br><span class="line">	BufferedReader in2=<span class="keyword">new</span> BufferedReader(in1);</span><br><span class="line">	<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">	String s=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">while</span>((s=in2.readLine())!=<span class="keyword">null</span>)</span><br><span class="line">	  System.out.print(s);</span><br><span class="line">	in1.close();</span><br><span class="line">	in2.close();&#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-随机流"><a href="#5-随机流" class="headerlink" title="5.随机流"></a>5.随机流</h1><table>
<thead>
<tr>
<th>类型</th>
<th>字节</th>
</tr>
</thead>
<tbody><tr>
<td>Byte</td>
<td>1</td>
</tr>
<tr>
<td>Int</td>
<td>4</td>
</tr>
<tr>
<td>long</td>
<td>8</td>
</tr>
<tr>
<td>Char</td>
<td>2</td>
</tr>
<tr>
<td>Float</td>
<td>4</td>
</tr>
<tr>
<td>Double</td>
<td>8</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jydge</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  RandomAccessFile inAndOut=<span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;C:\\Users\\asus\\Desktop\\我滴东西\\456.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>); </span><br><span class="line">  <span class="keyword">char</span> data[]= &#123;<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;data.length;i++)           <span class="comment">//写入</span></span><br><span class="line">	  inAndOut.writeChar(data[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>;i&lt;data.length;i++) &#123;        <span class="comment">//读取</span></span><br><span class="line">	  inAndOut.seek(i*<span class="number">2</span>);   <span class="comment">//定位读写位置，根据元素类型调整数字</span></span><br><span class="line">	  System.out.print(inAndOut.readChar()+<span class="string">&quot;  &quot;</span>);  </span><br><span class="line">  &#125;</span><br><span class="line">  inAndOut.close();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>readLine（）  读取一个文本行，第二次读取下一行</p>
<p>解决非ASCII字符乱码问题（比如汉字）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jydge</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  RandomAccessFile inAndOut=<span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;C:\\Users\\asus\\Desktop\\我滴东西\\456.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">  String str=inAndOut.readLine();</span><br><span class="line">  <span class="keyword">byte</span>[] b=str.getBytes(<span class="string">&quot;iso-8859-1&quot;</span>); <span class="comment">//将获取的字符串重新编码</span></span><br><span class="line">  String content=<span class="keyword">new</span> String(b);</span><br><span class="line">	  System.out.println(content);</span><br><span class="line">  inAndOut.close();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>鸽了鸽了，后面内容有点多，等放假再弄（懒癌发作，数据结构还一点没学T.T）</p>
<h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>树先生</title>
    <url>/2020/10/10/Hellow%E6%A0%91%E5%85%88%E7%94%9F/</url>
    <content><![CDATA[<h1 id="1-树"><a href="#1-树" class="headerlink" title="1.树"></a>1.树</h1><a id="more"></a>

<p>基本术语：</p>
<p>1.结点：数据元素及分支          2.结点的度：拥有的分支数             3.树的度：等于最大的结点度</p>
<p>4.叶子：没有分支的结点          5.非终端结点：度不为0，除根结点外，也称内部结点</p>
<p>6.双亲和孩子                             7.祖先：包括双亲                            8.子孙：包括孩子</p>
<p>9.层次                                        10.兄弟：同一个双亲                      11.堂兄弟：双亲不同但在同一层次</p>
<p>12.深度：最大层次                   13.有序树和无序树                         14.森林：多棵树</p>
<p>树的三种常用表示法（懒了，遇到的时候再去看）：</p>
<p>  （1）双亲表示法</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/shuang.png">

<p>  （2）孩子表示法</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/hai.jpg">

<p>（3）孩子兄弟法 （二叉树表示法、二叉链表表示法）</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/hai2.png">

<h1 id="2-二叉树（与树是两种类型）"><a href="#2-二叉树（与树是两种类型）" class="headerlink" title="2.二叉树（与树是两种类型）"></a>2.二叉树（与树是两种类型）</h1><h5 id="二叉树定义："><a href="#二叉树定义：" class="headerlink" title="二叉树定义："></a>二叉树定义：</h5><p>（1）最多有两个结点</p>
<p>（2）有左右之分，不能调换</p>
<p>   普通二叉树性质：1.叶的数量m只与度为2的结点有关，n为度为2结点数量，则m=n+1。</p>
<p>​                                  2.第i层上至多有2的i-1次方个结点。</p>
<p>​                                  3.深度为k，最多有2的k次方减1个结点。</p>
<h5 id="特殊二叉树定义："><a href="#特殊二叉树定义：" class="headerlink" title="特殊二叉树定义："></a>特殊二叉树定义：</h5><p>（1）满二叉树：除叶结点外，度都为2.</p>
<p>（2）完全二叉树：与满二叉树的顺序对应。（挨个排的树） </p>
<p>   完全二叉树性质：1.具有n个结点，深度为[log2n]+1。</p>
<p>​                                  2.对于结点i，其双亲为i/2,左孩子为2i,又孩子为2i+1。</p>
<h5 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> DataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">	DataType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Create_BiTree</span><span class="params">(BiTree *T)</span></span>&#123;</span><br><span class="line">		<span class="keyword">char</span> ch;</span><br><span class="line">		ch=getchar();</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="string">&#x27;@&#x27;</span>) *T=<span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">		*T=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">		(*T)-&gt;data=ch;</span><br><span class="line">		Create_BiTree(&amp;(*T)-&gt;lchild);</span><br><span class="line">		Create_BiTree(&amp;(*T)-&gt;rchild);</span><br><span class="line">&#125; &#125;</span><br><span class="line"><span class="comment">//先序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span> <span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,T-&gt;data);</span><br><span class="line">	<span class="keyword">if</span>(T-&gt;lchild)</span><br><span class="line">    PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;rchild)</span><br><span class="line">    PreOrderTraverse(T-&gt;rchild);&#125;</span><br><span class="line"><span class="comment">//中序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span> <span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T-&gt;lchild)</span><br><span class="line">    PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,T-&gt;data);</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;rchild)</span><br><span class="line">    PreOrderTraverse(T-&gt;rchild);&#125;</span><br><span class="line"><span class="comment">//后序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T-&gt;lchild)</span><br><span class="line">    PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;rchild)</span><br><span class="line">    PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,T-&gt;data);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	BiTree T;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n 输入叶结点的信息（建立空二叉树输入@）: &quot;</span>);</span><br><span class="line">  Create_BiTree(&amp;T);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n 前序遍历结果: &quot;</span>);</span><br><span class="line">PreOrderTraverse(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n 中序遍历结果: &quot;</span>);</span><br><span class="line">InOrderTraverse (T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n 后序遍历结果: &quot;</span>);</span><br><span class="line">PostOrderTraverse(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);&#125;</span><br></pre></td></tr></table></figure>

<h5 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span>&#123;</span></span><br><span class="line">	TElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span>     <span class="comment">//没有孩子结点则标签等于1</span></span><br><span class="line">	<span class="keyword">int</span> LTag,RTag;    <span class="comment">//等于0时指向孩子结点，等于1时指向前驱或后继</span></span><br><span class="line">&#125;BiThrNode,*BiThrTree;</span><br><span class="line"><span class="comment">//中序线索化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inthread</span><span class="params">(BiTree root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		Inthread(root-&gt;lchild);</span><br><span class="line">		<span class="keyword">if</span>(root-&gt;lchild==<span class="literal">NULL</span>)</span><br><span class="line">		&#123;root-&gt;LTag=<span class="number">1</span>;root-&gt;lchild=pre;&#125;</span><br><span class="line">		<span class="keyword">if</span>(pre!=<span class="literal">NULL</span>&amp;&amp;pre-&gt;rchild==<span class="literal">NULL</span>)</span><br><span class="line">		&#123;pre-&gt;rchild=root;pre-&gt;RTag=<span class="number">1</span>;&#125;</span><br><span class="line">		pre=root;</span><br><span class="line">	Inthread(root-&gt;rchild);</span><br><span class="line">	&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>（1）线索：指向前驱或后继的指针  （2）线索化：在遍历过程中修改空链域</p>
<h1 id="3-森林、树"><a href="#3-森林、树" class="headerlink" title="3.森林、树"></a>3.森林、树</h1><p>1.树转二叉树</p>
<p>（1）连接相邻兄弟结点（2）只保留之前与第一个孩子的连线</p>
<p>2.二叉树还原树或森林</p>
<p>（1）若某结点为其双亲的左孩子，则把该结点的右孩子、右孩子的右孩子。。。都与该结点的双亲相连</p>
<p>（2）删除原有所有右孩子的连线</p>
<p>3.森林转二叉树</p>
<p>（1）将每一棵树转换为二叉树</p>
<p>（2）将二叉树的根结点作为前一个二叉树根结点的右孩子连接。</p>
<h1 id="4-树和森林的遍历"><a href="#4-树和森林的遍历" class="headerlink" title="4.树和森林的遍历"></a>4.树和森林的遍历</h1><p>树的遍历：（1）先根遍历ABECFHGD（2）后根遍历EBHFGCDA</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/gen.png">

<p>森林的遍历（1）先序（2）中序（3）后序</p>
<h1 id="5-哈夫曼树"><a href="#5-哈夫曼树" class="headerlink" title="5.哈夫曼树"></a>5.哈夫曼树</h1><p>当有n个叶子时，就有2n-1个结点</p>
<p>基本术语：</p>
<p>1.路径：两个结点间的分支构成。       2.路径长度：路径上的分支数目</p>
<p>3.树的路径长度：树根到每一个结点的路径长度之和    </p>
<p>4.权：分为结点权和边权。                   5.结点的带权路径长度：路径长度*该结点的权值</p>
<p>6.树的带权路径长度：所有叶子到树根的带权路径长度之和。</p>
<p>7.哈夫曼树：树的带权路径长度最小的二叉树。</p>
<h5 id="哈夫曼树的构造方法"><a href="#哈夫曼树的构造方法" class="headerlink" title="哈夫曼树的构造方法"></a>哈夫曼树的构造方法</h5><p>（1）给定n个权值，每个权值构成只有根结点的森林</p>
<p>（2）将权值最小的两棵树分别当做左右孩子合并成一棵，新的权值为两棵树权值的和。</p>
<p>（3）重复2步骤。</p>
<h1 id="6-哈夫曼编码（最短，最优）"><a href="#6-哈夫曼编码（最短，最优）" class="headerlink" title="6.哈夫曼编码（最短，最优）"></a>6.哈夫曼编码（最短，最优）</h1><p>前缀码：在一个编码系统中，任何一个编码不是其他编码的前缀。</p>
<p>哈夫曼码：左为1，右为0.</p>
<p>编码方式： （1）定长编码：根据出现的情况m次，求2的n次方 &lt;=m。 求出n</p>
<p>​                    （2）哈夫曼编码：建立哈夫曼树，根据哈夫曼树编码</p>
<p>问题实例：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/shu1.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/shu2.png">

<p>编码过程：</p>
<p>鸽了，过两天根据指导再打吧🐷</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>BeautifulSoup提取数据</title>
    <url>/2020/10/10/BeautifulSoup%E6%8F%90%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="BeautifulSoup的使用"><a href="#BeautifulSoup的使用" class="headerlink" title="BeautifulSoup的使用"></a>BeautifulSoup的使用</h1><a id="more"></a>

<h2 id="先来个例子"><a href="#先来个例子" class="headerlink" title="先来个例子"></a>先来个例子</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&quot;https://python123.io/ws/demo.html&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo = r.text</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(soup.prettify())</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;</span><br><span class="line">   This <span class="keyword">is</span> a python demo page</span><br><span class="line">  &lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;p class=&quot;title&quot;&gt;</span><br><span class="line"> <span class="comment">#省略.......</span></span><br></pre></td></tr></table></figure>

<h2 id="主要部分"><a href="#主要部分" class="headerlink" title="主要部分"></a>主要部分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo,<span class="string">&quot;html.parser&quot;</span>)   <span class="comment">#html.parser解析器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(soup.prettify())</span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html.parser   #安装bs4</span><br><span class="line"></span><br><span class="line">lxml    #pip install lxml</span><br><span class="line"></span><br><span class="line">xml     #pip install xml</span><br><span class="line"></span><br><span class="line">html5lib   #pip install html5lib</span><br></pre></td></tr></table></figure>

<h2 id="标签信息"><a href="#标签信息" class="headerlink" title="标签信息"></a>标签信息</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(demo,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.title</span><br><span class="line">&lt;title&gt;...&lt;/title&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.name</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.attrs   <span class="comment">#查看标签属性</span></span><br><span class="line">&#123;<span class="string">&#x27;href&#x27;</span>: <span class="string">&#x27;//www.icourse163.org&#x27;</span>, <span class="string">&#x27;target&#x27;</span>: <span class="string">&#x27;_top&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.attrs[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;//www.icourse163.org&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.title.string</span><br><span class="line"><span class="string">&#x27;\nPython语言程序设计_北京理工大学_中国大学MOOC(慕课)\n&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>newsoup.contents</span><br><span class="line"><span class="comment">#儿子标签</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> newsoup.children</span><br><span class="line"><span class="comment">#子标签</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> newsoup.descendants</span><br><span class="line"><span class="comment">#子孙标签</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.parent.name</span><br><span class="line"><span class="string">&#x27;p&#x27;</span>      <span class="comment">#a的外层标签</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> soup.a.parent.parents</span><br><span class="line"><span class="comment">#循环遍历先辈标签</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.next_sibling</span><br><span class="line"><span class="comment">#返回文本顺序的下一个平行结点标签</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.previous_sibling</span><br><span class="line"><span class="comment">#返回上一个</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> soup.next_sibling</span><br><span class="line"><span class="comment">#对应迭代类型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> soup.previous_siblings</span><br><span class="line"><span class="comment">#对应迭代类型</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML内容查找"><a href="#HTML内容查找" class="headerlink" title="HTML内容查找"></a>HTML内容查找</h3><p>soup() == soup.find_all()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;&gt;.find_all(name,attrs,recursive,string,**kwargs)</span><br><span class="line"></span><br><span class="line">attrs:标签属性</span><br><span class="line"></span><br><span class="line">recursive:是否对子孙全部检索,默认为Ture</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">    print(link.get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line"></span><br><span class="line">soup.find_all([a,b,c]) <span class="comment">#查找多项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tags <span class="keyword">in</span> soup.find_all(Ture):</span><br><span class="line">    print(tags,name)    <span class="comment">#打印所有标签名 </span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> re      <span class="comment">#查找包含a的标签</span></span><br><span class="line">soup.find_all(re.compile(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(string = re.compile(<span class="string">&quot;chenlvtang&quot;</span>))</span><br><span class="line">[<span class="string">&#x27;chenlvtang的小房间&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="例-大学排名"><a href="#例-大学排名" class="headerlink" title="例 大学排名"></a>例 大学排名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url,timeout = <span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span>(<span class="params">ulist,html</span>):</span></span><br><span class="line">    soup = BeautifulSoup(html,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">&#x27;tbody&#x27;</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr,bs4.element.Tag):</span><br><span class="line">            tds = tr(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string,tds[<span class="number">1</span>].string,tds[<span class="number">4</span>].string])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span>(<span class="params">ulist,num</span>):</span></span><br><span class="line">    tplt = <span class="string">&quot;&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;&quot;</span></span><br><span class="line">    print(tplt.format(<span class="string">&quot;排名&quot;</span>,<span class="string">&quot;学校&quot;</span>,<span class="string">&quot;总分&quot;</span>,chr(<span class="number">12288</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">          u = ulist[i]</span><br><span class="line">          print(tplt.format(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>],chr(<span class="number">12288</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    uinfo = []</span><br><span class="line">    url = <span class="string">&#x27;http://www.zuihaodaxue.com/zuihaodaxuepaiming2020.html&#x27;</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    fillUnivList(uinfo,html)</span><br><span class="line">    printUnivList(uinfo,<span class="number">20</span>)</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC数据库连接</title>
    <url>/2020/10/10/JDBC%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="1-连接MySQL数据库及操作"><a href="#1-连接MySQL数据库及操作" class="headerlink" title="1.连接MySQL数据库及操作"></a>1.连接MySQL数据库及操作</h1><p>将”mysql-connector-java.jar”放入工作目录 –&gt; 右键Build Path –&gt; add。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//加载驱动类，并执行该类中的初始化代码，将驱动注册到DriverManager中</span></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">	Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">	System.out.println(<span class="string">&quot;加载数据库驱动成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;加载数据库驱动失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">//数据库的路径</span></span><br><span class="line"> String url=<span class="string">&quot;jdbc:mysql://localhost:3306/date&quot;</span>;</span><br><span class="line"> <span class="comment">//数据库的用户名</span></span><br><span class="line"> String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line"> <span class="comment">//密码</span></span><br><span class="line"> String password=<span class="string">&quot;liuxiang5.&quot;</span>;</span><br><span class="line">	Connection con=DriverManager.getConnection(url,user,password);</span><br><span class="line">	System.out.println(<span class="string">&quot;连接数据库成功&quot;</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;连接数据库失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h1><p>select* from 表名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//向数据库发送SQL查询语句</span></span><br><span class="line">	 Statement st=con.createStatement();</span><br><span class="line"><span class="comment">//执行查询</span></span><br><span class="line">	 String sql=<span class="string">&quot;select * from form1 where salary&gt;1900&quot;</span>; </span><br><span class="line">	 ResultSet rs=st.executeQuery(sql);  </span><br><span class="line"><span class="comment">//处理结果</span></span><br><span class="line">	 <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">		 String number=rs.getString(<span class="number">1</span>);</span><br><span class="line">		 String name=rs.getString(<span class="number">2</span>);</span><br><span class="line">		 Date birthday=rs.getDate(<span class="string">&quot;birthday&quot;</span>);</span><br><span class="line">		 <span class="keyword">double</span> salary=rs.getDouble(<span class="number">4</span>);</span><br><span class="line">		 System.out.println(number+<span class="string">&quot;   &quot;</span>+name+<span class="string">&quot;   &quot;</span>+birthday+<span class="string">&quot;   &quot;</span>+salary);</span><br><span class="line">	 &#125;</span><br><span class="line">	 rs.close();  <span class="comment">//关闭结果集</span></span><br><span class="line">	 con.close();  <span class="comment">//关闭连接</span></span><br><span class="line">	 &#125; </span><br><span class="line">	 <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;数据库操作异常&quot;</span>+e);</span><br><span class="line">		&#125;</span><br><span class="line">	 <span class="keyword">finally</span> &#123;</span><br><span class="line">		 System.out.println(<span class="string">&quot;数据库数据获取成功&quot;</span>);</span><br><span class="line">	 &#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-增加、删除、修改"><a href="#3-增加、删除、修改" class="headerlink" title="3.增加、删除、修改"></a>3.增加、删除、修改</h1><p>1.更新记录的SQL语法</p>
<p>UPDATE &lt;表名&gt; SET &lt;字段名&gt; = 新值 WHERE &lt;条件子句&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sql=<span class="string">&quot;update form1 set salary=5000 where name=&#x27;小明&#x27;&quot;</span>;</span><br><span class="line">pst=con.prepareStatement(sql);</span><br><span class="line"><span class="keyword">int</span> m=pst.executeUpdate();</span><br><span class="line"><span class="keyword">if</span>(m!=<span class="number">0</span>) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;更新了&quot;</span>+m+<span class="string">&quot;条记录&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>2.添加记录的SQL语法</p>
<p>​      INSERT INTO 表(字段列表) VALUES(对应的具体的记录)</p>
<p>或  INSERT INTO 表 VALUES(对应的具体的记录)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sql=<span class="string">&quot;insert into form1 values(&#x27;004&#x27;,&#x27;小明&#x27;,&#x27;2005-11-29&#x27;,&#x27;3000&#x27;)&quot;</span>;</span><br><span class="line">	PreparedStatement pst=con.prepareStatement(sql);</span><br><span class="line">	 <span class="keyword">int</span> m=pst.executeUpdate();</span><br><span class="line">	 <span class="keyword">if</span>(m!=<span class="number">0</span>) &#123;</span><br><span class="line">		 System.out.println(<span class="string">&quot;对标添加了&quot;</span>+m+<span class="string">&quot;条记录&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>3.删除记录的SQL语法</p>
<p>DELETE FROM &lt;表名&gt; WHERE &lt;条件子句&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> sql=<span class="string">&quot;delete from form1 where number=&#x27;005&#x27;&quot;</span>;</span><br><span class="line">pst=con.prepareStatement(sql);</span><br><span class="line"><span class="keyword">int</span> m=pst.executeUpdate();</span><br><span class="line"><span class="keyword">if</span>(m!=<span class="number">0</span>) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;删除了&quot;</span>+m+<span class="string">&quot;条记录&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="4-通配符"><a href="#4-通配符" class="headerlink" title="4.通配符"></a>4.通配符</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  sql=<span class="string">&quot;delete from form1 where salary=?&quot;</span>;</span><br><span class="line">pst=con.prepareStatement(sql);</span><br><span class="line">pst.setDouble(<span class="number">1</span>, <span class="number">5000</span>);</span><br><span class="line"><span class="keyword">int</span> m=pst.executeUpdate();</span><br><span class="line"><span class="keyword">if</span>(m!=<span class="number">0</span>) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;删除了&quot;</span>+m+<span class="string">&quot;条记录&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础</title>
    <url>/2020/10/10/Linux%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*   任意长度的任意字符</span><br><span class="line"></span><br><span class="line">?   单个任意字符</span><br><span class="line"></span><br><span class="line">[]   范围内的字符,如[a-z,0-9]</span><br><span class="line"></span><br><span class="line">&#123;&#125;   包含的字符串&#123;ab,cd&#125;</span><br><span class="line"></span><br><span class="line">[a-z]   除了大Z外的其他字母</span><br><span class="line"></span><br><span class="line">[A-Z]   除了小a外的其他字母</span><br><span class="line"></span><br><span class="line">[:upper:]   全大写字母</span><br><span class="line"></span><br><span class="line">[:lower:]   全小写</span><br><span class="line"></span><br><span class="line">[:alpha:]   全部大小写</span><br><span class="line"></span><br><span class="line">[:digit:]   全部数字</span><br><span class="line"></span><br><span class="line">[:alnum:]   全部数字+字母</span><br><span class="line"></span><br><span class="line">[^0-9]   0-9范围内的其他数值</span><br></pre></td></tr></table></figure>

<h1 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\n</span><br><span class="line"></span><br><span class="line">\b   退格</span><br><span class="line"></span><br><span class="line">\c   不打印换行</span><br><span class="line"></span><br><span class="line">\f   换页</span><br><span class="line"></span><br><span class="line">\a   警报(就是运行时嘀~一声)</span><br><span class="line"></span><br><span class="line">\r   回车</span><br></pre></td></tr></table></figure>

<h1 id="ll结果分析"><a href="#ll结果分析" class="headerlink" title="ll结果分析"></a>ll结果分析</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一 二   三  四  五  六   七   八    十</span><br><span class="line"> - rw- r-- r-- 1 root root 656 9月 9 06:38</span><br><span class="line"> </span><br><span class="line">一 &#39;-&#39;表文件,&#39;d&#39;表目录,&#39;l&#39;表链接</span><br><span class="line">二 当前用户权限，r读,w写,x执行</span><br><span class="line">三 当前组用户权限</span><br><span class="line">四 其他组权限</span><br><span class="line">五 文件被调用次数</span><br><span class="line">六 所有者</span><br><span class="line">七 所在组</span><br><span class="line">八 文件大小</span><br><span class="line">十 最后修改时间</span><br></pre></td></tr></table></figure>

<h1 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h1><h2 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h2><p>显示最底层目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">basename aa&#x2F;bb&#x2F;cc   # cc</span><br></pre></td></tr></table></figure>

<h2 id="dirname"><a href="#dirname" class="headerlink" title="dirname"></a>dirname</h2><p>显示前部目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dirname aa&#x2F;bb&#x2F;cc   # aa&#x2F;bb</span><br></pre></td></tr></table></figure>

<h2 id="history-历史记录"><a href="#history-历史记录" class="headerlink" title="history 历史记录"></a>history 历史记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">history   查看指令历史记录</span><br><span class="line"></span><br><span class="line">history 10  显示最近10条记录</span><br><span class="line"></span><br><span class="line">!&lt;记录序号&gt;   使用该记录的代码</span><br></pre></td></tr></table></figure>

<h2 id="help-帮助"><a href="#help-帮助" class="headerlink" title="help 帮助"></a>help 帮助</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">help 命令    用于内部命令</span><br><span class="line"></span><br><span class="line">命令 --help  用于外部命令</span><br></pre></td></tr></table></figure>

<h2 id="man-详细帮助"><a href="#man-详细帮助" class="headerlink" title="man 详细帮助"></a>man 详细帮助</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">man 命令</span><br><span class="line"></span><br><span class="line">&#x2F;  查找字符串</span><br><span class="line"></span><br><span class="line">q  退出手册</span><br></pre></td></tr></table></figure>

<h2 id="info-超详细目录"><a href="#info-超详细目录" class="headerlink" title="info 超详细目录"></a>info 超详细目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">info 命令   与man功能差不多，但查找到的东西更多</span><br></pre></td></tr></table></figure>

<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>设置默认选项</p>
<ol>
<li>进入 /etc/inittab</li>
<li>添加 id:3initdefault</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0   停机</span><br><span class="line"></span><br><span class="line">1   单用户</span><br><span class="line"></span><br><span class="line">2   多用户，没有NFS，不联网</span><br><span class="line"></span><br><span class="line">3   完全多用户(initdefault)</span><br><span class="line"></span><br><span class="line">4   没用</span><br><span class="line"></span><br><span class="line">5   图形化界面</span><br><span class="line"></span><br><span class="line">6   重启</span><br></pre></td></tr></table></figure>

<h2 id="paweroff"><a href="#paweroff" class="headerlink" title="paweroff"></a>paweroff</h2><p>关机</p>
<p>普通用户和管理员都可以用，如果多个用户用该系统，则普通用户也不能用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-w   不会关机,把记录写在&#x2F;var&#x2F;log&#x2F;wtmp里</span><br><span class="line"></span><br><span class="line">-d   与w相反,关机不写</span><br></pre></td></tr></table></figure>

<h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><p>关机或重启</p>
<p>只有管理员能够使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shutdown 5 byebye</span><br><span class="line"></span><br><span class="line">shutdown -r now</span><br><span class="line"></span><br><span class="line">shutdown 9:00</span><br><span class="line"></span><br><span class="line">-t   设定几分钟后关机，可省略</span><br><span class="line"></span><br><span class="line">-k   不会真关机，只会警告使用者</span><br><span class="line"></span><br><span class="line">-r   关机后重启</span><br><span class="line"></span><br><span class="line">-n   强制杀掉程序关机</span><br><span class="line"></span><br><span class="line">-c   取消进行中的关机动作</span><br></pre></td></tr></table></figure>

<h2 id="halt"><a href="#halt" class="headerlink" title="halt"></a>halt</h2><p>关闭操作系统</p>
<p>管理员权限才能使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-w   不关机，写记录&#x2F;var&#x2F;log&#x2F;wtmp</span><br><span class="line"></span><br><span class="line">-d   不写记录关机</span><br><span class="line"></span><br><span class="line">-f   强制关机,不呼叫shutdown</span><br><span class="line"></span><br><span class="line">-p   关机的时候关闭电源(poweroff)</span><br></pre></td></tr></table></figure>

<h2 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h2><p>普通用户和管理员都可以用，如果多个用户用该系统，则普通用户也不能用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-w</span><br><span class="line"></span><br><span class="line">-d</span><br><span class="line"></span><br><span class="line">-f</span><br></pre></td></tr></table></figure>

<h2 id="logname"><a href="#logname" class="headerlink" title="logname"></a>logname</h2><p>初次登陆的用户</p>
<h2 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h2><p>当前活动用户</p>
<h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><p>详情版users</p>
<p>当前登录系统的用户列表</p>
<h2 id="users"><a href="#users" class="headerlink" title="users"></a>users</h2><p>当前登录系统的用户列表</p>
<h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>查看用户的详细信息</p>
<h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>登录系统的历史信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-num   展示前num个</span><br><span class="line"></span><br><span class="line">username   展示username的登入信息</span><br></pre></td></tr></table></figure>

<h2 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h2><p>显示计算机的基本信息</p>
<h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><p>显示计算机名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostname XXX  暂时更改主机名</span><br></pre></td></tr></table></figure>

<h2 id="hostnamectl"><a href="#hostnamectl" class="headerlink" title="hostnamectl"></a>hostnamectl</h2><p>永久设置主机名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl status   查看当前主机名设置</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname XXX</span><br></pre></td></tr></table></figure>

<h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><p>/etc/passwd 存放用户信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-d   指定用户的登入目录</span><br><span class="line"></span><br><span class="line">-e   账户有效天数</span><br><span class="line"></span><br><span class="line">-f   账号过期多少天后关闭</span><br><span class="line"></span><br><span class="line">-r   建立系统账号</span><br><span class="line"></span><br><span class="line">-g   指定所属群组</span><br><span class="line"></span><br><span class="line">-G   所属附加群组</span><br><span class="line"></span><br><span class="line">-u   指定用户ID</span><br></pre></td></tr></table></figure>

<h2 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h2><p>修改用户</p>
<p>useradd中选项大多适用于usermod</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-l   修改用户名</span><br><span class="line"></span><br><span class="line">-L   锁定账号密码</span><br><span class="line"></span><br><span class="line">-U   解除密码锁定</span><br></pre></td></tr></table></figure>

<h2 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-r   删除用户登入目录</span><br></pre></td></tr></table></figure>

<h2 id="su"><a href="#su" class="headerlink" title="su"></a>su</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su test   切换到test</span><br><span class="line"></span><br><span class="line">su - test   切换到test且当前路径改为test的home</span><br><span class="line"></span><br><span class="line">su -c ls root   借用root的权限</span><br></pre></td></tr></table></figure>

<h2 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h2><p>/etc/group 存放组的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-g   指定组的id</span><br><span class="line"></span><br><span class="line">-r   创建系统工作组，组的id小于500</span><br></pre></td></tr></table></figure>

<h2 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-n &lt;new_name&gt; &lt;old_name&gt;  设置新的组名</span><br></pre></td></tr></table></figure>

<h2 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h2><h2 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..  回到父目录</span><br><span class="line"></span><br><span class="line">cd -   回到上一个目录</span><br><span class="line"></span><br><span class="line">cd ~   回到家目录</span><br></pre></td></tr></table></figure>

<h2 id="pwd-查看当前目录"><a href="#pwd-查看当前目录" class="headerlink" title="pwd 查看当前目录"></a>pwd 查看当前目录</h2><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-n   # 给每行加上序号，包括空格</span><br><span class="line"></span><br><span class="line">-b   # 加序号，不包括空格</span><br><span class="line"></span><br><span class="line">-s   # 将一行以上的空行转换为一行</span><br><span class="line"></span><br><span class="line">cat -n test1 &gt; test2   # 将test1文本加上序号后复制test2</span><br></pre></td></tr></table></figure>

<h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>enter   下一行</p>
<p>f   隔一页    </p>
<p>空格   下一屏</p>
<p>b   上一屏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-s   # 将一行以上的空行转换为一行</span><br><span class="line"></span><br><span class="line">more +10 test   # 在第10行开始显示</span><br><span class="line"></span><br><span class="line">more -3 test   # 每次显示3行</span><br></pre></td></tr></table></figure>

<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -a  显示所有文件和目录</span><br><span class="line"></span><br><span class="line">ls -d  只显示目录</span><br><span class="line"></span><br><span class="line">ls -l  文件详情信息</span><br><span class="line"></span><br><span class="line">ls -r  反次序显示</span><br><span class="line"></span><br><span class="line">ls -t  按建立时间列出</span><br><span class="line"></span><br><span class="line">ls -A  同a，不列出.与..</span><br><span class="line"></span><br><span class="line">ls -R  显示所有文件包括目录里的</span><br></pre></td></tr></table></figure>

<h2 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir 创建目录"></a>mkdir 创建目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &lt;选项&gt; &lt;目录名&gt;</span><br><span class="line"></span><br><span class="line">mkdir &#123;user1,user2,user3&#125;  创建多个目录</span><br><span class="line"></span><br><span class="line">mkdir -m &lt;权限&gt; &lt;目录名&gt;   创建权限目录</span><br><span class="line"> </span><br><span class="line">mkdir -v &lt;目录名&gt;   创建并显示信息</span><br><span class="line"></span><br><span class="line">mkdir -p test1&#x2F;test1.1 创建目录及子目录</span><br></pre></td></tr></table></figure>

<h2 id="rmdir-删除目录"><a href="#rmdir-删除目录" class="headerlink" title="rmdir 删除目录"></a>rmdir 删除目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rmdir -p  test1&#x2F;test1.1</span><br><span class="line"></span><br><span class="line">rmdir -v  显示指令执行过程</span><br></pre></td></tr></table></figure>

<h2 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch 创建文件"></a>touch 创建文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch &#123;t1,t2&#125;.mp4</span><br><span class="line"></span><br><span class="line">touch -c &lt;文件名&gt;   更改访问时间</span><br></pre></td></tr></table></figure>

<h2 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp 复制文件或目录"></a>cp 复制文件或目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &lt;文件&gt; &lt;指令&gt; &lt;指定目录&gt;</span><br><span class="line"></span><br><span class="line"> -p   保持原属性不变</span><br><span class="line"></span><br><span class="line"> -r   递归复制目录下所有文件</span><br><span class="line"></span><br><span class="line"> -f   强制复制，直接覆盖重名</span><br><span class="line"> </span><br><span class="line"> -l   不复制，只生产链接文件</span><br></pre></td></tr></table></figure>

<h2 id="mv-移动文件、改名"><a href="#mv-移动文件、改名" class="headerlink" title="mv 移动文件、改名"></a>mv 移动文件、改名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &lt;选项&gt; &lt;源文件&gt; &lt;指定目录&gt;</span><br><span class="line"></span><br><span class="line">mv &lt;old_name&gt; &lt;new_name&gt;</span><br><span class="line"></span><br><span class="line"> -b  若覆盖，先备份</span><br><span class="line"> </span><br><span class="line"> -f  直接覆盖</span><br><span class="line"> </span><br><span class="line"> -u  若源文件较新，就更新目标文件</span><br></pre></td></tr></table></figure>

<h2 id="rm-删除文件"><a href="#rm-删除文件" class="headerlink" title="rm 删除文件"></a>rm 删除文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm &lt;选项&gt; &lt;文件名&gt;</span><br><span class="line"> </span><br><span class="line">  -f  强行删除</span><br><span class="line">  </span><br><span class="line">  -r  删除目录及文件</span><br></pre></td></tr></table></figure>

<h2 id="ln链接"><a href="#ln链接" class="headerlink" title="ln链接"></a>ln链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln &lt;选项&gt; &lt;文件&gt; &lt;目标&#x2F;new_name&gt;</span><br><span class="line"></span><br><span class="line">-b   删除,覆盖以前建的链接</span><br><span class="line"></span><br><span class="line">-d   允许超级用户制作目录的硬链接</span><br><span class="line"></span><br><span class="line">-f</span><br><span class="line"></span><br><span class="line">-i</span><br><span class="line"></span><br><span class="line">-v   显示处理过程</span><br><span class="line"></span><br><span class="line">-n   把符号链接视为一般目录(老师说这话是硬链接0.0)</span><br><span class="line"></span><br><span class="line">-s   软链接(符号链接)</span><br></pre></td></tr></table></figure>

<h2 id="find-查找文件"><a href="#find-查找文件" class="headerlink" title="find 查找文件"></a>find 查找文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find 路径 &lt;选项&gt; &lt;文件名&gt;</span><br><span class="line"> </span><br><span class="line"> -name   区分大小写</span><br><span class="line"> </span><br><span class="line"> -iname  不区分大小写</span><br><span class="line"> </span><br><span class="line"> -size -10M  小于10M的文件</span><br><span class="line"> </span><br><span class="line"> -type   类型</span><br><span class="line"> </span><br><span class="line"> -user   所属用户</span><br><span class="line"> </span><br><span class="line"> -group  所属组</span><br></pre></td></tr></table></figure>

<h2 id="vi-编辑"><a href="#vi-编辑" class="headerlink" title="vi 编辑"></a>vi 编辑</h2><p>三种模式：命令模式、编辑模式(插入模式)、末行模式</p>
<p>命令模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &lt;文档1&gt;,&lt;文档2&gt;,&lt;文档3&gt;</span><br><span class="line"></span><br><span class="line">:n   下一个文件</span><br><span class="line"></span><br><span class="line">:e   指定文件</span><br><span class="line"></span><br><span class="line">i&#x2F;I   当前位置字符前插入&#x2F;所在行最前方字符</span><br><span class="line"></span><br><span class="line">a&#x2F;A   当前位置字符后插入&#x2F;所在行最后面字符</span><br><span class="line"></span><br><span class="line">o&#x2F;O   当前位置的下一行开始插入</span><br><span class="line"></span><br><span class="line">c   好像是清空再插入</span><br><span class="line"></span><br><span class="line">p   将最后一个删除文本放在当前字符</span><br></pre></td></tr></table></figure>

<p>末行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:w!   强制保存</span><br><span class="line"></span><br><span class="line">:q!   强制退出</span><br><span class="line"></span><br><span class="line">:e!   放弃所有修改，重上次保存开始再编辑</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:n1,n2 w [filename]   将n1到n2行保存为另一个文件</span><br><span class="line"></span><br><span class="line">:![command]   在vi里使用命令</span><br><span class="line"></span><br><span class="line">:r [filename]   将一个文件的内容写到光标所在位置</span><br><span class="line"></span><br><span class="line">:r![command]   将命令结果写入文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:n1,n2 co n3   复制</span><br><span class="line"></span><br><span class="line">:n1,n2 m n3   移动</span><br><span class="line"></span><br><span class="line">:n1,n2 d   删除</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:set nu   打开行号</span><br><span class="line"></span><br><span class="line">:set nonu   关闭行号</span><br><span class="line"></span><br><span class="line">:数字   定位到具体行</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;pattern   移动到下一个包含pattern的行</span><br><span class="line"></span><br><span class="line">?pattern   移动到上一个</span><br><span class="line"></span><br><span class="line">&#x2F;pattern&#x2F;+n   移动到下一个后的第n行</span><br><span class="line"></span><br><span class="line">?pattern?-n   移动到上一个前的第n行</span><br><span class="line"></span><br><span class="line">s&#x2F;str1&#x2F;str2   替换行中首个出现的st1</span><br><span class="line"></span><br><span class="line">s&#x2F;str1&#x2F;str2&#x2F;g   替换所有</span><br><span class="line"></span><br><span class="line">.,$s&#x2F;str1&#x2F;str2&#x2F;g   当前行到末尾</span><br><span class="line"></span><br><span class="line">3,5s&#x2F;str1&#x2F;str2&#x2F;gc    3~5行显示步骤，逐一替换</span><br></pre></td></tr></table></figure>

<h2 id="tar、gzip打包解压"><a href="#tar、gzip打包解压" class="headerlink" title="tar、gzip打包解压"></a>tar、gzip打包解压</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zcvf test.tar.gz &lt;目标文件&gt;</span><br><span class="line"></span><br><span class="line">tar -zxvf test.tar.gz -C &lt;目标目录&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-z   # 压缩</span><br><span class="line"></span><br><span class="line">-c   # 打包</span><br><span class="line"></span><br><span class="line">-x   # 解包</span><br><span class="line"></span><br><span class="line">-v   # 显示过程</span><br><span class="line"></span><br><span class="line">-f   # 指定备份文件</span><br></pre></td></tr></table></figure>

<h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>默认输出后换行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;string&quot;</span><br><span class="line"></span><br><span class="line">echo &#96;date&#96;   不是单引号，是反引号</span><br><span class="line"></span><br><span class="line">-e   识别转义符</span><br><span class="line"></span><br><span class="line">-n   输出后不换行</span><br></pre></td></tr></table></figure>

<h2 id="printf输出"><a href="#printf输出" class="headerlink" title="printf输出"></a>printf输出</h2><p>默认输出后不换行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf &quot;this is string&quot;   无双引号，单引号都可</span><br><span class="line"></span><br><span class="line">printf &quot;this is %s\n&quot; &quot;sting&quot;   在不带引号的时候要\\n才能换行</span><br></pre></td></tr></table></figure>

<h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date &#39;+%D&#39;</span><br><span class="line"></span><br><span class="line">%D   09&#x2F;26&#x2F;20</span><br><span class="line"></span><br><span class="line">%x   09&#x2F;26&#x2F;2020</span><br><span class="line"></span><br><span class="line">%T   23:10:31</span><br><span class="line"></span><br><span class="line">%X   23:10:31 PM </span><br></pre></td></tr></table></figure>

<h2 id="cal日历"><a href="#cal日历" class="headerlink" title="cal日历"></a>cal日历</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cal 2020</span><br><span class="line"></span><br><span class="line">-y   当年日历</span><br><span class="line"></span><br><span class="line">-3   上个月，这月，下月</span><br><span class="line"></span><br><span class="line">-j   某一日位于当年的第几天</span><br></pre></td></tr></table></figure>

<h2 id="expr计数器"><a href="#expr计数器" class="headerlink" title="expr计数器"></a>expr计数器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expr 2 + 5         # 7</span><br><span class="line"></span><br><span class="line">expr 2+5           # 2+5</span><br><span class="line"></span><br><span class="line">expr length &quot;this&quot;   # 4</span><br><span class="line"></span><br><span class="line">expr substr &quot;this is a test&quot; 3 5   # is is 在第3个字符开始,抓取5个字符</span><br><span class="line"></span><br><span class="line">expr index &quot;123456&quot; 5   # 5 抓取该字符第一次出现的位置</span><br></pre></td></tr></table></figure>

<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls &gt; t.txt   # 将ls结果存放到t.txt中</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;   # 将标准输出覆盖写入文件</span><br><span class="line"></span><br><span class="line">&gt;&gt;   # 追加写入文件</span><br><span class="line"></span><br><span class="line">&amp;&gt;   # 将错误信息重定向，&gt;&amp;一样</span><br><span class="line"></span><br><span class="line">&amp;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls | grep &lt;patter&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|   # 将两边代码连起来</span><br></pre></td></tr></table></figure>

<h1 id="软链接与硬链接"><a href="#软链接与硬链接" class="headerlink" title="软链接与硬链接"></a>软链接与硬链接</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>软链接<br>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式<br>2.软链接可以跨文件系统 ，硬链接不可以<br>3.软链接可以对一个不存在的文件名进行链接<br>4.软链接可以对目录进行链接<br>硬链接：<br>1.硬链接以文件副本的形式存在。但不占用实际空间。<br>2.不允许给目录创建硬链接<br>3.硬链接只有在同一个文件系统中才能创建</p>
<h2 id="软链接de特征"><a href="#软链接de特征" class="headerlink" title="软链接de特征"></a>软链接de特征</h2><p>1.软链接有自己的文件属性及权限等；<br>2.可对不存在的文件或目录创建软链接；<br>3.软链接可交叉文件系统；<br>4.软链接可对文件或目录创建；<br>5.创建软链接时，链接计数 i_nlink 不会增加；<br>6.删除软链接并不影响被指向的文件,但若被指向的原文件被删除，则相关软连接被称为死链接<br>   (即 dangling link,若被指向路径文件被重新创建,死链接可恢复为正常的软链接）。</p>
<h1 id="光标快捷移动"><a href="#光标快捷移动" class="headerlink" title="光标快捷移动"></a>光标快捷移动</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">←、h、backspace</span><br><span class="line"></span><br><span class="line">→、l、space</span><br><span class="line"></span><br><span class="line">↑、k、Ctrl+p</span><br><span class="line"></span><br><span class="line">↓、j、Ctrl+n、Enter</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H   窗口第一行</span><br><span class="line"></span><br><span class="line">M   窗口中间行</span><br><span class="line"></span><br><span class="line">L   窗口最末行</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G   文件最后一行</span><br><span class="line"></span><br><span class="line">gg   文件第一行</span><br><span class="line"></span><br><span class="line">n G &#x2F; n gg   文件第n行</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^   本行第一个非空字符</span><br><span class="line"></span><br><span class="line">$   行尾</span><br><span class="line"></span><br><span class="line">0   行首</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">段落以 空行 区分</span><br><span class="line">&#123;   所在段落第一字母</span><br><span class="line"></span><br><span class="line">&#125;   所在段落在最后一个字母</span><br><span class="line"></span><br><span class="line">句子以 标点 区分</span><br><span class="line">(   所在句子第一个字母</span><br><span class="line"> </span><br><span class="line">)   下一个句子的第一个字母</span><br><span class="line"></span><br><span class="line">单词以 空格 区分</span><br><span class="line">大写的忽略字符</span><br><span class="line"></span><br><span class="line">w,W   下一个字的开头</span><br><span class="line"></span><br><span class="line">b,B   前一个字的开头</span><br><span class="line"></span><br><span class="line">e,E   下一个字的末尾</span><br><span class="line"></span><br><span class="line">ge,gE   前一个字的末尾</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yy   复制当行到内存缓冲区</span><br><span class="line"></span><br><span class="line">4yy   复制光标所在行开始向下4行</span><br><span class="line"></span><br><span class="line">p   将缓冲区内容放到光标后面</span><br><span class="line"></span><br><span class="line">P(大写)   将缓冲区内容放到光标前面</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x   删除光标所在字符</span><br><span class="line"></span><br><span class="line">X   前面字符</span><br><span class="line"></span><br><span class="line">s   删除光标所在字符并进入插入模式</span><br><span class="line"></span><br><span class="line">S   删除所在行进入插入模式</span><br><span class="line"></span><br><span class="line">dd   删除所在行</span><br><span class="line"></span><br><span class="line">2dd   删除光标所在行开始向下两行</span><br><span class="line"></span><br><span class="line">D   删除从光标位置到行尾</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r   修改光标字符，比如ra</span><br><span class="line"></span><br><span class="line">R   进入替换型插入模式</span><br><span class="line"></span><br><span class="line">cc   修改所在行(感觉和大写S功能一样)</span><br><span class="line"></span><br><span class="line">C(大写)   修改光标位置到末尾(比D多了个插入)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n   在同一方向查找</span><br><span class="line"></span><br><span class="line">N   在相反方向查找</span><br><span class="line"></span><br><span class="line">u   撤销前一条命令结果</span><br><span class="line"></span><br><span class="line">.   重复前一步</span><br></pre></td></tr></table></figure>

<h1 id="Shell-高级程序设计语言"><a href="#Shell-高级程序设计语言" class="headerlink" title="Shell(高级程序设计语言)"></a>Shell(高级程序设计语言)</h1><p>常用版本：sh、ash、bsh、csh、ksh</p>
<p>shell脚本第一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>



<p>/etc/passwd查看用户使用的shall</p>
<p>/etc/shells查看安装的shell</p>
<h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">env   # 展示环境变量</span><br><span class="line"></span><br><span class="line">set   # 展示本地变量</span><br><span class="line"></span><br><span class="line">echo $&#123;path-nopath&#125;   # 判断是否定义</span><br><span class="line"></span><br><span class="line">echo $&#123;path:-nopath&#125;   # 判断是否有值</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unset x   # 删除环境和本地变量x</span><br><span class="line"></span><br><span class="line">export x   # 将本地变量x转换为环境变量</span><br><span class="line"></span><br><span class="line">readonly x   # 将x设置为只读</span><br></pre></td></tr></table></figure>

<p>read输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">read a   # 输入变量a</span><br><span class="line"></span><br><span class="line">read -p &lt;提示语句&gt; a</span><br><span class="line"></span><br><span class="line">read -t &lt;秒数&gt; a</span><br><span class="line"></span><br><span class="line">read -n &lt;字符个数&gt; a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>数组变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare -a nn   # 声明</span><br><span class="line">nn&#x3D;(my name is scary pig)   # 赋值,等号两边不能有空格</span><br><span class="line"></span><br><span class="line">echo $nn   # my</span><br><span class="line">echo $&#123;nn[1]&#125;   # name</span><br></pre></td></tr></table></figure>

<p>数值型变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare -i a</span><br><span class="line">a&#x3D;11+2   # a&#x3D;13</span><br><span class="line"></span><br><span class="line">declare b</span><br><span class="line">b&#x3D;11+2   # b&#x3D;&#39;11+2&#39;</span><br></pre></td></tr></table></figure>

<p>只读型变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare -r a</span><br></pre></td></tr></table></figure>

<p>查看变量状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare -p a   # 输出declare -r a&#x3D;&quot;11&quot;</span><br></pre></td></tr></table></figure>

<h2 id="变量的更改"><a href="#变量的更改" class="headerlink" title="变量的更改"></a>变量的更改</h2><p>增加输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $&#123;a&#125;123   #输出增加123</span><br><span class="line"></span><br><span class="line">echo 123$a</span><br></pre></td></tr></table></figure>

<p>删除输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $&#123;path#&#x2F;*:&#125;   # 删除从左则开始第一个符合的,以&#x2F;开头*结尾</span><br><span class="line"></span><br><span class="line">echo $&#123;path##&#x2F;*:&#125;   # 删除最长符合的</span><br><span class="line"></span><br><span class="line">echo $&#123;path%:*&#125;   # 从右向左查找</span><br><span class="line"></span><br><span class="line">echo $&#123;path%%:*&#125;</span><br></pre></td></tr></table></figure>

<p>替换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $&#123;path&#x2F;bin&#x2F;123&#125;   # 替换第一个(从左向右)</span><br><span class="line"></span><br><span class="line">echo $&#123;path&#x2F;&#x2F;bin&#x2F;123&#125;   # 替换全部</span><br></pre></td></tr></table></figure>

<h2 id="shell程序的运行方法"><a href="#shell程序的运行方法" class="headerlink" title="shell程序的运行方法"></a>shell程序的运行方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 第一种</span><br><span class="line">bash test.sh   # 简写 . test.sh</span><br><span class="line">#第二章(当脚本具有执行权限时)</span><br><span class="line">.&#x2F;test.sh   # 路径的方式</span><br></pre></td></tr></table></figure>

<h2 id="shell注释"><a href="#shell注释" class="headerlink" title="shell注释"></a>shell注释</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一行</span><br><span class="line"></span><br><span class="line">:&lt;&lt;! </span><br><span class="line">多行</span><br><span class="line"> !</span><br></pre></td></tr></table></figure>

<h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><p>x=10</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;$x&quot;   # 10</span><br><span class="line"></span><br><span class="line">echo &#39;$x&#39;   # $x</span><br><span class="line"></span><br><span class="line">echo &#96;ls&#96;   #显示命令结果</span><br><span class="line"></span><br><span class="line">echo $(ls)   # 显示命令</span><br><span class="line"></span><br><span class="line">\   # 转义字符</span><br></pre></td></tr></table></figure>

<h2 id="if-else、while、until、for"><a href="#if-else、while、until、for" class="headerlink" title="if-else、while、until、for"></a>if-else、while、until、for</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-d	检查此file是否是一个目录</span><br><span class="line">-e	检查此file是否存在 </span><br><span class="line">-f	检查此file是否为一般的文件</span><br><span class="line">-g	检查此file是否有SGID权限</span><br><span class="line">-r	检查此file是否可以读取 </span><br><span class="line">-s	检查此file大小是否不为0</span><br><span class="line">-u	检查此file是否有SUID权限</span><br><span class="line">-w	检查此file是否可以写入</span><br><span class="line">-x	检查此file是否可以执行</span><br><span class="line">-c  检查此file文件是否是字符设备文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数值之间的比较</span><br><span class="line">-eq   相等</span><br><span class="line">-ne   不相等</span><br><span class="line">-gt   大于</span><br><span class="line">-lt   小于</span><br><span class="line"># 字符串之间的比较</span><br><span class="line">&#x3D;</span><br><span class="line">!&#x3D;</span><br><span class="line">-n   不是空字符串则为真</span><br><span class="line">-z   是空字符串为真</span><br></pre></td></tr></table></figure>

<p>if-else</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">if test -f t.txt   # 判断t.txt是否存在</span><br><span class="line">then</span><br><span class="line">ehco &#39;exist&#39;</span><br><span class="line">else</span><br><span class="line">echo &#39;no exist&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">x&#x3D;2</span><br><span class="line">if [ -f t.txt ];then</span><br><span class="line">echo &#39;yes&#39;</span><br><span class="line">else</span><br><span class="line">echo &#39;no&#39;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>while</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">while true;</span><br><span class="line">do</span><br><span class="line">echo &#39;Hellow World&#39;</span><br><span class="line">done   # 按ctrl+c退出循环</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">x&#x3D;0</span><br><span class="line">while [ $x -le 10 ];   # 不满足条件停止</span><br><span class="line">do</span><br><span class="line">echo Hellow$x</span><br><span class="line">x&#x3D;$(expr $x + 1)</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>until</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">x&#x3D;0</span><br><span class="line">until [ $x -gt 10];   #满足停止</span><br><span class="line">do</span><br><span class="line">echo Hellow$x</span><br><span class="line">x&#x3D;$(expr $x + 1)</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>for</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">for i in 1 2 3;</span><br><span class="line">do</span><br><span class="line">echo -n &quot;$i&quot;   # 123</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><h3 id="文字设定法"><a href="#文字设定法" class="headerlink" title="文字设定法"></a>文字设定法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u+r test</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">u   # 用户</span><br><span class="line"></span><br><span class="line">g   # 同组</span><br><span class="line"></span><br><span class="line">o   # 其他</span><br><span class="line"></span><br><span class="line">a   # 所有</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+   # 添加</span><br><span class="line"></span><br><span class="line">-   # 取消</span><br><span class="line"></span><br><span class="line">&#x3D;   # 赋值给定权限并取消其他所有权限</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r   # 读</span><br><span class="line"></span><br><span class="line">w   # 写</span><br><span class="line"></span><br><span class="line">x   # 执行</span><br><span class="line"></span><br><span class="line">u   # 与属主一样的权限</span><br><span class="line"></span><br><span class="line">g   # 与同组一样的权限</span><br><span class="line"></span><br><span class="line">o   # 与其他用户一样的权限</span><br></pre></td></tr></table></figure>

<h3 id="数字设定法"><a href="#数字设定法" class="headerlink" title="数字设定法"></a>数字设定法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 671 test   # rw-rwx--x</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r   # 4</span><br><span class="line"></span><br><span class="line">w   # 2</span><br><span class="line"></span><br><span class="line">x   # 1</span><br></pre></td></tr></table></figure>

<h2 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chgrp group_name file_name   # 更改所在组</span><br><span class="line"></span><br><span class="line">chgrp -R group_name &#x2F;a&#x2F;b &#x2F;c   # 修改b和c下的所有文件所属组</span><br></pre></td></tr></table></figure>

<h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown user_name file_name   # 修改所属用户</span><br><span class="line"></span><br><span class="line">chown user_name:group_name file_name   # 修改所属用户和组</span><br><span class="line"></span><br><span class="line">-R   # 递归修改所有</span><br></pre></td></tr></table></figure>

<h1 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h1><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &lt;patter&gt; file   # 查看文本内容</span><br><span class="line"></span><br><span class="line">ls | grep &lt;patter&gt;   # 查找文件</span><br><span class="line"></span><br><span class="line">grep &quot;^[0-9]&quot; t.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-i   # 忽略大小写</span><br><span class="line"></span><br><span class="line">-n   # 显示所在行序号</span><br><span class="line"></span><br><span class="line">-v   # 显示不符合</span><br><span class="line"></span><br><span class="line">-r   # 查找目标目录及其子目录下所有的文件内容</span><br></pre></td></tr></table></figure>

<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;条件1&#123;动作1&#125; 条件2&#123;动作2&#125;&#39; t.txt</span><br></pre></td></tr></table></figure>

<p>条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN   # 开始的时候,awk &#39;BEGIN&#123;..&#125;&#39;</span><br><span class="line"></span><br><span class="line">END   # 结束的时候</span><br></pre></td></tr></table></figure>

<p>动作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FN&#x3D;&quot;:&quot;   # 将:设为分割符,awk &#39;&#123;FN&#x3D;&quot;:&quot;&#125;&#39;</span><br></pre></td></tr></table></figure>

<h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cut -d &quot;%&quot;   # 以%为分割符</span><br><span class="line"></span><br><span class="line">cut -f 2,3 t.txt   # 只显示2,3列</span><br></pre></td></tr></table></figure>

<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i   # 将修改写入文件</span><br><span class="line"></span><br><span class="line">sed -e   # 以选择的选项处理文件，默认都有</span><br><span class="line"></span><br><span class="line">sed -f   # 以指定文件处理</span><br><span class="line"></span><br><span class="line">sed -n   # 仅显示处理后的结果</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &#39;3a new&#39; file   # 在第三行后增加new</span><br><span class="line"></span><br><span class="line">sed &#39;3a</span><br><span class="line">&#39; file   # 增加第四行空行</span><br><span class="line"></span><br><span class="line">sed &#39;2i new&#39; file   # 在第二行前增加内容</span><br><span class="line"></span><br><span class="line">sed &#39;2,5c str&#39; file   # 将2~5行替换成str</span><br><span class="line"></span><br><span class="line">sed &#39;1,$s&#x2F;and&#x2F;or&#x2F;g&#39; file   # 将全文and替换成or</span><br><span class="line"></span><br><span class="line">sed -n &#39;2,5p&#39; file   # 将file中2~5行打印出来,与-n一起用</span><br></pre></td></tr></table></figure>

<h1 id="root密码修改"><a href="#root密码修改" class="headerlink" title="root密码修改"></a>root密码修改</h1><p>在系统内修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>

<p>在系统外修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不会进入单用户模式。。。以后再弄吧</span><br></pre></td></tr></table></figure>

<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-e   # 显示所有进程</span><br><span class="line"></span><br><span class="line">-l   # 显示详细进程</span><br><span class="line"></span><br><span class="line">-a   # 显示所有终端上的程序</span><br><span class="line"></span><br><span class="line">-u   # 以用户为主的格式显示进程</span><br><span class="line"></span><br><span class="line">-x   # 显示所有进程，不以终端区分</span><br><span class="line"></span><br><span class="line">-aux   # 查看整个系统的进程</span><br><span class="line"></span><br><span class="line">-ef   # 输出信息更具窗口大小截取</span><br><span class="line"></span><br><span class="line">-efww   # 输出完整的</span><br><span class="line"></span><br><span class="line">-p1,2   # 指定端口1，2</span><br><span class="line"></span><br><span class="line">-U   # 指定用户</span><br><span class="line"></span><br><span class="line">-C   # 指定程序</span><br><span class="line"></span><br><span class="line">-tN   # 指定终端N</span><br></pre></td></tr></table></figure>

<h2 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h2><p>yum install psmisc -y</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a   # 显示执行程序的命令与完整参数</span><br><span class="line"></span><br><span class="line">-h   # 对正在执行的进行高亮</span><br><span class="line"></span><br><span class="line">-n   # 以PID从小到大排序</span><br><span class="line"></span><br><span class="line">-p   # 显示PID</span><br><span class="line"></span><br><span class="line">-u   # 显示UID</span><br></pre></td></tr></table></figure>

<h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>系统监控命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;空格&gt;   # 刷新</span><br><span class="line"></span><br><span class="line">P   # 根据CPU使用大小排序</span><br><span class="line"></span><br><span class="line">T   # 根据时间，累计时间排序</span><br><span class="line"></span><br><span class="line">q   # 退出</span><br><span class="line"></span><br><span class="line">t   # 切换显示进程和cpu状态信息</span><br><span class="line"></span><br><span class="line">c   # 切换显示命令名称和完整命令行</span><br><span class="line"></span><br><span class="line">m   # 切换内存显示</span><br><span class="line"></span><br><span class="line">M   # 根据内存大小排序</span><br></pre></td></tr></table></figure>

<p>第一行</p>
<p><img src="C:\Users\86184\AppData\Roaming\Typora\typora-user-images\image-20201201220942236.png" alt="image-20201201220942236"></p>
<p>第二行</p>
<p><img src="C:\Users\86184\AppData\Roaming\Typora\typora-user-images\image-20201201220954168.png" alt="image-20201201220954168"></p>
<p>第三行</p>
<p><img src="C:\Users\86184\AppData\Roaming\Typora\typora-user-images\image-20201201221003800.png" alt="image-20201201221003800"></p>
<p>第四行</p>
<p><img src="C:\Users\86184\AppData\Roaming\Typora\typora-user-images\image-20201201221012330.png" alt="image-20201201221012330"></p>
<p>第五行</p>
<p><img src="C:\Users\86184\AppData\Roaming\Typora\typora-user-images\image-20201201221020829.png" alt="image-20201201221020829"></p>
<h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 324   # 杀掉进程标识号为324的进程</span><br><span class="line"></span><br><span class="line">kill -KILL 324   # 与上一个一样</span><br><span class="line"></span><br><span class="line">killall   # 杀死一组进程</span><br></pre></td></tr></table></figure>

<h2 id="nice"><a href="#nice" class="headerlink" title="nice"></a>nice</h2><p>改变进程执行的优先权等级</p>
<p>数越小等级越高</p>
<p>范围: root  -20<del>19    user   0</del>19</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nice -n 1 ls   # 将ls的优先序加一</span><br></pre></td></tr></table></figure>

<h2 id="bg"><a href="#bg" class="headerlink" title="bg"></a>bg</h2><p>使一个被挂起的进程在后台执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls&amp;   # &amp;直接在后台运行</span><br></pre></td></tr></table></figure>

<h2 id="fg"><a href="#fg" class="headerlink" title="fg"></a>fg</h2><p>使一个被挂起的进程在前台执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fg -后台号码</span><br></pre></td></tr></table></figure>

<h2 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h2><p>显示后台任务的执行情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-l   # 显示全部内容</span><br><span class="line"></span><br><span class="line">-n   # 不输出信息</span><br><span class="line"></span><br><span class="line">-p   # 只输出进程号</span><br><span class="line"></span><br><span class="line">-r   # 只输出运行的进程</span><br></pre></td></tr></table></figure>

<h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sleep 3s   # 将进程暂停3秒 s、m、h、d</span><br></pre></td></tr></table></figure>

<h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p>查看Linux文件系统的状态信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-k   # 以KB为单位显示各分区的信息</span><br><span class="line"></span><br><span class="line">-a   # 显示所有分区包括大小为0的分区</span><br><span class="line"></span><br><span class="line">-T   # 显示分区类型</span><br><span class="line"> </span><br><span class="line">–h   # 查看磁盘用了多少，还剩多少，更加人性化些有单位了如G</span><br></pre></td></tr></table></figure>

<h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><p>查看文件大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -m 文件名</span><br><span class="line"></span><br><span class="line">-a   # 统计所有文件的磁盘使用情况</span><br><span class="line"></span><br><span class="line">-b   # 以字节为单位 -k -m</span><br></pre></td></tr></table></figure>



<h1 id="任务定时"><a href="#任务定时" class="headerlink" title="任务定时"></a>任务定时</h1><h2 id="at"><a href="#at" class="headerlink" title="at"></a>at</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">atq   # 查看作业列表</span><br><span class="line"></span><br><span class="line">atrm 作业编号   # 删除作业</span><br></pre></td></tr></table></figure>

<p>安装:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install at</span><br><span class="line">systemctl start atd</span><br><span class="line">systemctl enable atd</span><br></pre></td></tr></table></figure>

<p>时间设定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">minutes、hours、days、weeks</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">now+0minutes</span><br><span class="line"></span><br><span class="line">4:00</span><br><span class="line"></span><br><span class="line">midnight(12AM)  noon(12PM)  teatime(4PM)</span><br><span class="line"></span><br><span class="line">011505   # 05年1月15号</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">at now+1minutes</span><br><span class="line">at&gt; ls                 # at&gt;自动生成</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">at npw+ 1minutes -f test.sh   # test.sh为一个脚本文件</span><br></pre></td></tr></table></figure>

<h2 id="batch批处理"><a href="#batch批处理" class="headerlink" title="batch批处理"></a>batch批处理</h2><p>和at差不多，在空闲的时候运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">batch</span><br><span class="line">at&gt; ls</span><br></pre></td></tr></table></figure>

<h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p><min> <h> <day of month> <month> <day of week> <commands></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">35 17 * * 5 wall &quot;Tomorrow is Saturday I will go CS&quot;</span><br><span class="line"></span><br><span class="line">-e   # 用文字编辑器来设定时程表</span><br><span class="line"></span><br><span class="line">-r   # 删除目前的时程表</span><br><span class="line"></span><br><span class="line">-l   # 列出目前的时程表</span><br><span class="line"></span><br><span class="line">,   # 1,3,4代表在1、3、4的时候都执行</span><br><span class="line"></span><br><span class="line">~   # 1~6 1到6每分钟都执行一次</span><br><span class="line"></span><br><span class="line">*&#x2F;n   # *&#x2F;3每隔3分钟执行一次</span><br></pre></td></tr></table></figure>

<h1 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h1><p>网卡参数 /etc/sysconfig/network-scripts/ifcfg-eth0</p>
<p>网络配置信息 /etc/sysconfig/network</p>
<p>DNS  /etc/resolv.conf</p>
<p>service network restart 重启网络 start开始 stop暂停 status状态</p>
<h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><p>1物理层-&gt;2数据链路层-&gt;3网络层-&gt;4传输层-&gt;5会话层-&gt;6表示层-&gt;7应用层</p>
<p>1<del>4面向数据传输，5</del>7面向用户</p>
<h2 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h2><p>1网络接口层-&gt;2网际层-&gt;3传输层-&gt;4应用层</p>
<p>传输层：传输控制协议(TCP)、用户数据协议(UDP)</p>
<p>网际互联层：网际协议(IP)、互联网组管理协议(IGMP)、互联网控制报文协议(ICMP)</p>
<h2 id="IP地址和掩码"><a href="#IP地址和掩码" class="headerlink" title="IP地址和掩码"></a>IP地址和掩码</h2><p>IP</p>
<p>组成：网络地址+主机地址</p>
<p>A 1.0.0.1~126.255.255.254</p>
<p>B 128.0.0.1~191.255.255.254</p>
<p>C 192.0.0.1~223.255.255.254</p>
<p>D 224.0.0.0~239.255.255.255</p>
<p>E 240.0.0.0~255.255.255.255</p>
<p>1个A类地址：10.0.0.0 </p>
<p>16个B类地址：172.16.0.0~172.31.0.0 </p>
<p>256个C类地址用于私用地址：192.168.0.0~192.168.255.0</p>
<p>子网掩码</p>
<p>A 255.0.0.0 8</p>
<p>B 255.255.0.0 16</p>
<p>C 255.255.255.0 24</p>
<h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>该命令常用来测试本机与远程主机的通信路径是否畅通</p>
<h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 192.168.2.2   # 指定动态ip</span><br></pre></td></tr></table></figure>

<h2 id="netstat-nr"><a href="#netstat-nr" class="headerlink" title="netstat -nr"></a>netstat -nr</h2><p>将显示路由表，其中包括目的地址、网关、掩码、标志等信息</p>
<h2 id="route"><a href="#route" class="headerlink" title="route"></a>route</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">route add –net 221.56.76.0 netmask 255.255.255.0 dev eth0</span><br><span class="line">为eth0指定路由</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>NumPy</title>
    <url>/2020/10/10/NumPy/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="ndarray对象"><a href="#ndarray对象" class="headerlink" title="ndarray对象"></a>ndarray对象</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.ndim    <span class="comment"># 秩，维度的数量</span></span><br><span class="line"></span><br><span class="line">.shape   <span class="comment"># 尺度，n行m列</span></span><br><span class="line"></span><br><span class="line">.size   <span class="comment"># n*m</span></span><br><span class="line"></span><br><span class="line">.dtype   <span class="comment"># 元素类型</span></span><br><span class="line"></span><br><span class="line">.itemsize   <span class="comment"># 元素的大小</span></span><br></pre></td></tr></table></figure>

<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arrange(n)</span><br><span class="line"></span><br><span class="line">np.ones((n,m))   <span class="comment"># np.ones((n,m),dtype = np.int)</span></span><br><span class="line"></span><br><span class="line">np.zeros((n,m))   <span class="comment"># 默认是浮点数，和.ones一样</span></span><br><span class="line"></span><br><span class="line">np.full((n,m),val)   <span class="comment"># val为填充字符</span></span><br><span class="line"></span><br><span class="line">np.eye(n)   <span class="comment"># 对角线为1，其余为0的n阶矩阵</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones_like(a)   <span class="comment"># 模拟数组a的形状</span></span><br><span class="line"></span><br><span class="line">np.zeros_like(a)</span><br><span class="line"></span><br><span class="line">np.full_like(a,val)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">0</span>,<span class="number">5</span>,<span class="number">1</span>) <span class="comment">#根据开始、结束、步数形成数组</span></span><br><span class="line"></span><br><span class="line">np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>,endpoint=<span class="literal">False</span>)   <span class="comment"># 根据开始、结束、个数形成数组</span></span><br><span class="line"></span><br><span class="line">np.concatenate((a,b))   <span class="comment"># 合并数组</span></span><br></pre></td></tr></table></figure>

<h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.reshape((n,m))   <span class="comment"># 改变原数组的形状</span></span><br><span class="line"></span><br><span class="line">a.resize((n,m))   <span class="comment"># 改变形状，原数组a发生改变</span></span><br><span class="line"></span><br><span class="line">a.flatten()   <span class="comment">#降维</span></span><br><span class="line"></span><br><span class="line">a.astype(np.int)   <span class="comment"># 改变元素类型,并创建新的数组</span></span><br><span class="line">                   <span class="comment"># 直接b=a是指向同一个地址，而b=a.astype()是新的地址</span></span><br></pre></td></tr></table></figure>

<p>ndarray数组转变成列表类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = a.tolist()</span><br></pre></td></tr></table></figure>

<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>多维数组切片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;array([1,2,3],</span><br><span class="line">        [4,5,6],</span><br><span class="line">        [7,8,9])</span><br><span class="line"></span><br><span class="line">a[:,1:2,0:1]   #5 </span><br></pre></td></tr></table></figure>

<h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.sum(a,axis=<span class="literal">None</span>)   <span class="comment"># 和</span></span><br><span class="line"></span><br><span class="line">np.mean(a,axis=<span class="literal">None</span>)   <span class="comment"># 期望</span></span><br><span class="line"></span><br><span class="line">np.average(a,axis=<span class="literal">None</span>,weight=<span class="literal">None</span>)   <span class="comment"># 加权平均值</span></span><br><span class="line"></span><br><span class="line">np.std(a,axis=<span class="literal">None</span>)   <span class="comment"># 标准差</span></span><br><span class="line"></span><br><span class="line">np.var(a,axis=<span class="literal">None</span>)   <span class="comment"># 方差</span></span><br><span class="line"></span><br><span class="line">np.min(a)   <span class="comment"># 最大值</span></span><br><span class="line"></span><br><span class="line">np.max(a)   <span class="comment">#最小值</span></span><br><span class="line"></span><br><span class="line">np.argmin(a)   <span class="comment">#转一维后的下标</span></span><br><span class="line"></span><br><span class="line">np.argmax(a)</span><br><span class="line"></span><br><span class="line">np.unravel_index(index,shape) <span class="comment">#将一维下标转换为多维下标</span></span><br><span class="line"></span><br><span class="line">np.ptp(a)   <span class="comment"># 最大值与最小值的差</span></span><br><span class="line"></span><br><span class="line">np.median(a)   <span class="comment">#计算中位数</span></span><br><span class="line"></span><br><span class="line">np.gradient(f)   <span class="comment">#计算梯度</span></span><br></pre></td></tr></table></figure>

<h1 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h1><h2 id="一、二维"><a href="#一、二维" class="headerlink" title="一、二维"></a>一、二维</h2><p>存入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.savetxt(<span class="string">&#x27;a.csv&#x27;</span>,a,fmt=<span class="string">&#x27;%.1f&#x27;</span>,delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>取出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.loadtxt(<span class="string">&#x27;a.csv&#x27;</span>,dtype=np.float,delimiter=<span class="string">&#x27;,&#x27;</span>,unpack=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h2 id="多维"><a href="#多维" class="headerlink" title="多维"></a>多维</h2><p>存入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.tofile(<span class="string">&#x27;b.dat&#x27;</span>,sep=<span class="string">&#x27;,&#x27;</span>,format=<span class="string">&#x27;%s&#x27;</span>) <span class="comment"># sep为空时以二进制存入</span></span><br></pre></td></tr></table></figure>

<p>取出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.fromfile(<span class="string">&#x27;b.dat&#x27;</span>,dtype=float,count=<span class="number">-1</span>,sep=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="便捷存取"><a href="#便捷存取" class="headerlink" title="便捷存取"></a>便捷存取</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.save(&#39;b.npy&#39;,b)</span><br><span class="line"></span><br><span class="line">np.load(&#39;b.npy&#39;)</span><br></pre></td></tr></table></figure>

<h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><h2 id="生产"><a href="#生产" class="headerlink" title="生产"></a>生产</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.rank((n,m))   <span class="comment"># [0,1)</span></span><br><span class="line"></span><br><span class="line">np,random.rankn((n,m))   <span class="comment">#正态分布</span></span><br><span class="line"></span><br><span class="line">np.random.randint(<span class="number">1</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">3</span>))  <span class="comment">#[1,10)</span></span><br><span class="line"></span><br><span class="line">np.random.seek(d)   <span class="comment">#指定一个种子，使随机数结果确定</span></span><br><span class="line"></span><br><span class="line">np.random.uniform(<span class="number">1</span>,<span class="number">10</span>,(n,m)) <span class="comment">#均匀分布</span></span><br><span class="line"></span><br><span class="line">np.random.normal(均值,标准差,(m,n))  <span class="comment">#正态分布</span></span><br><span class="line"></span><br><span class="line">np.random.poisson(发生率,(m,naxis))  <span class="comment">#泊松分布</span></span><br></pre></td></tr></table></figure>

<h2 id="改变"><a href="#改变" class="headerlink" title="改变"></a>改变</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.shuffle(a)   <span class="comment"># 对最外层随机排列，改变数组a</span></span><br><span class="line"></span><br><span class="line">np.random.permutation(a) <span class="comment">#不对a改变</span></span><br><span class="line"></span><br><span class="line">np.chioce(a,<span class="number">10</span>,replace=<span class="literal">False</span>) <span class="comment">#在a中选取10个，不可重复</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础</title>
    <url>/2020/10/10/html/</url>
    <content><![CDATA[<h3 id="标签类型"><a href="#标签类型" class="headerlink" title="标签类型"></a>标签类型</h3><a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>~<span class="tag">&lt;<span class="name">h6</span>&gt;</span>   <span class="tag">&lt;/<span class="name">h1</span>&gt;</span>~<span class="tag">&lt;/<span class="name">h6</span>&gt;</span>   标题</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>                   内容</span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span>               可以拥有空格</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>               容器</span><br></pre></td></tr></table></figure>

<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>居中<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片地址&quot;</span> <span class="attr">width</span>=<span class="string">&quot;宽度&quot;</span> <span class="attr">height</span>=<span class="string">&quot;长度&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载失败&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引入链接"><a href="#引入链接" class="headerlink" title="引入链接"></a>引入链接</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接地址&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="更改颜色"><a href="#更改颜色" class="headerlink" title="更改颜色"></a>更改颜色</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="隐藏标题"><a href="#隐藏标题" class="headerlink" title="隐藏标题"></a>隐藏标题</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.<span class="tag">&lt;<span class="name">dfn</span> <span class="attr">title</span>=<span class="string">&quot;法外狂徒 性别：男 年龄：20&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">dfn</span>&gt;</span></span><br><span class="line">2.<span class="tag">&lt;<span class="name">acronym</span> <span class="attr">title</span>=<span class="string">&quot;liuxiang&quot;</span>&gt;</span>LX<span class="tag">&lt;/<span class="name">acronym</span>&gt;</span></span><br><span class="line">3.<span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;liuxiang&quot;</span>&gt;</span>LX<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="字体类型"><a href="#字体类型" class="headerlink" title="字体类型"></a>字体类型</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:verdana;font-size:20px&quot;</span>&gt;</span>字体<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="区域跳跃"><a href="#区域跳跃" class="headerlink" title="区域跳跃"></a>区域跳跃</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="反向输出"><a href="#反向输出" class="headerlink" title="反向输出"></a>反向输出</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span>liu xiang<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="划线"><a href="#划线" class="headerlink" title="划线"></a>划线</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>中划线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.无序</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>l<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>love<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>you<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">2.有序</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;传输地址&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入框提示&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>      <span class="comment">&lt;!--required为必填--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.单选</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;传输地址&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;a&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;a-b&quot;</span> <span class="attr">checked</span>&gt;</span>a<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;b&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;a-b&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>    <span class="comment">&lt;!--checked为默认选项--&gt;</span></span><br><span class="line">2.多选</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;传输地址&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;personality&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;personality&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;personality&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加边框"><a href="#添加边框" class="headerlink" title="添加边框"></a>添加边框</h3><figure class="highlight html"><figcaption><span>css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.border</span>&#123;   </span></span><br><span class="line">        border-color: green;</span><br><span class="line">        border-width: 10px;</span><br><span class="line">        border-style: solid;</span><br><span class="line"><span class="css">        <span class="selector-tag">border-radius</span><span class="selector-pseudo">:50</span>%;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;border&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片地址&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><figure class="highlight html"><figcaption><span>css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.padding</span>&#123;<span class="attribute">padding-top</span>:<span class="number">10px</span>;<span class="attribute">padding-right</span>:<span class="number">10px</span>;<span class="attribute">padding</span>:left;<span class="attribute">padding-bottom</span>:<span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><figure class="highlight html"><figcaption><span>css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.margin</span>&#123;<span class="attribute">margin-top</span>:<span class="number">10px</span>; <span class="attribute">margin-left</span>:-<span class="number">25px</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\asus\Desktop\我滴东西\壁纸\8837127292ad473ba0301bb99d66fb7c.jpeg"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>requests爬取数据</title>
    <url>/2020/10/10/Python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h1><p>User-agent: *</p>
<p>Disallow: /</p>
<p>对于所有用户，不允许爬取任何数据</p>
<h2 id="查看方式"><a href="#查看方式" class="headerlink" title="查看方式"></a>查看方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.bilibili.com</span><br><span class="line">👇👇👇👇👇👇👇👇👇👇👇👇👇👇</span><br><span class="line">https:&#x2F;&#x2F;www.bilibili.com&#x2F;robots.txt</span><br></pre></td></tr></table></figure>

<h1 id="requests的使用"><a href="#requests的使用" class="headerlink" title="requests的使用"></a>requests的使用</h1><a id="more"></a>

<h2 id="先来一个例子看一下使用过程"><a href="#先来一个例子看一下使用过程" class="headerlink" title="先来一个例子看一下使用过程"></a>先来一个例子看一下使用过程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span>   <span class="comment">#状态码，200表明成功</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">&#x27;&lt;!DOCTYPE html&gt;\r\n&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>通过get获取web页面源代码和发送请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">page_text &#x3D; requests.get(url,params,headers)</span><br></pre></td></tr></table></figure>

<p>通过post发送请求并获取响应内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response &#x3D; requests.post(url,data,headers)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果返回json字符串,用.json()</span><br><span class="line">返回普通字符串,用.text()</span><br></pre></td></tr></table></figure>



<p>以下内容已经忘记。。。</p>
<p>主要方法，也就用到get。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.request()  <span class="comment">#构造一个请求，支撑一下各种方法</span></span><br><span class="line"></span><br><span class="line">requests.get()    <span class="comment">#获取HTML网页</span></span><br><span class="line"></span><br><span class="line">requests.head()   <span class="comment">#获取HTML网页头信息</span></span><br><span class="line"></span><br><span class="line">requests.post()   <span class="comment">#不改变原数据添加新数据</span></span><br><span class="line"></span><br><span class="line">requests.put()    <span class="comment">#覆盖原数据添加数据</span></span><br><span class="line"></span><br><span class="line">requests.patch()    <span class="comment">#局部修改请求</span></span><br><span class="line"></span><br><span class="line">requests.delete()   <span class="comment">#删除请求</span></span><br></pre></td></tr></table></figure>



<hr>
<p>可用request()来执行其他方法，也可以直接用其他requests库的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">requests.request(method,url,**kwargs)</span><br></pre></td></tr></table></figure>

<p>第一个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r &#x3D; requests.request(&#39;GET&#39;,url,**kwargs)</span><br><span class="line"></span><br><span class="line">#参数</span><br><span class="line">&#39;GET&#39;  &#39;HEAD&#39;  &#39;POST&#39;  &#39;PUT&#39;  &#39;PATCH&#39;  &#39;PUT&#39;  &#39;POST&#39;  &#39;delete&#39;  &#39;OPTIONS&#39;</span><br></pre></td></tr></table></figure>

<p>第二个参数就是网址，直接看第三个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r &#x3D; requests.request(method,url,params&#x3D;kv)</span><br><span class="line"></span><br><span class="line">#参数(其余主要方法适用)</span><br><span class="line">params:字典或字节序列，作为参数增加到返回的url中</span><br><span class="line">    </span><br><span class="line">data:字典、字节序列或文件对象，提交数据</span><br><span class="line">    </span><br><span class="line">json:JSON格式的数据，提交使用</span><br><span class="line">    </span><br><span class="line">headers:字典，HTTP定制头</span><br><span class="line">    </span><br><span class="line">cookies:字典或CookieJar,Request中的cookie</span><br><span class="line">    </span><br><span class="line">auth:元组</span><br><span class="line">    </span><br><span class="line">files:字典类型，传输文件</span><br><span class="line"></span><br><span class="line">timeout:设定超时时间，秒为单位</span><br><span class="line"></span><br><span class="line">proxies:字典类型，设定访问代理服务器，可以增加登录认证</span><br><span class="line"></span><br><span class="line">allow_redirects:重定向,默认True</span><br><span class="line"></span><br><span class="line">stream:获取内容立即下载，默认True</span><br><span class="line"></span><br><span class="line">verify:认证SSL证书开关，默认True</span><br><span class="line"></span><br><span class="line">cert:本地SSL证书路径</span><br></pre></td></tr></table></figure>



<hr>
<p>get()方法后，处理数据的一些方法，不加括号哟~~</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url,params=<span class="literal">None</span>,**kwargs)   </span><br><span class="line"><span class="comment">#get构造向服务器请求资源的Request对象</span></span><br><span class="line"><span class="comment">#requests返回包含服务器资源的Response对象</span></span><br><span class="line"></span><br><span class="line">r.status_code   <span class="comment">#Http请求的返回状态，200表示连接成功，404表示失败</span></span><br><span class="line"></span><br><span class="line">r.text    <span class="comment">#响应内容的字符串形式，url对应的页面内容</span></span><br><span class="line"></span><br><span class="line">r.encoding   <span class="comment">#在HTTP header中猜测的响应内容编码方式</span></span><br><span class="line"></span><br><span class="line">r.apparent_encoding     <span class="comment">#从内容分析出编码方式</span></span><br><span class="line"></span><br><span class="line">r.content    <span class="comment">#响应内容的二进制形式</span></span><br><span class="line"></span><br><span class="line">r.raise_for_ataus()  <span class="comment">#当状态不是200时，引起HTTPError异常</span></span><br><span class="line"></span><br><span class="line">r.header   <span class="comment">#</span></span><br></pre></td></tr></table></figure>



<hr>
<p>post()与put()方法的使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = post(url,data=<span class="literal">None</span>,json=<span class="literal">None</span>,**kwargs)</span><br><span class="line">r = put(url,data=<span class="literal">None</span>,**kwargs)</span><br><span class="line"></span><br><span class="line">payload = &#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>,data = payload)</span><br><span class="line"></span><br><span class="line">r.text</span><br></pre></td></tr></table></figure>



<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.ConnectionError <span class="comment">#网络连接错误异常</span></span><br><span class="line"></span><br><span class="line">requests.HTTPError   <span class="comment">#HTTP错误异常</span></span><br><span class="line"></span><br><span class="line">requests.URLRequired  <span class="comment">#URL缺失异常</span></span><br><span class="line"></span><br><span class="line">requests.TooManyRedirects  <span class="comment">#超过最大重定向次数，产生重定向异常</span></span><br><span class="line"></span><br><span class="line">requests.ConnectTimeout  <span class="comment">#连接远程服务器超时异常</span></span><br><span class="line"></span><br><span class="line">requests.Timeout  <span class="comment">#请求URL超时，产生超时异常</span></span><br></pre></td></tr></table></figure>

<h2 id="代码框架"><a href="#代码框架" class="headerlink" title="代码框架"></a>代码框架</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;产生异常&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text_html = requests.get(url,headers = header).text</span><br><span class="line">r1 = re.findall(<span class="string">&#x27;&lt;img src=&quot;(.*?)&quot;&#x27;</span>,text1,re.S)</span><br></pre></td></tr></table></figure>

<h2 id="bs4"><a href="#bs4" class="headerlink" title="bs4"></a>bs4</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">soup.title</span><br><span class="line"></span><br><span class="line">find()</span><br><span class="line"></span><br><span class="line">find_all()</span><br><span class="line"></span><br><span class="line">select()</span><br></pre></td></tr></table></figure>

<h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><p>实例化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地html文件</span></span><br><span class="line">e = etree.parse(filePath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络html</span></span><br><span class="line">e = etree.HTML(<span class="string">&#x27;page_text&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>e.xpath()分析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找标签</span></span><br><span class="line">r = etree1.xpath(<span class="string">&#x27;/html/body/div&#x27;</span>)</span><br><span class="line">r = etree1.xpath(<span class="string">&#x27;/html//div&#x27;</span>)</span><br><span class="line">r = etree1.xpath(<span class="string">&#x27;//div&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找id或class属性标签</span></span><br><span class="line">r = etree1.xpath(<span class="string">&#x27;//div[@id=&quot;top_left_menu&quot;]&#x27;</span>)   <span class="comment"># id可更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据索引查找标签</span></span><br><span class="line">r = etree1.xpath(<span class="string">&#x27;/html/body/div[2]&#x27;</span>)   <span class="comment">#从1开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看标签文本</span></span><br><span class="line">r = etree1.xpath(<span class="string">&#x27;//div[@id=&quot;top_right_nav&quot;]//li[3]/a/text()&#x27;</span>)</span><br><span class="line">r = etree1.xpath(<span class="string">&#x27;//div[@id=&quot;top_right_nav&quot;]//li[3]//text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看属性内容</span></span><br><span class="line">r = etree1.xpath(<span class="string">&#x27;//div[@id=&quot;top_right_nav&quot;]//li[3]/a/@href&#x27;</span>)   <span class="comment"># href可更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询多个</span></span><br><span class="line">r = etree1.xpath(<span class="string">&#x27;/html/body/div[2] | /html//li&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="UA伪装"><a href="#UA伪装" class="headerlink" title="UA伪装"></a>UA伪装</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&quot;https://www.amazon.cn/&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">503</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.encoding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line">抱歉，我们只是想确认一下当前访问者并非自动程序。为了达到最佳效果，请确保您浏览器上的 Cookie 已启用。</span><br></pre></td></tr></table></figure>

<p>不让用爬虫爬取，就只能UA伪装了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; kv = &#123;<span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0&#x27;</span>&#125;</span><br><span class="line">&gt;&gt; r = requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>,headers = kv)</span><br><span class="line">&gt;&gt; r.status_code</span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure>

<p>这样就可以让网站认为我们不是爬虫强盗，而是一个浏览器良民</p>
<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>cookie能记录登录账户的状态，在不传入cookie值的时候，一般用户处于无状态，访问页面上会回到登录界面，此时就要获取cookie。</p>
<p>cookie可以手动获取,也可以自动获取。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动获取</span></span><br><span class="line"><span class="comment"># 1、创建session会议对象</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment"># 2、获取cookie</span></span><br><span class="line">cookie = session.post(url1,headers = header,data = data)</span><br><span class="line"><span class="comment"># 3、发送请求时使用</span></span><br><span class="line">html1 = session.get(url2,headers = header)</span><br></pre></td></tr></table></figure>

<p>通过cookie爬取个人主页信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="comment"># 头和数据</span></span><br><span class="line">url1 = <span class="string">&#x27;http://www.renren.com/ajaxLogin/login?1=1&amp;uniqueTimestamp=2021241645482&#x27;</span>   <span class="comment"># 不是登录网址,是post请求网址</span></span><br><span class="line">header = &#123;<span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">data = &#123;<span class="string">&#x27;email&#x27;</span>: <span class="number">18462112993</span>,</span><br><span class="line">        <span class="string">&#x27;icode&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;origURL&#x27;</span>: <span class="string">&#x27;http://www.renren.com/home&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;renren.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;key_id&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;captcha_type&#x27;</span>: <span class="string">&#x27;web_login&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;3b59a34d3bc0f41c5586bd3e3b877f96d35c36b80aa591a7c16d77aac183c288&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rkey&#x27;</span>: <span class="string">&#x27;b1634001494bab736ead64191d98a368&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;http%3A%2F%2Fwww.renren.com%2F976410969&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 获取cookie值</span></span><br><span class="line">session = requests.Session()   <span class="comment"># 创建session会议对象</span></span><br><span class="line">cookie = session.post(url1,headers = header,data = data)   <span class="comment"># 使用session返回cookie值</span></span><br><span class="line">print(cookie.status_code)</span><br><span class="line"><span class="comment"># 爬取主页</span></span><br><span class="line">url2 = <span class="string">&#x27;http://www.renren.com/976410969/profile&#x27;</span></span><br><span class="line">html1 = session.get(url2,headers = header)   <span class="comment"># 将session替换requests直接包含cookie信息</span></span><br><span class="line">html2 = html1.content   <span class="comment"># 转二进制</span></span><br><span class="line"><span class="comment">#存储</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;./web.html&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html2)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>通过更改ip防止被封ip的反爬机制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬取的网站如果是https则使用https协议的代理服务器,http网站则对应http协议的代理服务器</span></span><br><span class="line">html1 = requests.get(url1,headers = header,proxies=&#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;120.83.101.39:9999&#x27;</span>&#125;).text</span><br></pre></td></tr></table></figure>



<p>免费的代理服务器都连不上哎，不过用梯子到也可以改变ip。</p>
<h1 id="异步爬虫"><a href="#异步爬虫" class="headerlink" title="异步爬虫"></a>异步爬虫</h1><p>采用多线程程和多进程来爬取。</p>
<h1 id="爬取搜索结果"><a href="#爬取搜索结果" class="headerlink" title="爬取搜索结果"></a>爬取搜索结果</h1><p>先附上关键词接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">百度：http:&#x2F;&#x2F;www.baidu.com&#x2F;s?wd&#x3D;keyword</span><br><span class="line">360：http:&#x2F;&#x2F;www.so.com&#x2F;s?q&#x3D;keyword</span><br></pre></td></tr></table></figure>

<p>接下来是代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv = &#123;<span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;Python&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&quot;http://www.baidu.com/s&quot;</span>,params = kv)</span><br></pre></td></tr></table></figure>

<h1 id="图片爬取"><a href="#图片爬取" class="headerlink" title="图片爬取"></a>图片爬取</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://img0.dili360.com/pic/2020/07/13/5f0bc0add82ed2q84362951.jpg&quot;</span></span><br><span class="line">path = <span class="string">&quot;D://test.jpg&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">with</span> open(path,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.content)   <span class="comment">#将r转换为二进制形式</span></span><br><span class="line">        f.close()</span><br><span class="line">        print(<span class="string">&quot;文件保存成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">&quot;爬取失败&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="例-淘宝爬取"><a href="#例-淘宝爬取" class="headerlink" title="例 淘宝爬取"></a>例 淘宝爬取</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePage</span>(<span class="params">ilt, html</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plt = re.findall(<span class="string">r&#x27;\&quot;view_price\&quot;\:\&quot;[\d\.]*\&quot;&#x27;</span>,html)</span><br><span class="line">        tlt = re.findall(<span class="string">r&#x27;\&quot;raw_title\&quot;\:\&quot;.*?\&quot;&#x27;</span>,html)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plt)):</span><br><span class="line">            price = eval(plt[i].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">            title = eval(tlt[i].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">            ilt.append([price , title])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&quot;&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printGoodsList</span>(<span class="params">ilt</span>):</span></span><br><span class="line">    tplt = <span class="string">&quot;&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;&quot;</span></span><br><span class="line">    print(tplt.format(<span class="string">&quot;序号&quot;</span>, <span class="string">&quot;价格&quot;</span>, <span class="string">&quot;商品名称&quot;</span>))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> ilt:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        print(tplt.format(count, g[<span class="number">0</span>], g[<span class="number">1</span>]))</span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    goods = <span class="string">&#x27;书包&#x27;</span></span><br><span class="line">    u=<span class="string">&#x27;https://s.taobao.com/search?q=&#x27;</span></span><br><span class="line">    depth = <span class="number">3</span></span><br><span class="line">    start_url = <span class="string">&#x27;https://s.taobao.com/search?q=&#x27;</span> + goods</span><br><span class="line">    infoList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(depth):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#url = start_url + &#x27;&amp;s=&#x27; + str(44*i)</span></span><br><span class="line">            html = getHTMLText(u)</span><br><span class="line">            print(html)</span><br><span class="line">            parsePage(infoList, html)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    printGoodsList(infoList)</span><br><span class="line">     </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib</title>
    <url>/2020/10/10/matplotlib/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>)   <span class="comment"># 分为3个横区，2个竖区，在第2,4,6区内画表</span></span><br><span class="line">plt.plot([<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>])</span><br><span class="line">plt.ylabel(<span class="string">&#x27;test1&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">plt.plot([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>],<span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;test2&#x27;</span>)</span><br><span class="line">plt.savefig(<span class="string">&#x27;test&#x27;</span>,dpi=<span class="number">1000</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">6</span>])   <span class="comment"># 设置x轴与y轴的范围</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.xlabel()</span><br><span class="line"></span><br><span class="line">plt.ylabel()</span><br><span class="line"></span><br><span class="line">plt.title()   <span class="comment"># 整体标题</span></span><br><span class="line"></span><br><span class="line">plt.text(x,y,<span class="string">&#x27;str&#x27;</span>)   <span class="comment"># 任意位置添加文本</span></span><br><span class="line"></span><br><span class="line">plt.annotate()</span><br><span class="line"><span class="comment">#plt.annotate(&#x27;123&#x27;,xy=(1,2),xytext=(2,3),arrowprops=dict(facecolor=&#x27;green&#x27;,shrink=0.2,width=2))</span></span><br><span class="line"><span class="comment">#文本，箭头位置，文本位置，箭头颜色，箭头间距，箭头宽度</span></span><br></pre></td></tr></table></figure>

<h1 id="plot"><a href="#plot" class="headerlink" title=".plot()"></a>.plot()</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tpl.plot(x,y,format_string...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 颜色 </span></span><br><span class="line"><span class="string">&#x27;b&#x27;</span> <span class="string">&#x27;g&#x27;</span> <span class="string">&#x27;r&#x27;</span> <span class="string">&#x27;c&#x27;</span>青绿 <span class="string">&#x27;m&#x27;</span>洋红 <span class="string">&#x27;y&#x27;</span> <span class="string">&#x27;k&#x27;</span> <span class="string">&#x27;w&#x27;</span> <span class="string">&#x27;0.8&#x27;</span>灰度值 <span class="string">&#x27;#008000&#x27;</span>RGB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型</span></span><br><span class="line"><span class="string">&#x27;-&#x27;</span>实线 <span class="string">&#x27;--&#x27;</span>破折线 <span class="string">&#x27;-.&#x27;</span>点画线 <span class="string">&#x27;:&#x27;</span>虚线 <span class="string">&#x27;&#x27;&#x27;&#x27;无线条</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;.&#x27;点线 &#x27;,&#x27;小点 &#x27;o&#x27;大点 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;v&#x27; &#x27;^&#x27; &#x27;&gt;&#x27; &#x27;&lt;&#x27;各种方向的三角</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">‘1’ ‘2’ ‘3’ ‘4’下上左右花三角</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">‘s’正方形 &#x27;p&#x27;五角 &#x27;*&#x27;星形</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;h&#x27;竖六边 &#x27;H&#x27;横六边 &#x27;+&#x27; &#x27;x&#x27; &#x27;D&#x27;菱形 &#x27;d&#x27;廋菱形 &#x27;|&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="中文支持"><a href="#中文支持" class="headerlink" title="中文支持"></a>中文支持</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>默认不支持中文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=<span class="string">&#x27;SimHei&#x27;</span>   <span class="comment"># 黑体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字体类型</span></span><br><span class="line"><span class="string">&#x27;SimHei&#x27;</span> <span class="string">&#x27;Kaiti&#x27;</span> <span class="string">&#x27;LiSu&#x27;</span> <span class="string">&#x27;FangSong&#x27;</span> <span class="string">&#x27;YouYuan&#x27;</span> <span class="string">&#x27;STSong&#x27;</span></span><br></pre></td></tr></table></figure>

<p>其余两个属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">font.style   <span class="comment"># 字体类型 normal正常  italic斜体</span></span><br><span class="line"></span><br><span class="line">font.size   <span class="comment"># 字体大小 字号、large、x-small</span></span><br></pre></td></tr></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>这个方法比第一个好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.xlabel(<span class="string">&#x27;横轴&#x27;</span>,fontproperties=<span class="string">&#x27;SimHei&#x27;</span>,fontsize=<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分区1</span></span><br><span class="line">plt.subplot(<span class="number">3</span>,<span class="number">2</span>,(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>))  </span><br><span class="line"><span class="comment"># 分为3个横区，2个竖区，在第2,4,6区内画表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分区2</span></span><br><span class="line">plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">0</span>),colspan=<span class="number">2</span>,rowspan=<span class="number">2</span>)</span><br><span class="line"><span class="comment">#分为3X3的区，选中第2行第1列，并扩展一列和一行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分区3</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gd</span><br><span class="line">gs = gd.GridSpe(<span class="number">3</span>,<span class="number">3</span>)   <span class="comment"># 分区</span></span><br><span class="line">a1 = plt.subplot(gs[<span class="number">1</span>,:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql基础</title>
    <url>/2020/10/10/mysql%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database pig;</span><br></pre></td></tr></table></figure>

<p>展示数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p>使用该数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use &lt;库名&gt;</span><br></pre></td></tr></table></figure>

<h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><p>展示该数据库中的所有表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<p>显示表的详情信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describe &lt;表名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table tb</span><br><span class="line">(</span><br><span class="line">  id       int         auto_increment  not null primary key,</span><br><span class="line">  </span><br><span class="line">  name     varchar(10)                 not null default 1,</span><br><span class="line">   </span><br><span class="line">  password varchar(10)                 not null,</span><br><span class="line">  </span><br><span class="line">  sex      int                         not null check(sex in [1,2])</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<h3 id="创建外键与主键"><a href="#创建外键与主键" class="headerlink" title="创建外键与主键"></a>创建外键与主键</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table test2</span><br><span class="line">(学号 char(4) not null,</span><br><span class="line"> 姓名 char(4) not null,</span><br><span class="line"> primary key(学号),</span><br><span class="line"> foreign key(学号) references test1(学号)</span><br><span class="line">  on delete restrict</span><br><span class="line">  on update cascade</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">restrict   拒绝操作</span><br><span class="line"></span><br><span class="line">cascade    级联操作</span><br><span class="line"></span><br><span class="line">no action  不执行操作</span><br><span class="line"></span><br><span class="line">set default  设为默认值</span><br><span class="line"></span><br><span class="line">set null    设为空值</span><br></pre></td></tr></table></figure>

<h3 id="check、枚举类型enum"><a href="#check、枚举类型enum" class="headerlink" title="check、枚举类型enum"></a>check、枚举类型enum</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table test</span><br><span class="line">(性别 char(1) not null check(性别 in (&#39;男&#39;,&#39;女&#39;)));</span><br><span class="line"># 好像mysql中check不起作用。。。</span><br><span class="line"></span><br><span class="line">create table test</span><br><span class="line">(性别 enum(&#39;男&#39;,&#39;女&#39;) not null);</span><br></pre></td></tr></table></figure>

<h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><p>创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table test</span><br><span class="line">(姓名 char(4) not null,</span><br><span class="line">constraint primary_key primary key(姓名));</span><br></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table test drop primary key;</span><br></pre></td></tr></table></figure>

<h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;表名&gt; add column &lt;列名&gt; &lt;类型&gt; ..     # 添加列</span><br><span class="line"></span><br><span class="line">alter table &lt;表名&gt; modify &lt;列名&gt; &lt;类型&gt; ..  # 更改列的属性</span><br><span class="line"></span><br><span class="line">alter table &lt;表名&gt; drop column &lt;列名&gt;  # 删除列</span><br><span class="line"></span><br><span class="line">alter table &lt;表名&gt; rename &lt;新表名&gt;   # 修改表名</span><br><span class="line"></span><br><span class="line">rename table test to test_name;   # 修改表名</span><br><span class="line"></span><br><span class="line">alter table &lt;表名&gt; change &lt;列名&gt; &lt;原列名&gt;  # 修改列名，但我运行失败了</span><br><span class="line"></span><br><span class="line">drop table if exists &lt;表名&gt;  # 删除表</span><br></pre></td></tr></table></figure>

<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>insert</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into &lt;表名&gt; values (&lt;&gt;,&lt;&gt;,&lt;&gt;);</span><br></pre></td></tr></table></figure>

<p>replace 与insert功能相同，不过能替代原有的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replace into &lt;表名&gt; vales (&lt;&gt;,&lt;&gt;,&lt;&gt;);</span><br></pre></td></tr></table></figure>

<h2 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update &lt;表名&gt; set &lt;改动&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from Student;</span><br></pre></td></tr></table></figure>

<p>列名更换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sname 姓名 from Student   # 将列名sname更换成&#39;姓名&#39;输出;</span><br></pre></td></tr></table></figure>

<p>between</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from Student where Sage between 10 and 20;</span><br></pre></td></tr></table></figure>

<p>in</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from Student where Sno in (1,2,3);</span><br></pre></td></tr></table></figure>

<p>%  _  /</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from Student where Sname like &#39;刘%&#39;   # %任意数量字符,_单个字符;</span><br><span class="line"></span><br><span class="line">select * from Student where Sname like &#39;刘\_,escape&#39;\&#39;;</span><br></pre></td></tr></table></figure>

<p>is</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from Student where Sname is not null;</span><br></pre></td></tr></table></figure>

<p>order by</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from Student order by Sno desc;   # desc降序,asc升序</span><br></pre></td></tr></table></figure>

<p>聚合函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from Student;   # sum,avg,max,min</span><br></pre></td></tr></table></figure>

<p>group by</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 课程号,count(学号) from xs_kc group by 课程号 having count(学号)&lt;2;</span><br></pre></td></tr></table></figure>

<p>when</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select money,</span><br><span class="line">case</span><br><span class="line">when money&lt;&#x3D;3000 then &#39;低&#39;</span><br><span class="line">when money&gt;3000 then &#39;高&#39;</span><br><span class="line">else &#39;还可以&#39;</span><br><span class="line">end as 等级</span><br><span class="line">from salary</span><br></pre></td></tr></table></figure>

<h3 id="内连接与外连接"><a href="#内连接与外连接" class="headerlink" title="内连接与外连接"></a>内连接与外连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from A inner join B on A.name&#x3D;B.name;</span><br><span class="line"></span><br><span class="line">select * from A left&#x2F;right outer join B on A.name&#x3D;B.name</span><br><span class="line"></span><br><span class="line">mysql不支持full outer join。。。</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop &lt;表名&gt;</span><br></pre></td></tr></table></figure>

<p>删除数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from &lt;表名&gt; where &lt;条件&gt;;</span><br></pre></td></tr></table></figure>

<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view avg(num,avg) as</span><br><span class="line">select 学号,avg(成绩) from xs_kc group by 学号 having avg(成绩)&gt;80 with check option;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view test as select * from xs where 专业名&#x3D;&#39;计算机&#39; with chexk option;</span><br><span class="line"></span><br><span class="line">with check option    在更新视图的时候判断是否符合where语句</span><br></pre></td></tr></table></figure>

<h2 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter view test as select 学号,姓名,总学分 from xs where 专业名&#x3D;&#39;计算机&#39;</span><br></pre></td></tr></table></figure>

<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>局部变量声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare t1 integer;</span><br></pre></td></tr></table></figure>

<p>变量赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set t1&#x3D;666;</span><br></pre></td></tr></table></figure>

<p>select…into将结果存放在variable变量里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select Sname,Sex into variable1,variable2</span><br><span class="line"> from student where Sname&#x3D;&#39;刘晨&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure save_name()</span><br><span class="line">begin</span><br><span class="line"> select * from student where name&#x3D;&#39;Li&#39;;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="if-then-else"><a href="#if-then-else" class="headerlink" title="if-then-else"></a>if-then-else</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure save_name(in k1 integer,out k2 char(6))</span><br><span class="line">begin</span><br><span class="line"> if k1&#x3D;3 then set k2&#x3D;&#39;正确&#39;;</span><br><span class="line"> elseif k1&#x3D;6 then set k2&#x3D;&#39;差不多&#39;;</span><br><span class="line"> else set k2&#x3D;&#39;错误&#39;;</span><br><span class="line"> end if;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"># 使用</span><br><span class="line">call save_name(3,@k);</span><br><span class="line">select @k 结果;</span><br></pre></td></tr></table></figure>

<h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure liudi(in liu2 integer,out liu3 char(6))</span><br><span class="line">begin</span><br><span class="line"> case liu2</span><br><span class="line">     when 1 then set liu3&#x3D;&#39;aaa&#39;;</span><br><span class="line">     when 2 then set liu3&#x3D;&#39;bbb&#39;;</span><br><span class="line">     else set liu3&#x3D;&#39;ccc&#39;;</span><br><span class="line"> end case;</span><br><span class="line">end $$</span><br><span class="line">delimiter ; </span><br><span class="line"></span><br><span class="line"># 使用</span><br><span class="line">call liudi(1,@k);</span><br><span class="line">select @k;</span><br></pre></td></tr></table></figure>

<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iterate label;   # 再次循环</span><br><span class="line"></span><br><span class="line">leave label;   # 离开循环</span><br></pre></td></tr></table></figure>

<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure while_name()</span><br><span class="line">begin</span><br><span class="line"> declare s1 int default 5;</span><br><span class="line"> while s1&gt;0 do</span><br><span class="line">   select s1;</span><br><span class="line">   set s1&#x3D;s1-1;</span><br><span class="line"> end while;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure repeat_name()</span><br><span class="line">begin</span><br><span class="line"> declare s1 int default 3;</span><br><span class="line"> repeat</span><br><span class="line">   set s1&#x3D;s1-1;</span><br><span class="line">   until s1&lt;1   # 当条件为真的时候结束</span><br><span class="line"> end repeat;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure loop_name()</span><br><span class="line">begin</span><br><span class="line"> set @a&#x3D;3;   # @a为局部变量，可以一直存在</span><br><span class="line"> label:loop   # label为标记名字，自定义</span><br><span class="line">  set @a&#x3D;@a-1;</span><br><span class="line">  select @a;</span><br><span class="line">  if @a&lt;0 then leave label;</span><br><span class="line">  end if;</span><br><span class="line"> end loop label;   # 离开label标记的函数</span><br><span class="line"> end $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>pygame</title>
    <url>/2020/10/10/pygame/</url>
    <content><![CDATA[<a id="more"></a>

<p>1设置屏幕大小</p>
<p>2设置窗口名称</p>
<p>3引入必要图片并为图片设置边框</p>
<p>4设置刷新频率并创建时钟对象</p>
<p>5while循环进行</p>
<p>​      5.1设置小球轨迹</p>
<p>​      5.2添加图片到窗口</p>
<p>​      5.3屏幕刷新</p>
<p>​      5.4屏幕刷新延迟</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame,sys</span><br><span class="line">pygame.init()   <span class="comment"># 初始化屏幕</span></span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>,<span class="number">400</span>),pygame.RESIZABLE)   <span class="comment"># 设置窗口大小</span></span><br><span class="line">pygame.display.set_caption(<span class="string">&#x27;游戏进化路&#x27;</span>)   <span class="comment"># 窗口名称</span></span><br><span class="line"><span class="comment">#pygame.display.set_icon()   # 设置图标</span></span><br><span class="line">ball = pygame.image.load(<span class="string">&#x27;3025.jpg&#x27;</span>)   <span class="comment">#引入图片</span></span><br><span class="line">ballrect = ball.get_rect()   <span class="comment"># 为图片添加边框来定义坐标</span></span><br><span class="line">fps = <span class="number">300</span>   <span class="comment"># 刷新频率</span></span><br><span class="line">fclock = pygame.time.Clock()   <span class="comment"># 创建时钟对象</span></span><br><span class="line">speed = [<span class="number">1</span>,<span class="number">1</span>]   <span class="comment"># 小球速度</span></span><br><span class="line">balck = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>   <span class="comment"># 颜色</span></span><br><span class="line">width,height = <span class="number">600</span>,<span class="number">400</span>   <span class="comment">#窗口宽度</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():   <span class="comment"># 判断事件</span></span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:   <span class="comment"># 退出</span></span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:   <span class="comment"># 移动</span></span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_UP:</span><br><span class="line">                <span class="keyword">if</span> speed[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                    speed[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">                    print(speed[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    speed[<span class="number">0</span>] -=<span class="number">1</span></span><br><span class="line">                    print([speed[<span class="number">0</span>]])</span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">                <span class="keyword">if</span> speed[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                    speed[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">                    print(speed[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    speed[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">                    print(speed[<span class="number">0</span>])</span><br><span class="line">    ballrect = ballrect.move(speed[<span class="number">0</span>],speed[<span class="number">1</span>])   <span class="comment"># 移动坐标</span></span><br><span class="line">    <span class="keyword">if</span> ballrect.left &lt; <span class="number">0</span> <span class="keyword">or</span> ballrect.right &gt; width:   <span class="comment"># 让小球反弹</span></span><br><span class="line">        speed[<span class="number">0</span>] = -speed[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> ballrect.top &lt; <span class="number">0</span> <span class="keyword">or</span> ballrect.bottom &gt; height:</span><br><span class="line">        speed[<span class="number">1</span>] = -speed[<span class="number">1</span>]</span><br><span class="line">    screen.fill(balck)   <span class="comment">#设置小球轨迹颜色</span></span><br><span class="line">    screen.blit(ball,ballrect)   <span class="comment"># 添加图像到屏幕</span></span><br><span class="line">    pygame.display.update()   <span class="comment"># 屏幕刷新</span></span><br><span class="line">    fclock.tick(fps)   <span class="comment"># 刷新频率</span></span><br></pre></td></tr></table></figure>

<h1 id="窗口设置"><a href="#窗口设置" class="headerlink" title="窗口设置"></a>窗口设置</h1><h2 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pygame.display.set_mode((w,h),flags)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flags:</span></span><br><span class="line">pygame.RESIZEBLE   窗口大小可调</span><br><span class="line">pygame.NOFRAME     无边界显示</span><br><span class="line">pygame.FULLSCREEN  全屏显示</span><br></pre></td></tr></table></figure>

<p>resizeble</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> event.type == pygame.VIDEORESIZE:   <span class="comment"># 窗口大小更改事件</span></span><br><span class="line">               size = width,height = event.w,event.h   <span class="comment"># 获取改变和的size</span></span><br><span class="line">               screen = pygame.display.set_mode(size,pygame.RESIZABLE)   <span class="comment"># 改变游戏大小</span></span><br></pre></td></tr></table></figure>

<p>fullscreen</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vinfo &#x3D; pygame.display.Info()   # 获取当窗口的大小</span><br><span class="line">size&#x3D;width,height &#x3D; vinfo.current_w,vinfo.current_h   #窗口宽度</span><br><span class="line">screen &#x3D; pygame.display.set_mode(size,pygame.FULLSCREEN)   # 设置窗口大小</span><br></pre></td></tr></table></figure>

<h2 id="图标、标题"><a href="#图标、标题" class="headerlink" title="图标、标题"></a>图标、标题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ico &#x3D; pygame.image.load(&#39;图标&#39;)</span><br><span class="line"></span><br><span class="line">pygame.display.set_icon(ico)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pygame.display.set_caption(<span class="string">&#x27;标题&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pygame.display.get_caption()   <span class="comment"># 获取标题</span></span><br></pre></td></tr></table></figure>

<h2 id="最小化暂停"><a href="#最小化暂停" class="headerlink" title="最小化暂停"></a>最小化暂停</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> pygame.display.get_active():   <span class="comment"># 如果窗口最小化，结果为False，图片暂停移动</span></span><br><span class="line">     ballrect = ballrect.move(speed[<span class="number">0</span>],speed[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><h2 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pygame.event.MOUSEMOTION   # 鼠标移动</span><br><span class="line"></span><br><span class="line">event.pos 鼠标当前坐标</span><br><span class="line"></span><br><span class="line">event.rel 鼠标相对运动距离</span><br><span class="line"></span><br><span class="line">event.buttons   鼠标三个按键,按下为1,松开为0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pygame.event.MOUSEBUTTONUP   # 鼠标释放</span><br><span class="line"></span><br><span class="line">event.pos</span><br><span class="line"></span><br><span class="line">event.button   三个键，0，1，2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pygame.event.MOUSEBUTTONDOWN   # 鼠标按下</span><br><span class="line"></span><br><span class="line">event.pos</span><br><span class="line"></span><br><span class="line">event.button   左键为1，右键为3</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>pillow</title>
    <url>/2020/10/10/pillow/</url>
    <content><![CDATA[<h1 id="颜色反转"><a href="#颜色反转" class="headerlink" title="颜色反转"></a>颜色反转</h1><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = np.array(Image.open(<span class="string">&#x27;路径&#x27;</span>))  <span class="comment"># 路径用/分割</span></span><br><span class="line">test1 = [<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>] - test</span><br><span class="line">im = Image.fromarray(test1,astype(<span class="string">&#x27;uint8&#x27;</span>))</span><br><span class="line">im.save(<span class="string">&#x27;路径&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="灰白"><a href="#灰白" class="headerlink" title="灰白"></a>灰白</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = np.array(Image.open(<span class="string">&#x27;路径&#x27;</span>).convert(<span class="string">&#x27;L&#x27;</span>))</span><br><span class="line">test1 = <span class="number">255</span>-test</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="手绘"><a href="#手绘" class="headerlink" title="手绘"></a>手绘</h1><p>看不懂。。。先弄上  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.asarray(Image.open(<span class="string">&#x27;C:/Users/Administrator/Desktop/我的文件/timg.jpg&#x27;</span>).convert(<span class="string">&#x27;L&#x27;</span>)).astype(<span class="string">&#x27;float&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">depth = <span class="number">10.</span>                      <span class="comment"># (0-100)</span></span><br><span class="line">grad = np.gradient(a)             <span class="comment">#取图像灰度的梯度值</span></span><br><span class="line">grad_x, grad_y = grad               <span class="comment">#分别取横纵图像梯度值</span></span><br><span class="line">grad_x = grad_x*depth/<span class="number">100.</span></span><br><span class="line">grad_y = grad_y*depth/<span class="number">100.</span></span><br><span class="line">A = np.sqrt(grad_x**<span class="number">2</span> + grad_y**<span class="number">2</span> + <span class="number">1.</span>)</span><br><span class="line">uni_x = grad_x/A</span><br><span class="line">uni_y = grad_y/A</span><br><span class="line">uni_z = <span class="number">1.</span>/A</span><br><span class="line"> </span><br><span class="line">vec_el = np.pi/<span class="number">2.2</span>                   <span class="comment"># 光源的俯视角度，弧度值</span></span><br><span class="line">vec_az = np.pi/<span class="number">4.</span>                    <span class="comment"># 光源的方位角度，弧度值</span></span><br><span class="line">dx = np.cos(vec_el)*np.cos(vec_az)   <span class="comment">#光源对x 轴的影响</span></span><br><span class="line">dy = np.cos(vec_el)*np.sin(vec_az)   <span class="comment">#光源对y 轴的影响</span></span><br><span class="line">dz = np.sin(vec_el)              <span class="comment">#光源对z 轴的影响</span></span><br><span class="line"> </span><br><span class="line">b = <span class="number">255</span>*(dx*uni_x + dy*uni_y + dz*uni_z)     <span class="comment">#光源归一化</span></span><br><span class="line">b = b.clip(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line"> </span><br><span class="line">im = Image.fromarray(b.astype(<span class="string">&#x27;uint8&#x27;</span>))  <span class="comment">#重构图像</span></span><br><span class="line">im.save(<span class="string">&#x27;C:/Users/Administrator/Desktop/我的文件/test2.jpg&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>菜鸡的无聊代码</title>
    <url>/2020/10/10/%E8%8F%9C%E9%B8%A1%E7%9A%84%E6%97%A0%E8%81%8A%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>又不想学习，游戏又没新玩法，闲的用刚学的知识写几行代🦓🐴🦄，欢迎尝试运行下👀</p>
<a id="more"></a>

<img src="https://c-ssl.duitang.com/uploads/item/201804/30/2018043011318_TyyUt.jpeg">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">WindowListener</span>,<span class="title">ActionListener</span>,<span class="title">MouseListener</span></span>&#123;</span><br><span class="line">JButton button1,button2;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	setVisible(<span class="keyword">true</span>);</span><br><span class="line">	 setDefaultCloseOperation(JFrame.DEFAULT_CURSOR);</span><br><span class="line">	 <span class="keyword">this</span>.addWindowListener(<span class="keyword">this</span>);</span><br><span class="line">	 </span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	setLayout(<span class="keyword">new</span> FlowLayout(FlowLayout.CENTER,<span class="number">200</span>,<span class="number">40</span>));</span><br><span class="line">	JLabel label=<span class="keyword">new</span> JLabel(<span class="string">&quot;你是憨憨吗？&quot;</span>);</span><br><span class="line">	label.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>,Font.PLAIN,<span class="number">100</span>));</span><br><span class="line">	button1=<span class="keyword">new</span> JButton(<span class="string">&quot;我是&quot;</span>);</span><br><span class="line">	button2=<span class="keyword">new</span> JButton(<span class="string">&quot;我不是&quot;</span>);</span><br><span class="line">	button1.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">	button2.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">	button2.addMouseListener(<span class="keyword">this</span>);</span><br><span class="line">	JPanel panel=<span class="keyword">new</span> JPanel();</span><br><span class="line">	JPanel panel2=<span class="keyword">new</span> JPanel();</span><br><span class="line">	panel.add(label);</span><br><span class="line">	</span><br><span class="line">	add(panel);</span><br><span class="line">    add(button1);</span><br><span class="line">    add(button2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowActivated</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosed</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=JOptionPane.showConfirmDialog(<span class="keyword">null</span>, <span class="string">&quot;你是一个憨憨吗&quot;</span>,<span class="string">&quot;询问&quot;</span>,JOptionPane.YES_NO_OPTION);</span><br><span class="line">	<span class="keyword">if</span>(a==JOptionPane.YES_OPTION)</span><br><span class="line">		System.exit(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeactivated</span><span class="params">(WindowEvent e)</span> </span>&#123;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeiconified</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowIconified</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowOpened</span><span class="params">(WindowEvent e)</span> </span>&#123;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(e.getSource().equals(button1)) &#123;</span><br><span class="line">		JOptionPane.showMessageDialog(<span class="keyword">this</span>, <span class="string">&quot;有自知之明，不错。&quot;</span>,<span class="string">&quot;恭喜&quot;</span>,JOptionPane.PLAIN_MESSAGE);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(e.getSource().equals(button2))&#123;</span><br><span class="line">		JOptionPane.showMessageDialog(<span class="keyword">this</span>, <span class="string">&quot;你竟然！！！&quot;</span>,<span class="string">&quot;可怕&quot;</span>,JOptionPane.INFORMATION_MESSAGE);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">	Component com=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">if</span>(e.getSource() <span class="keyword">instanceof</span> Component) &#123;</span><br><span class="line">		com=(Component) e.getSource();</span><br><span class="line">      <span class="keyword">int</span> a=(<span class="keyword">int</span>) (<span class="number">1</span>+Math.random()*<span class="number">800</span>);</span><br><span class="line">      <span class="keyword">int</span> b=(<span class="keyword">int</span>) (<span class="number">1</span>+Math.random()*<span class="number">800</span>);</span><br><span class="line">      com.setLocation(a,b);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent arg0)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent arg0)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent arg0)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Action win=<span class="keyword">new</span> Action();</span><br><span class="line"> win.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">960</span>, <span class="number">960</span>);</span><br><span class="line"> win.setTitle(<span class="string">&quot;真诚的问题&quot;</span>);</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型与集合框架</title>
    <url>/2020/10/10/%E6%B3%9B%E5%9E%8B%E4%B8%8E%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="1-List表-有序可重复-LinkedList链表、ArrayList"><a href="#1-List表-有序可重复-LinkedList链表、ArrayList" class="headerlink" title="1.List表(有序可重复)(LinkedList链表、ArrayList)"></a>1.List表(有序可重复)(LinkedList链表、ArrayList)</h1><a id="more"></a>

<p>常用方法：</p>
<p>void add(int index,Object element)        boolean addAll(int index,Collection c)</p>
<p>Object get(int index)                                 Object remove(int index)</p>
<p>Object set(int index,Object element)      int indexOf(Object o)</p>
<p>int lastIndex(Object o)                               List subList(int fromIndex,int toIndex)                          </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> wages;</span><br><span class="line">Man(String name,<span class="keyword">int</span> age,<span class="keyword">int</span> wages) &#123;</span><br><span class="line">	<span class="keyword">this</span>.name=name;</span><br><span class="line">	<span class="keyword">this</span>.age=age;</span><br><span class="line">	<span class="keyword">this</span>.wages=wages;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;姓名:&quot;</span>+name+<span class="string">&quot;  &quot;</span>+<span class="string">&quot;年龄:&quot;</span>+age+<span class="string">&quot;  &quot;</span>+<span class="string">&quot;工资:&quot;</span>+wages);;&#125;&#125;</span><br><span class="line"><span class="comment">/*---------------------------------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">And</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  List&lt;Man&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();  <span class="comment">//&lt;泛型&gt;</span></span><br><span class="line">  list.add(<span class="keyword">new</span> Man(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">3000</span>));</span><br><span class="line">  list.add(<span class="keyword">new</span> Man(<span class="string">&quot;李四&quot;</span>, <span class="number">25</span>, <span class="number">3500</span>));</span><br><span class="line">  list.add(<span class="keyword">new</span> Man(<span class="string">&quot;王五&quot;</span>, <span class="number">22</span>, <span class="number">3200</span>));</span><br><span class="line">  list.add(<span class="keyword">new</span> Man(<span class="string">&quot;赵六&quot;</span>, <span class="number">24</span>, <span class="number">3300</span>));</span><br><span class="line">  <span class="keyword">int</span> len=list.size();     <span class="comment">//获取长度</span></span><br><span class="line"><span class="comment">//迭代器遍历</span></span><br><span class="line">Iterator&lt;Man&gt; iterator=list.iterator();    </span><br><span class="line"> <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">	 Man man=iterator.next();</span><br><span class="line">	man.get();&#125;&#125;&#125;</span><br><span class="line"><span class="comment">//简单遍历</span></span><br><span class="line"><span class="keyword">for</span>(Man man : list) &#123;</span><br><span class="line">	 man.get();&#125;</span><br><span class="line"> &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-Stack栈"><a href="#1-Stack栈" class="headerlink" title="(1)Stack栈"></a>(1)Stack栈</h2><p>常用方法：</p>
<p>Object push(Object item)</p>
<p>Object pop()</p>
<p>boolean empty()    //判断是否为空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">And</span></span>&#123;</span><br><span class="line"> <span class="keyword">static</span> String months[]= &#123;<span class="string">&quot;January&quot;</span>,<span class="string">&quot;February&quot;</span>,<span class="string">&quot;March&quot;</span>,<span class="string">&quot;April&quot;</span>,<span class="string">&quot;May&quot;</span>,<span class="string">&quot;June&quot;</span>,<span class="string">&quot;July&quot;</span>,<span class="string">&quot;August&quot;</span>,<span class="string">&quot;September&quot;</span>,<span class="string">&quot;October&quot;</span>,<span class="string">&quot;November&quot;</span>,<span class="string">&quot;December&quot;</span>&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  Stack&lt;String&gt; stk=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;months.length;i++) </span><br><span class="line">	  stk.push(months[i]);</span><br><span class="line">	  System.out.println(stk);   <span class="comment">//输出栈内元素（正序）</span></span><br><span class="line">   <span class="keyword">while</span>(!stk.empty())</span><br><span class="line">	   System.out.println(stk.pop());&#125;&#125;   <span class="comment">//出栈（倒序）</span></span><br></pre></td></tr></table></figure>

<h2 id="2-Queue队列"><a href="#2-Queue队列" class="headerlink" title="(2)Queue队列"></a>(2)Queue队列</h2><p>常用方法1.抛出异常方法 add(e)  remove()   element()</p>
<p>​               2.返回元素方法 offer(e)  poll()  peek()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">And</span></span>&#123;</span><br><span class="line"> <span class="keyword">static</span> String months[]= &#123;<span class="string">&quot;January&quot;</span>,<span class="string">&quot;February&quot;</span>,<span class="string">&quot;March&quot;</span>,<span class="string">&quot;April&quot;</span>,<span class="string">&quot;May&quot;</span>,<span class="string">&quot;June&quot;</span>,<span class="string">&quot;July&quot;</span>,<span class="string">&quot;August&quot;</span>,<span class="string">&quot;September&quot;</span>,<span class="string">&quot;October&quot;</span>,<span class="string">&quot;November&quot;</span>,<span class="string">&quot;December&quot;</span>&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  Queue&lt;String&gt; que=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;months.length;i++)</span><br><span class="line">	  que.offer(months[i]);</span><br><span class="line">  <span class="keyword">while</span>(!que.isEmpty())</span><br><span class="line">	  System.out.println(que.poll());&#125;&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2-Set集-无序不可重复-HashSet、TreeSet树集"><a href="#2-Set集-无序不可重复-HashSet、TreeSet树集" class="headerlink" title="2.Set集(无序不可重复)(HashSet、TreeSet树集)"></a>2.Set集(无序不可重复)(HashSet、TreeSet树集)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">And</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Set&lt;String&gt; set=<span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">		set.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;banane&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">System.out.println(set.contains(<span class="string">&quot;banane&quot;</span>));  <span class="comment">//判断是否存在</span></span><br><span class="line">	System.out.println(set); &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>​       true</p>
<p>​       [apple,banane]</p>
<h1 id="3-Map映射（键-值对的集合）（HashMap散列映射、TreeMap）"><a href="#3-Map映射（键-值对的集合）（HashMap散列映射、TreeMap）" class="headerlink" title="3.Map映射（键-值对的集合）（HashMap散列映射、TreeMap）"></a>3.Map映射（键-值对的集合）（HashMap散列映射、TreeMap）</h1><p>常用方法：put(key,value)       get(key)</p>
<p>​                   entrySet(）  keySet()     values()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">And</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Map&lt;String,String&gt; map=<span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">	map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;apple&quot;</span>);</span><br><span class="line">	map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;banane&quot;</span>);</span><br><span class="line">	map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line">	System.out.println(map.get(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">	<span class="keyword">for</span>(String s:map.keySet())           <span class="comment">//根据键输出值</span></span><br><span class="line">		System.out.print(map.get(s)+<span class="string">&quot;  &quot;</span>);System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(String s:map.values())           <span class="comment">//直接输出值</span></span><br><span class="line">		System.out.print(s+<span class="string">&quot;  &quot;</span>);System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	Iterator it=map.entrySet().iterator();     <span class="comment">//迭代器遍历</span></span><br><span class="line">	<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">		Map.Entry&lt;String,String&gt; entry=(Map.Entry&lt;String, String&gt;)it.next();</span><br><span class="line">		System.out.println(entry.getKey()+<span class="string">&quot;:&quot;</span>+entry.getValue());&#125; </span><br><span class="line">	&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>​            orange</p>
<p>​            orange  banane</p>
<p>​            orange  banane</p>
<p>​            1:orange</p>
<p>​            2:banane</p>
<h1 id="4-泛型"><a href="#4-泛型" class="headerlink" title="4.泛型"></a>4.泛型</h1><p>优点：可以建立具有类型安全的数据结构，在使用泛型类建立的数据结构时，不必进行类型转换</p>
<p>泛型类： class ShowObject<E>  E为任何对象（类）或接口</p>
<p>​                 泛型变量只能调用toString方法</p>
<p>泛型类声明对象：泛型类声明和创建对象时，类名后多一对“&lt;&gt;”          </p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA登录小程序</title>
    <url>/2020/10/10/%E8%AF%A5%E6%AD%BB%E7%9A%84%E8%8B%8D%E8%9D%87%EF%BC%88%E9%99%84JAVAGUI%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%A3%E7%A0%81%EF%BC%89/</url>
    <content><![CDATA[<p>该死的苍蝇🐸。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	 init();</span><br><span class="line">	 setVisible(<span class="keyword">true</span>);</span><br><span class="line">	 setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"> JButton button,button1; </span><br><span class="line"> JTextField text1;</span><br><span class="line"> JPasswordField text2;</span><br><span class="line"> Box basebox,box1,box2; </span><br><span class="line"> Connection con;</span><br><span class="line">	String sql,s1,s2;	</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  setLayout(<span class="keyword">new</span> FlowLayout());  </span><br><span class="line">  JTextArea area=<span class="keyword">new</span> JTextArea(<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">  JPanel panel=<span class="keyword">new</span> JPanel();  </span><br><span class="line">text1=<span class="keyword">new</span> JTextField(<span class="number">10</span>);   <span class="comment">//定义事件源</span></span><br><span class="line">text2=<span class="keyword">new</span> JPasswordField(<span class="number">10</span>);</span><br><span class="line">button=<span class="keyword">new</span> JButton(<span class="string">&quot;登录&quot;</span>);</span><br><span class="line">button1=<span class="keyword">new</span> JButton(<span class="string">&quot;注册&quot;</span>);</span><br><span class="line"> text1.addActionListener(<span class="keyword">this</span>);<span class="comment">//注册监视器</span></span><br><span class="line"> text2.addActionListener(<span class="keyword">this</span>);</span><br><span class="line"> button.addActionListener(<span class="keyword">this</span>);</span><br><span class="line"> button1.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">box1=Box.createVerticalBox();    <span class="comment">//布局</span></span><br><span class="line">box1.add(<span class="keyword">new</span> JLabel(<span class="string">&quot;用户名：&quot;</span>));</span><br><span class="line">box1.add(Box.createVerticalStrut(<span class="number">8</span>));</span><br><span class="line">box1.add(<span class="keyword">new</span> JLabel(<span class="string">&quot;密码：&quot;</span>));</span><br><span class="line">box1.add(Box.createVerticalStrut(<span class="number">8</span>));</span><br><span class="line">box2=Box.createVerticalBox();</span><br><span class="line">box2.add(text1);</span><br><span class="line">box2.add(Box.createVerticalStrut(<span class="number">8</span>));</span><br><span class="line">box2.add(text2);</span><br><span class="line">box2.add(Box.createVerticalStrut(<span class="number">8</span>));</span><br><span class="line">basebox=Box.createHorizontalBox();</span><br><span class="line">basebox.add(box1);</span><br><span class="line">basebox.add(Box.createHorizontalStrut(<span class="number">10</span>));</span><br><span class="line">basebox.add(box2);</span><br><span class="line">add(basebox);</span><br><span class="line">panel.add(button);</span><br><span class="line">panel.add(button1);</span><br><span class="line">add(panel);</span><br><span class="line">add(area);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">	area.append(<span class="string">&quot;加载数据库驱动成功\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">	area.append(<span class="string">&quot;加载数据库驱动失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	con=DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/date1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;liuxiang5.&quot;</span>);</span><br><span class="line">	area.append(<span class="string">&quot;连接数据库成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">	area.append(<span class="string">&quot;连接数据库失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;   <span class="comment">//重写抽象方法</span></span><br><span class="line">	 <span class="keyword">if</span>(e.getSource()==button)</span><br><span class="line">		&#123;</span><br><span class="line">	 s1=text1.getText().trim();</span><br><span class="line">	 s2=text2.getText().trim();</span><br><span class="line">	 sql=<span class="string">&quot;select * from account where password=&#x27;&quot;</span>+s1+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>+s2+<span class="string">&quot;&#x27;&quot;</span>; </span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">	    Statement st=con.createStatement();</span><br><span class="line">		ResultSet rs=st.executeQuery(sql);</span><br><span class="line">		<span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">		JOptionPane.showMessageDialog(button, <span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">		text1.setText(<span class="keyword">null</span>);</span><br><span class="line">		text2.setText(<span class="keyword">null</span>);&#125;</span><br><span class="line">		<span class="keyword">else</span> JOptionPane.showMessageDialog(button, <span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">			JOptionPane.showMessageDialog(button, <span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">			text1.setText(<span class="keyword">null</span>);</span><br><span class="line">			text2.setText(<span class="keyword">null</span>);</span><br><span class="line">		&#125;&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(e.getSource()==button1)&#123;</span><br><span class="line">			sql=<span class="string">&quot;insert into account values(&#x27;&quot;</span>+s1+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+s2+<span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">			   <span class="keyword">try</span> &#123;</span><br><span class="line">				PreparedStatement pst;</span><br><span class="line">			    pst=con.prepareStatement(sql);</span><br><span class="line">				<span class="keyword">int</span> m=pst.executeUpdate();</span><br><span class="line">				<span class="keyword">if</span>(m&gt;<span class="number">0</span>) &#123;</span><br><span class="line">					JOptionPane.showMessageDialog(button1, <span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">					text1.setText(<span class="keyword">null</span>);</span><br><span class="line">					text2.setText(<span class="keyword">null</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">				JOptionPane.showMessageDialog(button1, <span class="string">&quot;注册失败&quot;</span>);</span><br><span class="line">				text1.setText(<span class="keyword">null</span>);</span><br><span class="line">				text2.setText(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Action win=<span class="keyword">new</span> Action();</span><br><span class="line"> win.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">310</span>, <span class="number">260</span>);</span><br><span class="line"> win.setTitle(<span class="string">&quot;登录窗口&quot;</span>);</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>高数（大一）</title>
    <url>/2020/10/10/%E9%AB%98%E6%95%B0%EF%BC%88%E5%A4%A7%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h1><a id="more"></a>

<h2 id="积分上限函数"><a href="#积分上限函数" class="headerlink" title="积分上限函数"></a>积分上限函数</h2><p>格式：                           <img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200604155702483.png"></p>
<p>积分上限函数的导数：<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200604155919036.png"></p>
<p>例题：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200604162031098.png">

<h2 id="定积分的计算"><a href="#定积分的计算" class="headerlink" title="定积分的计算"></a>定积分的计算</h2><h3 id="牛顿莱布尼茨公式（基本公式）"><a href="#牛顿莱布尼茨公式（基本公式）" class="headerlink" title="牛顿莱布尼茨公式（基本公式）"></a>牛顿莱布尼茨公式（基本公式）</h3><p><img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200610151115930.png">求导公式，arcsinx</p>
<p><img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200610151133588.png">构造法，分子-1+1</p>
<h3 id="换元法"><a href="#换元法" class="headerlink" title="换元法"></a>换元法</h3><p>三角换元</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200610152416926.png">

<p>第一类换元</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200610152303308.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200610152336136.png">

<p>第二类换元</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200610152547015.png">

<h3 id="分部积分法"><a href="#分部积分法" class="headerlink" title="分部积分法"></a>分部积分法</h3><img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200610183544866.png">

<h2 id="反常积分"><a href="#反常积分" class="headerlink" title="反常积分"></a>反常积分</h2><h3 id="无穷区间上的反常积分"><a href="#无穷区间上的反常积分" class="headerlink" title="无穷区间上的反常积分"></a>无穷区间上的反常积分</h3><p>定义：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200610183935242.png">

<p>收敛与发散<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200610184126717.png"></p>
<h3 id="无界函数的反常积分"><a href="#无界函数的反常积分" class="headerlink" title="无界函数的反常积分"></a>无界函数的反常积分</h3><p>定义：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200610184751540.png">

<p>收敛和发散：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200610184845834.png">

<h2 id="定积分的几何应用"><a href="#定积分的几何应用" class="headerlink" title="定积分的几何应用"></a>定积分的几何应用</h2><h3 id="曲线的长度"><a href="#曲线的长度" class="headerlink" title="曲线的长度"></a>曲线的长度</h3><p><img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603105038066.png">!</p>
<p>例题：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603105509556.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603105522233.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603105549179.png">

<h3 id="平面图形的面积"><a href="#平面图形的面积" class="headerlink" title="平面图形的面积"></a>平面图形的面积</h3><p>直角坐标</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611092703859.png">

<p>极坐标</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611093738678.png">

<h3 id="旋转体的体积"><a href="#旋转体的体积" class="headerlink" title="旋转体的体积"></a>旋转体的体积</h3><img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611095357094.png">

<h1 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h1><p>普通微分方程</p>
<p>定义：几阶导数就是几阶微分方程</p>
<p>例题：验证某函数是否是微分方程的解</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603090050962.png">

<h2 id="可分离变量的微分方程"><a href="#可分离变量的微分方程" class="headerlink" title="可分离变量的微分方程"></a>可分离变量的微分方程</h2><img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611100059930.png">

<h2 id="齐次方程"><a href="#齐次方程" class="headerlink" title="齐次方程"></a>齐次方程</h2><p>格式：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603091703927.png">

<p>解法：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603091929717.png">

<h2 id="一阶线性方程"><a href="#一阶线性方程" class="headerlink" title="一阶线性方程"></a>一阶线性方程</h2><p>格式：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603092139900.png">

<p>Q(x)=0为齐次方程，否则为非齐次方程</p>
<p>解法：将非齐次或为齐次，求得：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603092422938.png">

<p>原非齐次方程的通解为：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603092520338.png">

<p>伯努利方程</p>
<p>格式：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603093252193.png">

<p>解法：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603093330786.png">

<p>证明解的例题：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611100706343.png">

<h2 id="高阶微分方程"><a href="#高阶微分方程" class="headerlink" title="高阶微分方程"></a>高阶微分方程</h2><h3 id="1-自变量只有x"><a href="#1-自变量只有x" class="headerlink" title="1.自变量只有x"></a>1.自变量只有x</h3><p>直接连续积分。</p>
<h3 id="2-变量为x、y的导数"><a href="#2-变量为x、y的导数" class="headerlink" title="2.变量为x、y的导数"></a>2.变量为x、y的导数</h3><img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603095150037.png">

<h3 id="3-变量为y、y的导数"><a href="#3-变量为y、y的导数" class="headerlink" title="3.变量为y、y的导数"></a>3.变量为y、y的导数</h3><img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603095531385.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/wps1.jpg">

<h1 id="偏导数"><a href="#偏导数" class="headerlink" title="偏导数"></a>偏导数</h1><p>偏导数存在，但不一定连续</p>
<p>例子：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611101350458.png">

<p>高阶偏导数</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611101708954.png">

<h1 id="全微分"><a href="#全微分" class="headerlink" title="全微分"></a>全微分</h1><img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611143928518.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611144031204.png">

<p>全微分的近似计算</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611144347545.png">

<h1 id="多元复合函数"><a href="#多元复合函数" class="headerlink" title="多元复合函数"></a>多元复合函数</h1><p>求导法则：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611144832373.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611144956932.png">

<p>例题：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611145146906.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200611145431790.png">

<h2 id="隐函数"><a href="#隐函数" class="headerlink" title="隐函数"></a>隐函数</h2><p>一个方程</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603103058363.png">

<p>方程组</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603103736962.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200603103754833.png">

<h2 id="求极值"><a href="#求极值" class="headerlink" title="求极值"></a>求极值</h2><p>步骤</p>
<p>1.分别对x,y求导得出Fx,Fy,求出驻点</p>
<p>2.分别求A:Fxx,B:Fxy,C:Fyy。</p>
<p>3.求出AC-B²。</p>
<p>4.将驻点带入，如果&gt;0，则是极值点。</p>
<h1 id="重积分"><a href="#重积分" class="headerlink" title="重积分"></a>重积分</h1><h2 id="重积分的计算"><a href="#重积分的计算" class="headerlink" title="重积分的计算"></a>重积分的计算</h2><p>性质：</p>
<p>1.公式相加性</p>
<p>2.区域相加性</p>
<p>3.公式比较，公式大的二重积分也大</p>
<p>4.对称性</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200602170502402.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200602170515740.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200602170529074.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200602170544954.png">

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200602170557907.png">

<p>解决方法：</p>
<p>1.利用直角坐标</p>
<p>X-型区域、Y-型区域</p>
<p>例题：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200530145520862.png">

<p>2.利用极坐标</p>
<p>例题：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200530145355108.png">

<h2 id="重积分x、y型的转换"><a href="#重积分x、y型的转换" class="headerlink" title="重积分x、y型的转换"></a>重积分x、y型的转换</h2><p>（空）</p>
<h1 id="无穷级数"><a href="#无穷级数" class="headerlink" title="无穷级数"></a>无穷级数</h1><h2 id="绝对收敛和条件收敛"><a href="#绝对收敛和条件收敛" class="headerlink" title="绝对收敛和条件收敛"></a>绝对收敛和条件收敛</h2><p>绝对收敛：将通项加上绝对值后仍然收敛。</p>
<p>条件收敛：通项加绝对值不收敛，不加绝对值收敛。</p>
<h2 id="常数项级数"><a href="#常数项级数" class="headerlink" title="常数项级数"></a>常数项级数</h2><p>解决方法：</p>
<p>1.如果是两项相减，直接带入前几项求</p>
<p>2.当一般项为等比数列时，当|q|&lt;1时收敛，当|q|&gt;=1时发散</p>
<p>3.裂项法</p>
<p>4.比较审敛法:大收敛小的就收敛，小的发散大的就发散</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200530141232152.png">

<p>5.比值审敛法</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200530141440474.png">

<p>6.根植审敛法（柯西判别法）</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200530141545351.png">

<p>7.极限审敛法</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200530141759504.png">

<h2 id="交错级数"><a href="#交错级数" class="headerlink" title="交错级数"></a>交错级数</h2><p>绝对收敛：加了绝对值符号依旧收敛。</p>
<p>条件收敛：去了绝对值符号才收敛。</p>
<p>1.一般项极限为0，前一项大于后一项</p>
<h2 id="幂级数"><a href="#幂级数" class="headerlink" title="幂级数"></a>幂级数</h2><img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200530143947774.png">

<h3 id="收敛区间与收敛域的区别"><a href="#收敛区间与收敛域的区别" class="headerlink" title="收敛区间与收敛域的区别"></a>收敛区间与收敛域的区别</h3><p>收敛区间：小于收敛半径的开区间</p>
<p>收敛域：将区间的两个值带入原幂函数，判断是收敛还是发散，如果收敛则为闭区间</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础中的基础...</title>
    <url>/2020/10/10/python/</url>
    <content><![CDATA[<h1 id="例-温度转换"><a href="#例-温度转换" class="headerlink" title="例 温度转换"></a>例 温度转换</h1><a id="more"></a>

<p>字符串”123456”由第一个字符开始记序号:</p>
<p>​     0,1,2,3,4,5</p>
<p>​     -6,-5,-4,-3,-2,-1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TempStr = input(<span class="string">&quot;请输入带有符号的温度值:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> TempStr[<span class="number">-1</span>] <span class="keyword">in</span> [<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]:             <span class="comment"># -1代表字符串最后一位</span></span><br><span class="line">    C =(eval(TempStr[<span class="number">0</span>:<span class="number">-1</span>]) - <span class="number">32</span>)/<span class="number">1.8</span>    <span class="comment">#eval去除字符串最外层</span></span><br><span class="line">    print(<span class="string">&quot;转换后的温度是&#123;:.2f&#125;C&quot;</span>.format(C))</span><br><span class="line"><span class="keyword">elif</span> TempStr[<span class="number">-1</span>] <span class="keyword">in</span> [<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]:</span><br><span class="line">    F=<span class="number">1.8</span>*eval(TempStr[<span class="number">0</span>:<span class="number">-1</span>]) + <span class="number">32</span></span><br><span class="line">    print(<span class="string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.format(F))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;输入格式错误&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="数学计算"><a href="#数学计算" class="headerlink" title="数学计算"></a>数学计算</h1><h2 id="浮点数的运算"><a href="#浮点数的运算" class="headerlink" title="浮点数的运算"></a>浮点数的运算</h2><p>在计算的时候由于二进制的转换导致存在不确定尾数,可用round求值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">round(<span class="number">0.1</span>+<span class="number">0.2</span>,<span class="number">1</span>)   <span class="comment">#对计算保留1位小数</span></span><br></pre></td></tr></table></figure>

<p>浮点数的表示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">32e-2</span>  <span class="comment">#相当于0.32</span></span><br></pre></td></tr></table></figure>

<h2 id="其他一些运算函数"><a href="#其他一些运算函数" class="headerlink" title="其他一些运算函数"></a>其他一些运算函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">abs(x)  <span class="comment">#取绝对值</span></span><br><span class="line"></span><br><span class="line">divmod(<span class="number">10</span>，<span class="number">3</span>)   <span class="comment">#商余，结果为(3,1)</span></span><br><span class="line"></span><br><span class="line">pow(x,y[,z])   <span class="comment">#x**y%z,其中z可以省略</span></span><br><span class="line"></span><br><span class="line">round(x[,d])   <span class="comment">#d可省略，默认值为0</span></span><br><span class="line"></span><br><span class="line">max(x1,x2,..,xn)</span><br><span class="line"></span><br><span class="line">min(x1,x2,..,xn)</span><br><span class="line"></span><br><span class="line">int(x)    <span class="comment">#转换为整数</span></span><br><span class="line"></span><br><span class="line">float(x)  <span class="comment">#转换为浮点数</span></span><br><span class="line"></span><br><span class="line">complex(x) <span class="comment">#转换为复数，xomplex(4)==4+0j</span></span><br><span class="line"></span><br><span class="line">a**b   <span class="comment"># a的b次方</span></span><br><span class="line"></span><br><span class="line">a/b    <span class="comment"># a除以b的浮点数</span></span><br><span class="line"></span><br><span class="line">a//b   <span class="comment"># a除以b的整数</span></span><br></pre></td></tr></table></figure>

<h2 id="例-天天向上"><a href="#例-天天向上" class="headerlink" title="例 天天向上"></a>例 天天向上</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dayUP</span>(<span class="params">df</span>):</span></span><br><span class="line">    dayup=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">365</span>):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">7</span> <span class="keyword">in</span> [<span class="number">6</span>,<span class="number">0</span>]:</span><br><span class="line">            dayup = dayup*(<span class="number">1</span> - <span class="number">0.01</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dayup = dayup*(<span class="number">1</span> + df)</span><br><span class="line">    <span class="keyword">return</span> dayup</span><br><span class="line">dayfactor = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">while</span> dayUP(dayfactor) &lt; <span class="number">37.78</span>:</span><br><span class="line">    dayfactor +=<span class="number">0.001</span></span><br><span class="line">print(<span class="string">&quot;工作日的努利参数是&#123;:.3f&#125;&quot;</span>.format(dayfactor))</span><br></pre></td></tr></table></figure>

<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串的定义"><a href="#字符串的定义" class="headerlink" title="字符串的定义"></a>字符串的定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;&quot;&quot;123</span></span><br><span class="line"><span class="string">                 123&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#索引</span></span><br><span class="line">&lt;字符串&gt;[M]   <span class="comment">#第M+1个字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#切片</span></span><br><span class="line">&lt;字符串&gt;[M:N:K] </span><br><span class="line"><span class="comment">#M:开头  N:结尾  K:步长</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#逆序</span></span><br><span class="line">&lt;字符串&gt;[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#转义符\</span></span><br><span class="line"><span class="string">&quot;使用双引号\&quot;了。&quot;</span>  <span class="comment">#使用双引号&quot;了。</span></span><br><span class="line"><span class="comment">#\b回退  \n换行  \r回车(回到本行的行首)</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x + y     <span class="comment">#连接字符串</span></span><br><span class="line"></span><br><span class="line">n*x       <span class="comment">#复制字符串n次</span></span><br><span class="line"></span><br><span class="line">x <span class="keyword">in</span> s    <span class="comment">#判断x是否为s的子串，返回False与True</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(x)   <span class="comment">#返回字符串长度</span></span><br><span class="line"></span><br><span class="line">str(x)   <span class="comment">#将x转换为字符串</span></span><br><span class="line"></span><br><span class="line">hex(x) oct(x)  <span class="comment">#转换为十六进制或八进制的字符串</span></span><br><span class="line"></span><br><span class="line">chr(u)   <span class="comment">#将Unicode编码转换为对应字符</span></span><br><span class="line"></span><br><span class="line">ord(x)   <span class="comment">#将字符转换为Unicode编码</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.lower()    <span class="comment">#全小写</span></span><br><span class="line"></span><br><span class="line">str.upper()    <span class="comment">#全大写</span></span><br><span class="line"></span><br><span class="line">= str.split(s)   <span class="comment">#拆分，&quot;A,B,C&quot;.split(&quot;,&quot;)==[&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;]</span></span><br><span class="line"></span><br><span class="line">str.count(sub) <span class="comment">#返回子串sub在str中出现的次数</span></span><br><span class="line"></span><br><span class="line">str.replace(old,new)  <span class="comment">#将old替换成new</span></span><br><span class="line"></span><br><span class="line">str.center(width[,fillchar]) <span class="comment">#&quot;liu&quot;.center(9,&quot;=&quot;) == &#x27;===liu===&#x27;</span></span><br><span class="line"></span><br><span class="line">str.strip(chars) <span class="comment">#&quot;= python=&quot;.strip(&quot; =np&quot;) == &quot;ytho&quot;</span></span><br><span class="line"></span><br><span class="line">str.join(iter)  <span class="comment">#&quot;,&quot;.join(&quot;123&quot;) == &quot;1,2,3&quot;</span></span><br><span class="line"></span><br><span class="line">str.isalpha()   <span class="comment"># 判断是否是字母</span></span><br><span class="line"></span><br><span class="line">str.isdigit()   <span class="comment"># 判断是否是数字</span></span><br><span class="line"> </span><br><span class="line">str.capitalize()   <span class="comment"># 如果第一个字符是字母，将首字母大写</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串类型的格式化"><a href="#字符串类型的格式化" class="headerlink" title="字符串类型的格式化"></a>字符串类型的格式化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 槽</span></span><br><span class="line"><span class="string">&quot;&#123;&#125;是一个&#123;&#125;&quot;</span>.format(<span class="string">&quot;chenlvtang&quot;</span>,<span class="string">&quot;小天才&quot;</span>)</span><br><span class="line">  ==</span><br><span class="line"><span class="string">&quot;&#123;1&#125;是一个&#123;0&#125;&quot;</span>.format(<span class="string">&quot;小天才&quot;</span>,<span class="string">&quot;chenlvtang&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#槽内部对格式化的配置方式</span></span><br><span class="line">&#123;&lt;参数序号&gt;:&lt;格式控制标记&gt;&#125;</span><br><span class="line">: &lt;填充&gt; &lt;对齐&gt; &lt;宽度&gt; &lt;,&gt; &lt;.精度&gt; &lt;类型&gt;</span><br><span class="line">    对齐<span class="comment">#&lt;左对齐，&gt;右对齐，^居中</span></span><br><span class="line">    类型<span class="comment">#b二进制,c字符,d十进制,o八进制,x十六进制,X大写十六进制,小e科学计数法,大E科学计数法,f,%以百分式</span></span><br><span class="line"> <span class="string">&quot;0:=^9&quot;</span>.format(<span class="string">&quot;liu&quot;</span>)==<span class="string">&#x27;===liu===&#x27;</span></span><br><span class="line"> <span class="string">&quot;0:,.2f&quot;</span>.format(<span class="string">&quot;12345.6789&quot;</span>)==<span class="string">&#x27;12,345.68&#x27;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># %占位符</span></span><br><span class="line">print(<span class="string">&#x27;我的名字叫%s&#x27;</span> %<span class="string">&#x27;小飞侠&#x27;</span>)</span><br><span class="line"></span><br><span class="line">%s</span><br><span class="line"></span><br><span class="line">%d   十进制</span><br><span class="line"></span><br><span class="line">%o   八进制</span><br><span class="line"></span><br><span class="line">%X   十六进制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># f&#x27;string&#x27;</span></span><br><span class="line">meng=<span class="string">&#x27;梦&#x27;</span></span><br><span class="line">print(<span class="string">f&#x27;我的<span class="subst">&#123;meng&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_time</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner1</span>():</span></span><br><span class="line">        start1 = time.time()</span><br><span class="line">        fn()</span><br><span class="line">        end1 = time.time()</span><br><span class="line">        print(<span class="string">&#x27;代码耗时&#x27;</span>,end1 - start1)</span><br><span class="line">    <span class="keyword">return</span> inner1</span><br><span class="line"></span><br><span class="line"><span class="meta">@cal_time   # 1.调用cal_time 2.将demo传给fn 3.将inner1返回给demo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;Hellow&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;ByeBye&#x27;</span>)</span><br><span class="line"></span><br><span class="line">demo()   <span class="comment"># 此时的demo其实是inner</span></span><br></pre></td></tr></table></figure>

<p>较高级点的用法，在开放封闭原则下修改代码。</p>
<p>在不修改play_game的情况下增加对时间的判断。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_game</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner1</span>(<span class="params">name,*args,**kwargs</span>):</span></span><br><span class="line">        clock1 = kwargs.get(<span class="string">&#x27;clock1&#x27;</span>,<span class="number">23</span>)   <span class="comment"># clock1默认值为23</span></span><br><span class="line">        <span class="keyword">if</span> clock1 &gt; <span class="number">22</span> <span class="keyword">or</span> clock1 &lt; <span class="number">6</span>:</span><br><span class="line">            print(<span class="string">&#x27;不能打游戏&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fn(name)</span><br><span class="line">    <span class="keyword">return</span> inner1</span><br><span class="line"></span><br><span class="line"><span class="meta">@can_game</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play_game</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;&#123;&#125;在玩游戏&#x27;</span>.format(name))</span><br><span class="line"></span><br><span class="line">play_game(<span class="string">&#x27;李四&#x27;</span>,clock1 = <span class="number">22</span>)</span><br><span class="line">play_game(<span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>高级用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_play</span>(<span class="params">clock</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handly_action</span>(<span class="params">fn</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">do_action</span>(<span class="params">name,game</span>):</span></span><br><span class="line">            <span class="keyword">if</span> clock&lt;<span class="number">21</span>:</span><br><span class="line">                fn(name,game)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;太晚了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> do_action</span><br><span class="line">    <span class="keyword">return</span>  handly_action</span><br><span class="line"></span><br><span class="line"><span class="meta">@can_play(22)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play_game</span>(<span class="params">name,game</span>):</span></span><br><span class="line">    print(name+<span class="string">&#x27;正在玩&#x27;</span>+game)</span><br><span class="line">    </span><br><span class="line">play_game(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;warframe&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>权限例题（妙啊~）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jurisdiction = <span class="number">3</span>   <span class="comment"># 11</span></span><br><span class="line">wjurisdiction = <span class="number">4</span>   <span class="comment"># 100</span></span><br><span class="line">rjurisdiction = <span class="number">2</span>   <span class="comment"># 10</span></span><br><span class="line">ejurisdiction = <span class="number">1</span>   <span class="comment"># 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_play</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handly_action</span>(<span class="params">fn</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">do_action</span>():</span></span><br><span class="line">            <span class="keyword">if</span> x &amp; y !=<span class="number">0</span>:</span><br><span class="line">                fn()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;你没有权限&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> do_action</span><br><span class="line">    <span class="keyword">return</span> handly_action</span><br><span class="line"></span><br><span class="line"><span class="meta">@can_play(jurisdiction,rjurisdiction)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;你拥有读取权限&#x27;</span>)</span><br><span class="line"><span class="meta">@can_play(jurisdiction,wjurisdiction)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;你拥有写入权限&#x27;</span>)</span><br><span class="line"><span class="meta">@can_play(jurisdiction,ejurisdiction)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;你有执行的权限&#x27;</span>)</span><br><span class="line">read()</span><br><span class="line">write()</span><br><span class="line">execute()</span><br></pre></td></tr></table></figure>

<h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="if、else、elif"><a href="#if、else、elif" class="headerlink" title="if、else、elif"></a>if、else、elif</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#and与   or或   not非</span></span><br><span class="line">guess = eval(input())</span><br><span class="line"><span class="keyword">if</span> guess == <span class="number">520</span> <span class="keyword">or</span> guess ==<span class="number">521</span>:</span><br><span class="line">    print(<span class="string">&quot;猜对了&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> guess == <span class="number">500</span>:</span><br><span class="line">    print(<span class="string">&quot;很接近了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">&quot;猜错了&quot;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#紧凑形式  &lt;表达式1&gt; if &lt;条件&gt; else &lt;表达式2&gt;</span></span><br><span class="line">print(<span class="string">&quot;猜对了&quot;</span>) <span class="keyword">if</span> guess ==<span class="number">520</span> <span class="keyword">else</span> print(<span class="string">&quot;猜错了&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;猜&#123;&#125;了&quot;</span>.format(<span class="string">&quot;对&quot;</span> <span class="keyword">if</span> guess == <span class="number">520</span> <span class="keyword">else</span> <span class="string">&quot;错&quot;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="程序异常处理"><a href="#程序异常处理" class="headerlink" title="程序异常处理"></a>程序异常处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    abc = eval(input())</span><br><span class="line">    print(abc)</span><br><span class="line"><span class="keyword">except</span>:           <span class="comment">#except &lt;异常类型&gt;   来针对处理某类异常</span></span><br><span class="line">    print(<span class="string">&quot;程序异常&quot;</span>)</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    &lt;语句块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    &lt;语句块<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:             <span class="comment">#语句1运行的化才运行</span></span><br><span class="line">    &lt;语句块<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    &lt;语句块<span class="number">4</span>&gt;      <span class="comment">#一定运行</span></span><br></pre></td></tr></table></figure>

<p>自定义异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LengthError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;位数错误&#x27;</span></span><br><span class="line">a = input(<span class="string">&#x27;请输入6位密码:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> len(a) != <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">raise</span> LengthError   <span class="comment"># raise抛出异常</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;输入正确&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#数字</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment">#0 \n 1 \n 2 \n 3 \n</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment">#1 \n 2 \n 3 \n</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rang(<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment">#1 \n 3 \n 5 \n</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串</span></span><br><span class="line"><span class="keyword">for</span> str <span class="keyword">in</span> <span class="string">&quot;Hellow&quot;</span>:</span><br><span class="line">    print(str,end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment">#H,e,l,l,o,w,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列表</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> enumerate([<span class="number">123</span>,<span class="string">&quot;python&quot;</span>,<span class="number">456</span>]):</span><br><span class="line">    print(item,end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment">#123,python,456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fi:</span><br><span class="line">    print(line)</span><br><span class="line"><span class="comment">#遍历每一行</span></span><br></pre></td></tr></table></figure>

<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> a&gt;<span class="number">0</span>:</span><br><span class="line">    a = a<span class="number">-1</span></span><br><span class="line">    print(a)</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> gameOver(a,b):</span><br><span class="line">    <span class="keyword">if</span>(x&gt;a):</span><br><span class="line">        a++</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        b++</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameOver</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a==<span class="number">15</span> <span class="keyword">or</span> b==<span class="number">15</span></span><br></pre></td></tr></table></figure>

<h2 id="循环搭配else"><a href="#循环搭配else" class="headerlink" title="循环搭配else"></a>循环搭配else</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;python&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&quot;t&quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span>      <span class="comment">#break时，else不运行</span></span><br><span class="line">    print(c,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:                 <span class="comment">#只有当循环中执行break时，该语句才不执行</span></span><br><span class="line">    print(<span class="string">&quot;正常退出&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="例-圆周率计算"><a href="#例-圆周率计算" class="headerlink" title="例 圆周率计算"></a>例 圆周率计算</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pi = <span class="number">0</span></span><br><span class="line">N = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(N) :</span><br><span class="line">    pi += <span class="number">1</span>/pow(<span class="number">16</span>,k)*( \</span><br><span class="line">        <span class="number">4</span>/(<span class="number">8</span>*k+<span class="number">1</span>)<span class="number">-2</span>/(<span class="number">8</span>*k+<span class="number">4</span>) - \</span><br><span class="line">        <span class="number">1</span>/(<span class="number">8</span>*k+<span class="number">5</span>) - <span class="number">1</span>/(<span class="number">8</span>*k+<span class="number">6</span>))</span><br><span class="line">print(<span class="string">&quot;圆周率值是:&#123;&#125;&quot;</span>.format(pi))</span><br></pre></td></tr></table></figure>

<h1 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n,m=<span class="number">1</span></span>):</span> <span class="comment">#n为非可选参数，m为可选参数，调用时m可有可无</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        s *= i</span><br><span class="line">    <span class="keyword">return</span> s//m</span><br><span class="line"><span class="comment">#fact(10) == 10!//1  fact(10,2) == 10!//2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n,m=<span class="number">1</span></span>):</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        s *= i</span><br><span class="line">    <span class="keyword">return</span> s//m,n,m</span><br><span class="line"><span class="comment">#赋值a,b,c = fact(10,5)  == (725760,10,5)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n, *args, **kwargs</span>):</span>  <span class="comment"># b为可变参数，填几个都行</span></span><br><span class="line">    print(n,args,kwargs)</span><br><span class="line"><span class="comment">#fact(1,2,3,a=4,b=5) == 1 (2,3) &#123;&#x27;a&#x27;:4,&#x27;b&#x27;:5&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="lambda紧凑函数"><a href="#lambda紧凑函数" class="headerlink" title="lambda紧凑函数"></a>lambda紧凑函数</h1><p>少用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;函数名&gt; = <span class="keyword">lambda</span> &lt;参数&gt; : &lt;表达式&gt;  <span class="comment">#紧凑函数</span></span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> x,y : x + y</span><br><span class="line"><span class="comment"># f(1,2) == 3</span></span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> : <span class="string">&quot;Hellow&quot;</span></span><br><span class="line"><span class="comment"># print(f()) = Hellow</span></span><br></pre></td></tr></table></figure>

<p>多用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abc</span>(<span class="params">x,y,lam</span>):</span></span><br><span class="line">    a = lam(x,y)</span><br><span class="line">    print(a)</span><br><span class="line">abc(<span class="number">1</span>,<span class="number">2</span>,<span class="keyword">lambda</span> a,b:a+b)</span><br></pre></td></tr></table></figure>

<p>对含有字典的列表排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;LiMing&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;WangLei&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">10</span>&#125;</span><br><span class="line">]</span><br><span class="line">test.sort(key=<span class="keyword">lambda</span> x:x[<span class="string">&#x27;age&#x27;</span>])   <span class="comment"># 传递给key的必须是函数</span></span><br><span class="line">print(test)   <span class="comment"># [&#123;&#x27;name&#x27;: &#x27;WangLei&#x27;, &#x27;age&#x27;: 10&#125;, &#123;&#x27;name&#x27;: &#x27;LiMing&#x27;, &#x27;age&#x27;: 18&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="filter过滤"><a href="#filter过滤" class="headerlink" title="filter过滤"></a>filter过滤</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">x = filter(<span class="keyword">lambda</span> ls : ls &gt; <span class="number">3</span>,test)</span><br><span class="line"><span class="comment"># x为可迭代对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出方法1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出方法2</span></span><br><span class="line">ls1 = list(x)</span><br><span class="line">print(ls1)</span><br></pre></td></tr></table></figure>

<h2 id="map改动元素"><a href="#map改动元素" class="headerlink" title="map改动元素"></a>map改动元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">x = map(<span class="keyword">lambda</span> ls : ls + <span class="number">2</span>,test)</span><br><span class="line">print(list(x))</span><br></pre></td></tr></table></figure>

<h2 id="reduce相加"><a href="#reduce相加" class="headerlink" title="reduce相加"></a>reduce相加</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">test = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;LiMing&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;WangLei&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;MaXiao&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>&#125;</span><br><span class="line">]</span><br><span class="line">print(reduce(<span class="keyword">lambda</span> x, y: x + y[<span class="string">&#x27;age&#x27;</span>], test, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h1 id="PyInstaller打包程序"><a href="#PyInstaller打包程序" class="headerlink" title="PyInstaller打包程序"></a>PyInstaller打包程序</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#小小程序耽误我一晚，该死。</span></span><br><span class="line"><span class="comment">#需要安装pyinstaller第三方库</span></span><br><span class="line"></span><br><span class="line">-h     <span class="comment">#查看帮助</span></span><br><span class="line">--clean    <span class="comment">#清理打包过程中的临时文件</span></span><br><span class="line">-D,-onedir  <span class="comment">#默认值，生成dist文件</span></span><br><span class="line">-F,-onefile  <span class="comment">#在dist文件夹中只生成独立的打包文件</span></span><br><span class="line">-i &lt;图标文件名.ico&gt; <span class="comment">#指定打包程序使用的图标文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#小结</span></span><br><span class="line"> <span class="comment">#最好都带有-F，生成的pycache与build可删除</span></span><br><span class="line"> <span class="comment">#该程序在cmd中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line">pyinstaller -i tu.ico -F test.py</span><br></pre></td></tr></table></figure>

<h1 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>元素特征：无序、唯一、不可更改</p>
<p>表示：{1,2,3}</p>
<p>创建：{}  或 set()创建可变集合              创建空集合必须用set()</p>
<p>​           frozenset创建不可变集合</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=&#123;<span class="number">123</span>,<span class="string">&quot;abc&quot;</span>,(<span class="string">&quot;abc&quot;</span>,<span class="number">123</span>)&#125;    <span class="comment">#&#123;123,&#x27;abc&#x27;,(&#x27;abc&#x27;,123)&#125;</span></span><br><span class="line"></span><br><span class="line">B=set(<span class="string">&quot;abca&quot;</span>)     <span class="comment">#&#123;a,c,b&#125; 无序，相同只有一个</span></span><br></pre></td></tr></table></figure>

<h3 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S|T<span class="comment">#并   </span></span><br><span class="line">S&amp;T<span class="comment">#交   </span></span><br><span class="line">S-T<span class="comment">#差   </span></span><br><span class="line">S^T<span class="comment">#补</span></span><br><span class="line">S&gt;=T</span><br><span class="line">...</span><br><span class="line"><span class="comment">#增强操作符</span></span><br><span class="line">S|=T  <span class="comment">#对S进行更新</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="集合处理方法"><a href="#集合处理方法" class="headerlink" title="集合处理方法"></a>集合处理方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S.add(x)</span><br><span class="line"></span><br><span class="line">S.update(x)   <span class="comment"># 将可迭代对象x拆分放入集合</span></span><br><span class="line"></span><br><span class="line">S.discard(x)  <span class="comment">#移除，不存在，不报错</span></span><br><span class="line"></span><br><span class="line">S.remove(x)   <span class="comment">#移除，不存在，报错KeyError</span></span><br><span class="line"></span><br><span class="line">S.clear()   <span class="comment"># 清空</span></span><br><span class="line"></span><br><span class="line">S.pop()  <span class="comment">#返回第一个数并删除，更新S，为空KeyError</span></span><br><span class="line"></span><br><span class="line">S.copy()  <span class="comment">#返回S的副本</span></span><br><span class="line"></span><br><span class="line">len(S)</span><br><span class="line"></span><br><span class="line">x <span class="keyword">in</span> S  <span class="comment">#True or False</span></span><br><span class="line"></span><br><span class="line">x <span class="keyword">not</span> <span class="keyword">in</span> S</span><br><span class="line"></span><br><span class="line">set(x)  <span class="comment">#转换为集合</span></span><br></pre></td></tr></table></figure>

<h3 id="例-数据去重"><a href="#例-数据去重" class="headerlink" title="例 数据去重"></a>例 数据去重</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[<span class="string">&quot;p&quot;</span>,<span class="string">&quot;p&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">s=set(l)     <span class="comment">#&#123;&#x27;p&#x27;,&#x27;y&#x27;,1,2&#125;</span></span><br><span class="line">l=list(s)    <span class="comment">#[&#x27;p&#x27;,&#x27;y&#x27;,1,2]</span></span><br></pre></td></tr></table></figure>

<h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>元素特征：有序，不唯一，基类类型，包含字符串类型、元组类型、列表类型</p>
<p>序号规则：</p>
<p>0   1   2   3  4  5  6 </p>
<p>————————&gt;</p>
<p>&lt;———————–</p>
<p>-7 -6 -5 -4 -3 -2 -1</p>
<h3 id="序列操作符"><a href="#序列操作符" class="headerlink" title="序列操作符"></a>序列操作符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x <span class="keyword">in</span> S</span><br><span class="line"></span><br><span class="line">x <span class="keyword">not</span> <span class="keyword">in</span> S</span><br><span class="line"></span><br><span class="line">x+t</span><br><span class="line"></span><br><span class="line">n*s</span><br><span class="line"></span><br><span class="line">s[i]   <span class="comment">#索引，返回i序号的元素</span></span><br><span class="line"></span><br><span class="line">s[i:j:k]  <span class="comment">#切片</span></span><br></pre></td></tr></table></figure>

<h3 id="序列处理方法"><a href="#序列处理方法" class="headerlink" title="序列处理方法"></a>序列处理方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">len(s)</span><br><span class="line"></span><br><span class="line">min(s)</span><br><span class="line"></span><br><span class="line">max(s)</span><br><span class="line"></span><br><span class="line">s.index(x)  #返回x的位置</span><br><span class="line"></span><br><span class="line">s.index(x,i,j)  #给定范围i~j</span><br></pre></td></tr></table></figure>

<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元素特征：创建后不能修改，继承序列的全部方法</p>
<p>创建：() 或 tuple()</p>
<p>规则：元组的()可有可无</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>,<span class="number">1</span>  <span class="comment">#1,2为元组类型</span></span><br></pre></td></tr></table></figure>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>元素特征：创建后可以修改，不唯一，无长度限制</p>
<p>创建：[] 或 list()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">t=l   <span class="comment">#t与l均指向同一列表</span></span><br></pre></td></tr></table></figure>

<h3 id="列表操作符"><a href="#列表操作符" class="headerlink" title="列表操作符"></a>列表操作符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls[i]=x   <span class="comment">#替换</span></span><br><span class="line"></span><br><span class="line">ls[i:j:k]=lt</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> ls[i]    <span class="comment">#删除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> ls[i:j:k]</span><br><span class="line"></span><br><span class="line">ls += lt</span><br><span class="line"></span><br><span class="line">ls *= n</span><br></pre></td></tr></table></figure>

<h3 id="列表处理方法"><a href="#列表处理方法" class="headerlink" title="列表处理方法"></a>列表处理方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls.append(x)   <span class="comment">#ls[i].append(x)用于嵌套列表</span></span><br><span class="line"></span><br><span class="line">ls1.extend(ls2)   <span class="comment"># 连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> ls[<span class="number">0</span>]   <span class="comment">#删除ls的第一个元素</span></span><br><span class="line"></span><br><span class="line">ls.index(values)   <span class="comment"># 查询元素所在位置</span></span><br><span class="line"></span><br><span class="line">ls.clear()</span><br><span class="line"></span><br><span class="line">ls.copy()</span><br><span class="line"></span><br><span class="line">ls.insert(i,x)</span><br><span class="line"></span><br><span class="line">ls.pop(i)   <span class="comment">#默认返回并删除最后一个元素，取出第i+1个元素</span></span><br><span class="line"></span><br><span class="line">ls.remove(x)</span><br><span class="line"></span><br><span class="line">ls.reverse()   <span class="comment">#元素顺序反转，覆盖原列表</span></span><br><span class="line"></span><br><span class="line">ls.sort(key=len,reverse=<span class="literal">True</span>) <span class="comment"># 按长度降序排列，直接覆盖原列表</span></span><br><span class="line"></span><br><span class="line">sorted(list) <span class="comment"># 将列表升序排列，生成一个新列表</span></span><br></pre></td></tr></table></figure>

<h2 id="字典（映射）"><a href="#字典（映射）" class="headerlink" title="字典（映射）"></a>字典（映射）</h2><p>字典是键值对的集合，键值对之间无序</p>
<p>创建：{} 或 dict()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&lt;键<span class="number">1</span>&gt;:&lt;值<span class="number">1</span>&gt;,&lt;键<span class="number">2</span>&gt;:&lt;值<span class="number">2</span>&gt;...&#125;</span><br><span class="line"></span><br><span class="line">d = dict(<span class="number">1</span>=<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;值&gt; = &lt;字典变量&gt;[&lt;键&gt;]</span><br><span class="line"></span><br><span class="line">&lt;字典变量&gt;[&lt;键&gt;] = &lt;值&gt;    <span class="comment">#用来增加键值对</span></span><br></pre></td></tr></table></figure>

<h3 id="字典处理方法"><a href="#字典处理方法" class="headerlink" title="字典处理方法"></a>字典处理方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> d[k]</span><br><span class="line"></span><br><span class="line">k <span class="keyword">in</span> d</span><br><span class="line"></span><br><span class="line">d.keys()</span><br><span class="line"></span><br><span class="line">d.values()</span><br><span class="line"></span><br><span class="line">d.items()  <span class="comment">#返回所有</span></span><br><span class="line"></span><br><span class="line">d.get(k,&lt;default&gt;)   <span class="comment">#k不存在则返回default值</span></span><br><span class="line"></span><br><span class="line">d.pop(k,&lt;default&gt;)   <span class="comment">#取出</span></span><br><span class="line"></span><br><span class="line">d.popitem()  <span class="comment">#取出最后一个，以元组类型返回</span></span><br><span class="line"></span><br><span class="line">d1.update(d2)   <span class="comment"># 连接</span></span><br><span class="line"></span><br><span class="line">d.clear()</span><br><span class="line"></span><br><span class="line">len(d)</span><br></pre></td></tr></table></figure>

<h3 id="例-统计文本单词数量"><a href="#例-统计文本单词数量" class="headerlink" title="例 统计文本单词数量"></a>例 统计文本单词数量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getText</span>():</span></span><br><span class="line">    txt = open(<span class="string">&quot;hamlet.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    txt = txt.lower()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;|&quot;#$%&amp;*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~&#x27;</span>:</span><br><span class="line">        txt = txt.replace(ch,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> txt</span><br><span class="line"></span><br><span class="line">hamletTxt = getText()</span><br><span class="line">words = hamletTxt.split()</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    counts[word] = counts.get(word,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">items = list(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#lambda指明按key排序，reverse为从大到小</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    word,count=items[i]</span><br><span class="line">    print(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.format(word,count))</span><br></pre></td></tr></table></figure>

<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">object</span>):</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment"># __slots__ = (&#x27;name&#x27;,&#x27;sex&#x27;)   # 用来限制类的变量，只允许有元组内的变量，不允许添加</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,sex</span>):</span>   <span class="comment"># 一定要写的</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">introduce</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>是一个<span class="subst">&#123;self.sex&#125;</span>&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span>   <span class="comment"># 可以不用写，在对象被释放时自动调用</span></span><br><span class="line">        print(<span class="string">&#x27;销毁对象&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span>   <span class="comment"># 在输出对象时调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hellow&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span>   <span class="comment"># 与repr一样，当两个方法都重写时，调用str,str()时调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;good&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span>   <span class="comment"># 把对象当函数时自动调用</span></span><br><span class="line">        print(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1 = Student(<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">p2 = Student(<span class="string">&#x27;小美&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1.time = <span class="string">&#x27;孩子&#x27;</span>   <span class="comment"># 向p1对象里添加变量</span></span><br><span class="line">print(p1.time)</span><br><span class="line"></span><br><span class="line">p1.introduce()</span><br><span class="line">p2.introduce()</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> (p1,p2)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">def __eq__(self,other)   # a == b时调用</span><br><span class="line"></span><br><span class="line">def __ne__(self,other)   # a != b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__gt__</span>(<span class="params">self,other</span>)   # <span class="title">a</span> &gt; <span class="title">b</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">def __ge__(self,other)   # a &gt;= b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__lt__</span>(<span class="params">self,other</span>)   # <span class="title">a</span> &lt; <span class="title">b</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">def __le__(self,other)   # &lt;=</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self,other</span>)   # +</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">__sub__</span>(<span class="params">self,other</span>)   # -</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">__mul__</span>(<span class="params">self,other</span>)   # *</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">__truediv__</span>(<span class="params">self,other</span>)   # /</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">__pow__</span>(<span class="params">self,other</span>)   # **</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">__int__</span>(<span class="params">self</span>)   # <span class="title">int</span>()</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">__float__</span>(<span class="params">self</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">__setitem__</span>(<span class="params">self,key,value</span>):</span>   <span class="comment"># p[&#x27;name&#x27;] = &#x27;王五&#x27;</span></span><br><span class="line">    self.__dict__[key] = value</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self,item</span>):</span>   <span class="comment"># p[&#x27;name&#x27;]</span></span><br><span class="line">    <span class="keyword">return</span> self.__dict__[key]</span><br></pre></td></tr></table></figure>

<h2 id="例-房屋家具添加"><a href="#例-房屋家具添加" class="headerlink" title="例 房屋家具添加"></a>例 房屋家具添加</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#房子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">house</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,house_type,areas,furniture = None</span>):</span></span><br><span class="line">        self.house_type = house_type</span><br><span class="line">        self.areas = areas</span><br><span class="line">        self.residue_area = areas</span><br><span class="line">        self.furniture = furniture = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_furn</span>(<span class="params">self,furn</span>):</span></span><br><span class="line">        <span class="keyword">if</span> furn.areas1 &gt; self.residue_area:</span><br><span class="line">            print(<span class="string">&#x27;不能添加&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.furniture.append(furn.name)</span><br><span class="line">            self.residue_area -= furn.areas1</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">out</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.house_type,self.areas,self.residue_area,self.furniture)</span><br><span class="line"><span class="comment">#家具类     </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">furn</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,areas1</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.areas1 = areas1</span><br><span class="line"><span class="comment">#家具对象</span></span><br><span class="line">f1 = furn(<span class="string">&#x27;席梦思&#x27;</span>,<span class="number">4</span>)</span><br><span class="line">f2 = furn(<span class="string">&#x27;衣柜&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">f3 = furn(<span class="string">&#x27;餐桌&#x27;</span>,<span class="number">1.5</span>)</span><br><span class="line"><span class="comment">#房屋对象</span></span><br><span class="line">h1 = house(<span class="string">&#x27;别墅&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment">#添加活动</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    select1 = input(<span class="string">&#x27;请输入添加的物品&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> select1 == <span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        h1.add_furn(eval(select1))</span><br><span class="line">        h1.out()</span><br></pre></td></tr></table></figure>

<h2 id="类属性、对象属性"><a href="#类属性、对象属性" class="headerlink" title="类属性、对象属性"></a>类属性、对象属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">object</span>):</span></span><br><span class="line">    per = <span class="string">&#x27;human&#x27;</span>   <span class="comment"># 类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name   <span class="comment">#对象属性</span></span><br><span class="line">        self.age = age</span><br><span class="line">p1 = person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">p1.per = <span class="string">&#x27;pig&#x27;</span>   <span class="comment"># 为p1对象添加新的对象属性</span></span><br><span class="line"><span class="comment">#调用类属性</span></span><br><span class="line">person.per</span><br><span class="line">p1.per</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改类属性</span></span><br><span class="line">person.per = <span class="string">&#x27;monkey&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="私有属性、私有方法"><a href="#私有属性、私有方法" class="headerlink" title="私有属性、私有方法"></a>私有属性、私有方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">object</span>):</span></span><br><span class="line">    __p2 = <span class="string">&#x27;siren&#x27;</span>   <span class="comment"># 私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_p2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.__p2)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__test</span>(<span class="params">self</span>):</span>   <span class="comment"># 私有方法</span></span><br><span class="line">        print(<span class="string">&#x27;私有方法&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_test</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__test()</span><br><span class="line">p = person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用私有变量的两种方法</span></span><br><span class="line">print(p._person__p2)</span><br><span class="line">p.get_p2()</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用私有方法的两种方法</span></span><br><span class="line">p._person__test()</span><br><span class="line">p.get_test()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="类方法、静态方法"><a href="#类方法、静态方法" class="headerlink" title="类方法、静态方法"></a>类方法、静态方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">object</span>):</span></span><br><span class="line">    p1 = <span class="string">&#x27;hellow&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;www&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_test</span>():</span>   <span class="comment"># 没用到self的变量</span></span><br><span class="line">        print(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_test</span>(<span class="params">cls</span>):</span>   <span class="comment"># 只能用类变量</span></span><br><span class="line">        print(cls.p1)</span><br><span class="line">p = person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对象方法调用(实例方法)</span></span><br><span class="line">p.test()</span><br><span class="line"></span><br><span class="line"><span class="comment">#静态方法调用</span></span><br><span class="line">person.static_test()</span><br><span class="line">p.static_test()</span><br><span class="line"></span><br><span class="line"><span class="comment">#类方法调用</span></span><br><span class="line">person.class_test()</span><br><span class="line">p.class_test()</span><br></pre></td></tr></table></figure>

<h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">object</span>):</span></span><br><span class="line">    __frist = <span class="literal">True</span></span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span>   <span class="comment"># 为对象申请空间时调用</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance == <span class="literal">None</span>:</span><br><span class="line">            cls.__instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.__frist:</span><br><span class="line">            self.name = name</span><br><span class="line">            self.age = age</span><br><span class="line">            self.__frist = <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.name,self.age)</span><br><span class="line">        </span><br><span class="line">p = person(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">p1 = person(<span class="string">&#x27;李祥&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">p.test()</span><br></pre></td></tr></table></figure>

<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>子类不会继承父类的私有方法和属性</p>
<p>单继承#</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.name,<span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xiao_hong</span>(<span class="params">person</span>):</span>   <span class="comment"># 继承person类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span>   <span class="comment"># 在父类基础上增加属性</span></span><br><span class="line">        <span class="comment">#方法一</span></span><br><span class="line"><span class="comment">#       person.__init__(self,name,age)</span></span><br><span class="line">        <span class="comment">#方法二,推荐使用</span></span><br><span class="line">        super(xiao_hong,self).__init__(name,age)</span><br><span class="line">        self.sex = sex</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_school</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.name,<span class="string">&#x27;上学&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">p1 = xiao_hong(<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用父类的__init__、eat。</span></span><br><span class="line">p1.eat()</span><br><span class="line">p1.go_school()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是一个类或其父类的对象</span></span><br><span class="line">print(isinstance(p1, person))   <span class="comment"># True</span></span><br><span class="line">print(isinstance(xiao_hong,person))   <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>多继承</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.name,<span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xiao_hong</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go_school</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.name,<span class="string">&#x27;上学&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xiao_ming</span>(<span class="params">person,xiao_hong</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p2 = xiao_ming(<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;19&#x27;</span>)</span><br><span class="line">p2.eat()</span><br><span class="line">p2.go_school()</span><br></pre></td></tr></table></figure>

<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="文件的打开与关闭"><a href="#文件的打开与关闭" class="headerlink" title="文件的打开与关闭"></a>文件的打开与关闭</h2><p>存储状态 与 占用状态 的转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开</span></span><br><span class="line">&lt;变量名&gt; = open(&lt;文件名&gt;,&lt;打开模式&gt;,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment">#文件名</span></span><br><span class="line">在不同目录时用绝对路径</span><br><span class="line"><span class="comment">#打开模式</span></span><br><span class="line"><span class="string">&#x27;r&#x27;</span>  <span class="comment">#只读，不存在返回FileNotFoundErrpr，默认值</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;w&#x27;</span>  <span class="comment">#覆盖写,不存在就创建，存在就覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>  <span class="comment">#创建写，不存在就创建，存在返回FileExistsError</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>  <span class="comment">#追加写，不存在就创建，存在就在文件内容和继续写</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;b&#x27;</span>  <span class="comment">#二进制形式打开</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;t&#x27;</span>  <span class="comment">#文本文件形式打开，默认值</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;+&#x27;</span>  <span class="comment">#与r/w/x/a一起用，增加读写功能</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">&lt;变量名&gt;.close()</span><br></pre></td></tr></table></figure>

<h2 id="文件内容的读取"><a href="#文件内容的读取" class="headerlink" title="文件内容的读取"></a>文件内容的读取</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;f&gt;.read(x)  <span class="comment">#读取长度为x的信息，x可有可无</span></span><br><span class="line"></span><br><span class="line">&lt;f&gt;.readline()  <span class="comment">#用while一行一行输出</span></span><br><span class="line"></span><br><span class="line">&lt;f&gt;.readlines()  <span class="comment"># 将每一行放入列表中</span></span><br></pre></td></tr></table></figure>

<h2 id="文件内容的写入"><a href="#文件内容的写入" class="headerlink" title="文件内容的写入"></a>文件内容的写入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;f&gt;.write(s)</span><br><span class="line"></span><br><span class="line">&lt;f&gt;.writelines(lines) <span class="comment">#写入一个字符串列表,字符串之间紧挨</span></span><br><span class="line"></span><br><span class="line">&lt;f&gt;.seek(x)  <span class="comment">#0-文件开头,1-当前位置,2-文件结尾</span></span><br></pre></td></tr></table></figure>

<h2 id="CSV文件的写读"><a href="#CSV文件的写读" class="headerlink" title="CSV文件的写读"></a>CSV文件的写读</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="comment"># 写</span></span><br><span class="line">filew = open(<span class="string">&#x27;t2.csv&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># nexline写入时不空行</span></span><br><span class="line">w = csv.writer(filew)</span><br><span class="line">w.writerows([[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;age&#x27;</span>],[<span class="string">&#x27;lihua&#x27;</span>,<span class="string">&#x27;boy&#x27;</span>,<span class="number">19</span>],[<span class="string">&#x27;mary&#x27;</span>,<span class="string">&#x27;gril&#x27;</span>,<span class="string">&#x27;18&#x27;</span>]])</span><br><span class="line">filew.close()</span><br><span class="line"><span class="comment"># 读</span></span><br><span class="line">filer = open(<span class="string">&#x27;t2.csv&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>,newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">r = csv.reader(filer)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">    print(i)</span><br><span class="line">filer.close()</span><br></pre></td></tr></table></figure>

<h2 id="例-自动绘制"><a href="#例-自动绘制" class="headerlink" title="例 自动绘制"></a>例 自动绘制</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line">t.title(<span class="string">&#x27;自动轨迹绘制&#x27;</span>)</span><br><span class="line">t.setup(<span class="number">800</span>,<span class="number">600</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#数据读取</span></span><br><span class="line">datals = []</span><br><span class="line">f = open(<span class="string">&quot;data.txt&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    datals.append(list(map(eval,line.split(<span class="string">&quot;,&quot;</span>)))) <span class="comment">#map让eval对分节后的每个字符串使用</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#自动绘制</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(datals)):</span><br><span class="line">    t.pencolor(datals[i][<span class="number">3</span>],datals[i][<span class="number">4</span>],datals[i][<span class="number">5</span>])</span><br><span class="line">    t.fd(datals[i][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> datals[i][<span class="number">1</span>]:</span><br><span class="line">        t.right(datals[i][<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t.left(datals[i][<span class="number">2</span>])</span><br><span class="line"><span class="comment">#数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;300,0,144,1,0,0</span></span><br><span class="line"><span class="string">300,0,144,0,1,0</span></span><br><span class="line"><span class="string">300,0,144,0,0,1</span></span><br><span class="line"><span class="string">300,0,144,1,1,0</span></span><br><span class="line"><span class="string">300,0,108,0,1,1</span></span><br><span class="line"><span class="string">184,0,72,1,0,1</span></span><br><span class="line"><span class="string">184,0,72,0,0,0</span></span><br><span class="line"><span class="string">184,0,72,0,0,0</span></span><br><span class="line"><span class="string">184,0,72,0,0,0</span></span><br><span class="line"><span class="string">184,1,72,1,0,1</span></span><br><span class="line"><span class="string">184,1,72,0,0,0</span></span><br><span class="line"><span class="string">184,1,72,0,0,0</span></span><br><span class="line"><span class="string">184,1,72,0,0,0</span></span><br><span class="line"><span class="string">184,1,72,0,0,0</span></span><br><span class="line"><span class="string">184,1,720,0,0,0&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="with上下文管理器"><a href="#with上下文管理器" class="headerlink" title="with上下文管理器"></a>with上下文管理器</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;t.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.read()   <span class="comment"># with可以让文件自动关闭</span></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    print(<span class="string">&#x27;文件不存在&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>with后的对象需要实现的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__enter__</span><br><span class="line">__exit__</span><br></pre></td></tr></table></figure>

<p>自定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Updown</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;eixt&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> Updown() <span class="keyword">as</span> ud:</span><br><span class="line">    print(ud)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">enter</span><br><span class="line">&lt;__main__.Updown object at <span class="number">0x0000018FEE0A0108</span>&gt;</span><br><span class="line">eixt</span><br></pre></td></tr></table></figure>

<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.count &lt;= self.x:</span><br><span class="line">            <span class="keyword">return</span> self.count</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration   <span class="comment"># 停止迭代器</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Demo(<span class="number">10</span>):   <span class="comment"># for..in..本质:调用对象大的iter方法，获得返回值，返回值为一个对象，然后再调用对象的__next__方法</span></span><br><span class="line">    print(i,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="re正则表达式"><a href="#re正则表达式" class="headerlink" title="re正则表达式"></a>re正则表达式</h1><p>使用原生字符串表达，r’text’</p>
<p>old: ‘Hellow’</p>
<p>new: r’Hellow’</p>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.       任何单个字符</span><br><span class="line"></span><br><span class="line">[]      [a-z]a到z的范围</span><br><span class="line"></span><br><span class="line">[^ ]    非[^abc]不包括abc</span><br><span class="line"></span><br><span class="line">*        abc*表示ab、abc、abcc等，0次或无限次扩展</span><br><span class="line"></span><br><span class="line">+        前一字符1次或无限次扩展</span><br><span class="line"></span><br><span class="line">?        0次或1次扩展</span><br><span class="line"></span><br><span class="line">|        abc|def，表示abc、def</span><br><span class="line"></span><br><span class="line">&#123;m&#125;      ab&#123;2&#125;c表示abbc</span><br><span class="line"></span><br><span class="line">&#123;m,n&#125;    ab&#123;1,2&#125;c表示abc,abbc</span><br><span class="line"></span><br><span class="line">^        开头</span><br><span class="line"></span><br><span class="line">$        结尾</span><br><span class="line"></span><br><span class="line">()       分组，内部只能用|</span><br><span class="line"></span><br><span class="line">\d       数字</span><br><span class="line"></span><br><span class="line">\w       字母和数字</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[\u4e00-\u9fa5]  匹配中文字符</span><br></pre></td></tr></table></figure>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.compile(pattern,flags=<span class="number">0</span>) <span class="comment">#将字符串编译成正则表达式对象</span></span><br><span class="line"></span><br><span class="line">re.search(pattern,string,flags=<span class="number">0</span>)  <span class="comment">#找到第一个位置的match对象</span></span><br><span class="line"></span><br><span class="line">re.match(pattern,string,flags=<span class="number">0</span>)   <span class="comment">#在字符串开始位置查找，match对象</span></span><br><span class="line"></span><br><span class="line">re.findall(pattern,string,flags=<span class="number">0</span>) <span class="comment">#以列表类型返回全部子串</span></span><br><span class="line"></span><br><span class="line">re.split(pattern,string,maxsolit=<span class="number">0</span>,flags=<span class="number">0</span>)   <span class="comment">#分割后列表返回</span></span><br><span class="line"></span><br><span class="line">re.finditer(pattern,string,flags=<span class="number">0</span>)<span class="comment">#返回迭代类型，都是match对象</span></span><br><span class="line"></span><br><span class="line">re.sub(pattern,repl,string,count=<span class="number">0</span>,flags=<span class="number">0</span>)     <span class="comment">#替换后返回字符串</span></span><br></pre></td></tr></table></figure>

<h3 id="flags常用标记"><a href="#flags常用标记" class="headerlink" title="flags常用标记"></a>flags常用标记</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.I  #忽略大小写</span><br><span class="line"></span><br><span class="line">re.M  #将每行当作开始</span><br><span class="line"></span><br><span class="line">re.S  #操作符能匹配所有字符</span><br></pre></td></tr></table></figure>

<h2 id="match对象属性"><a href="#match对象属性" class="headerlink" title="match对象属性"></a>match对象属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.string   <span class="comment">#待匹配文本</span></span><br><span class="line"></span><br><span class="line">.re       <span class="comment">#匹配时的pattern对象</span></span><br><span class="line"></span><br><span class="line">.pos      <span class="comment">#开始位置</span></span><br><span class="line"></span><br><span class="line">.endpos   <span class="comment">#结束位置</span></span><br><span class="line"></span><br><span class="line">.group(<span class="number">0</span>) <span class="comment">#获取匹配后的字符串</span></span><br><span class="line"></span><br><span class="line">.start()  <span class="comment">#匹配字符的开始位置</span></span><br><span class="line"></span><br><span class="line">.end()    <span class="comment">#匹配字符的结束位置</span></span><br><span class="line"></span><br><span class="line">.span()   <span class="comment">#返回(.start(),.end())</span></span><br></pre></td></tr></table></figure>

<h2 id="贪婪匹配与最小匹配"><a href="#贪婪匹配与最小匹配" class="headerlink" title="贪婪匹配与最小匹配"></a>贪婪匹配与最小匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = re.search(<span class="string">r&#x27;PY.*N&#x27;</span>,<span class="string">&quot;PYQNPLN&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst.group()</span><br><span class="line"><span class="string">&#x27;PYQNPLN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = re.search(<span class="string">r&#x27;PY.*?N&#x27;</span>,<span class="string">&quot;PYQNPLN&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst.group()</span><br><span class="line"><span class="string">&#x27;PYQN</span></span><br></pre></td></tr></table></figure>

<p>只差一个？就是两种不同的匹配</p>
<h2 id="面向对象的用法"><a href="#面向对象的用法" class="headerlink" title="面向对象的用法"></a>面向对象的用法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">old:</span><br><span class="line">rst = re.search(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>,<span class="string">&#x27;BIT 100081&#x27;</span>)</span><br><span class="line"></span><br><span class="line">new:</span><br><span class="line">pat = re.compile(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>)</span><br><span class="line">rst = pat.search(<span class="string">&#x27;BIT 100081&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint   <span class="comment"># 导入random模板里的randint函数，调用randint方法时不用加random. 。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *   <span class="comment"># 引入math模板里的全部方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t   <span class="comment"># 为模板设置简称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint <span class="keyword">as</span> rd   <span class="comment"># 为方法设置简称</span></span><br></pre></td></tr></table></figure>

<h1 id="time时间"><a href="#time时间" class="headerlink" title="time时间"></a>time时间</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#时间获取</span></span><br><span class="line"></span><br><span class="line">time.time()    <span class="comment">#1594889513.965165</span></span><br><span class="line"></span><br><span class="line">time.ctime()   <span class="comment">#&#x27;Thu Jul 16 16:52:16 2020&#x27;</span></span><br><span class="line"></span><br><span class="line">time.gmtime()  <span class="comment">#time.struct_time(tm_year=2020, tm_mon=7, tm_mday=16, tm_hour=8, tm_min=55, tm_sec=7,                         tm_wday=3, tm_yday=198, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间格式化</span></span><br><span class="line">t = time.gmtime()</span><br><span class="line"><span class="comment"># Y年:2020     m月:7     B月:April     b月:Apr     d日:16     A星期:Wednesday     a星期:Wed     H小时(24h):12     I小时(12h):7     p上下午:PM,M分钟:26     S秒:26</span></span><br><span class="line"></span><br><span class="line">time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,t)  <span class="comment"># &#x27;2020-07-16 09:00:44&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timeStr=<span class="string">&#x27;2020-07-16 17:13:20&#x27;</span></span><br><span class="line">time.strptime(timeStr,<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>) <span class="comment">#time.struct_time(tm_year=2020, tm_mon=7, tm_mday=16, tm_hour=17,                                             tm_min=13, tm_sec=20, tm_wday=3, tm_yday=198, tm_isdst=-1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#程序计时</span></span><br><span class="line"></span><br><span class="line">time.perf_counter()  <span class="comment">#定义start与end，然后相减计算。</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3.3</span>) <span class="comment">#3.3秒后退出</span></span><br></pre></td></tr></table></figure>

<h2 id="例-文本进度条"><a href="#例-文本进度条" class="headerlink" title="例 文本进度条"></a>例 文本进度条</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scale = <span class="number">50</span></span><br><span class="line">print(<span class="string">&quot;执行开始&quot;</span>.center(scale//<span class="number">2</span>,<span class="string">&quot;-&quot;</span>))</span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(scale+<span class="number">1</span>):</span><br><span class="line">    a=<span class="string">&#x27;*&#x27;</span>*i</span><br><span class="line">    b=<span class="string">&#x27;.&#x27;</span>*(scale-i)</span><br><span class="line">    c=(i/scale)*<span class="number">100</span></span><br><span class="line">    dur = time.perf_counter() - start</span><br><span class="line">    print(<span class="string">&quot;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;</span>.format(c,a,b,dur),end=<span class="string">&quot;&quot;</span>)  <span class="comment">#end使输出后不换行，\r回到行首</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">print(<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;执行结束&quot;</span>.center(scale//<span class="number">2</span>,<span class="string">&quot;-&quot;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="例-七段数码管绘制"><a href="#例-七段数码管绘制" class="headerlink" title="例 七段数码管绘制"></a>例 七段数码管绘制</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawGap</span>():</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawLine</span>(<span class="params">draw</span>):</span></span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.pendown() <span class="keyword">if</span> draw <span class="keyword">else</span> turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    drawGap()</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDigit</span>(<span class="params">digit</span>):</span></span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">90</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    drawLine(<span class="literal">True</span>) <span class="keyword">if</span> digit <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">else</span> drawLine(<span class="literal">False</span>)</span><br><span class="line">    turtle.left(<span class="number">180</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">20</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDate</span>(<span class="params">date</span>):</span></span><br><span class="line">    turtle.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> date:</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;年&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">18</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">elif</span> i==<span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;月&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">18</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">            turtle.pencolor(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">            turtle.fd(<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">elif</span> i==<span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            turtle.write(<span class="string">&#x27;日&#x27;</span>,font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">18</span>,<span class="string">&quot;normal&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            drawDigit(eval(i))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    turtle.setup(<span class="number">800</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">-300</span>)</span><br><span class="line">    turtle.pensize(<span class="number">5</span>)</span><br><span class="line">    drawDate(time.strftime(<span class="string">&#x27;%Y-%m=%d+&#x27;</span>,time.gmtime()))</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h1 id="random随机数"><a href="#random随机数" class="headerlink" title="random随机数"></a>random随机数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基本随机函数</span></span><br><span class="line"><span class="keyword">import</span> random   <span class="comment">#伪随机数。。。。随机都是骗人的，你就是那1%的倒霉蛋</span></span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">10</span>)  <span class="comment">#产生种子10对应的序列</span></span><br><span class="line"><span class="comment">#相同种子随机数的顺序相同，默认种子是系统时间</span></span><br><span class="line"></span><br><span class="line">random.random()  <span class="comment">#产生[0.0,1.0)之间的随机小数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#扩展随机数函数</span></span><br><span class="line">random.randint(a,b)  <span class="comment">#产生[a,b]之间的一个整数，这不挺有用的吗</span></span><br><span class="line"></span><br><span class="line">random.randrange(m,n[,k])  <span class="comment">#在[m,n)之间产生以k为增长的随机整数</span></span><br><span class="line"></span><br><span class="line">random.getrandbits(k)  <span class="comment">#生成一个k比特长的随机整数</span></span><br><span class="line"></span><br><span class="line">random.uniform(a,b)   <span class="comment">#生成[a,b]之间的随机小数</span></span><br><span class="line"></span><br><span class="line">random.choice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>])  <span class="comment">#随机选取其中一个数</span></span><br><span class="line"></span><br><span class="line">random.shuffle([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) <span class="comment">#返回打乱后的序列,比如[3,2,4,1]</span></span><br></pre></td></tr></table></figure>

<h2 id="例-计算圆周率"><a href="#例-计算圆周率" class="headerlink" title="例 计算圆周率"></a>例 计算圆周率</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> perf_counter</span><br><span class="line">darts = <span class="number">1000</span>*<span class="number">1000</span></span><br><span class="line">hits = <span class="number">0.0</span></span><br><span class="line">start = perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,darts+<span class="number">1</span>):</span><br><span class="line">    x,y = random(),random()</span><br><span class="line">    dist = pow(x**<span class="number">2</span>+y**<span class="number">2</span>,<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> dist &lt;=<span class="number">1.0</span>:</span><br><span class="line">        hits = hits+<span class="number">1</span></span><br><span class="line">pi = <span class="number">4</span>*(hits/darts)</span><br><span class="line">print(<span class="string">&quot;圆周率值是:&#123;&#125;&quot;</span>.format(pi))</span><br><span class="line">print(<span class="string">&quot;运行时间是:&#123;:.5f&#125;s&quot;</span>.format(perf_counter()-start))</span><br></pre></td></tr></table></figure>

<h1 id="turtle画图"><a href="#turtle画图" class="headerlink" title="turtle画图"></a>turtle画图</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line">t.setup(w,h,x,y)     <span class="comment">#设置位置大小</span></span><br><span class="line">t.screensize(<span class="number">800</span>,<span class="number">600</span>,<span class="string">&#x27;green&#x27;</span>)   <span class="comment"># 设置画布</span></span><br><span class="line">t.speed(<span class="number">30</span>)   <span class="comment"># 设置绘制速度，[1，10]</span></span><br><span class="line">t.hideturtle()   <span class="comment"># 隐藏画笔，showturtle显示画笔</span></span><br><span class="line">t.dot(<span class="number">20</span>,<span class="string">&#x27;red&#x27;</span>)   <span class="comment"># 画一个实心原点</span></span><br><span class="line">t.fillcolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">t.begin_fill()   <span class="comment"># 开始填充</span></span><br><span class="line">t.circle(<span class="number">100</span>,<span class="number">360</span>)</span><br><span class="line">t.end_fill()   <span class="comment"># 结束填充</span></span><br><span class="line">t.penup()              </span><br><span class="line">t.pendown()        </span><br><span class="line">t.fd(<span class="number">-250</span>)                 </span><br><span class="line">t.pensize(<span class="number">25</span>)            <span class="comment">#设置笔迹的宽度</span></span><br><span class="line">t.pencolor(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">t.seth(<span class="number">90</span>)        <span class="comment">#让海龟转向90°的位置</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">1</span> <span class="keyword">in</span> rang(<span class="number">4</span>):      <span class="comment">#循环4次</span></span><br><span class="line">    t.circle(<span class="number">40</span>,<span class="number">80</span>)     <span class="comment">#40的半径绘制80°的弧线</span></span><br><span class="line">    t.circle(<span class="number">-40</span>,<span class="number">80</span>)</span><br><span class="line">t.done()     <span class="comment">#可以不会自动退出</span></span><br></pre></td></tr></table></figure>

<h2 id="例-科赫雪花（使用递归）"><a href="#例-科赫雪花（使用递归）" class="headerlink" title="例 科赫雪花（使用递归）"></a>例 科赫雪花（使用递归）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#递归要包括 基例 与 递归链条</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">koch</span>(<span class="params">size,n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:    <span class="comment">#基例</span></span><br><span class="line">        t.fd(size)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">60</span>,<span class="number">-120</span>,<span class="number">60</span>]:  <span class="comment">#递归链条</span></span><br><span class="line">            t.left(angle)</span><br><span class="line">            koch(size/<span class="number">3</span>,n<span class="number">-1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    t.setup(<span class="number">800</span>,<span class="number">400</span>)</span><br><span class="line">    t.penup()</span><br><span class="line">    t.goto(<span class="number">-300</span>,<span class="number">-50</span>)</span><br><span class="line">    t.pendown()</span><br><span class="line">    t.pensize(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        koch(<span class="number">120</span>,<span class="number">3</span>)</span><br><span class="line">        t.right(<span class="number">120</span>)</span><br><span class="line">    t.hideturtle</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h1 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure>

<p>stdin</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s_in = sys.stdin</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(str)</span><br><span class="line">    <span class="keyword">if</span> str == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>stdout</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.stdout = open(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;Hellow&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>stderr</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.stderr = open(<span class="string">&#x27;err.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">print(<span class="number">1</span>/<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h1 id="jieba中文分词"><a href="#jieba中文分词" class="headerlink" title="jieba中文分词()"></a>jieba中文分词()</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jieba.lcut(s) <span class="comment">#精确模式，无冗余</span></span><br><span class="line"><span class="comment">#中国是一个伟大的国家&gt;&gt;&#123;&#x27;中国&#x27;,&#x27;是&#x27;,&#x27;一个&#x27;,&#x27;伟大&#x27;,&#x27;的&#x27;,&#x27;国家&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">jieba.lcut(s,cut_all=<span class="literal">True</span>) <span class="comment">#全模式，有冗余</span></span><br><span class="line"><span class="comment">#中国是一个伟大的国家&gt;&gt;&#123;&#x27;中国&#x27;,&#x27;国是&#x27;,&#x27;一个&#x27;,&#x27;伟大&#x27;,&#x27;的&#x27;,&#x27;国家&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">jieba.lcut_for)serch(s) <span class="comment">#搜索引擎模式</span></span><br><span class="line"><span class="comment">#中华人民共和国&gt;&gt;&#123;&#x27;中华&#x27;,&#x27;华人&#x27;,&#x27;人民&#x27;,&#x27;共和&#x27;,&#x27;共和国&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">jieba.add_word(w)  <span class="comment">#向分词词典中增加新词w</span></span><br></pre></td></tr></table></figure>

<h1 id="wordcloud词云"><a href="#wordcloud词云" class="headerlink" title="wordcloud词云"></a>wordcloud词云</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line">步骤<span class="number">1</span></span><br><span class="line">w = wordcloud.WordCloud()</span><br><span class="line"><span class="comment">#w=wordcloud.WprdCloud(width=100) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置对象参数</span></span><br><span class="line"></span><br><span class="line">width</span><br><span class="line"></span><br><span class="line">height</span><br><span class="line"></span><br><span class="line">min_font_size</span><br><span class="line"></span><br><span class="line">max_font_size</span><br><span class="line"></span><br><span class="line">font_step  <span class="comment">#字号的步进间隔</span></span><br><span class="line"></span><br><span class="line">font_path  <span class="comment">#指定字体文件路径，微软雅黑：msyh.ttc</span></span><br><span class="line"></span><br><span class="line">max_words</span><br><span class="line"></span><br><span class="line">stop_words=&#123;<span class="string">&quot;123&quot;</span>&#125;  <span class="comment">#排除的单词</span></span><br><span class="line"></span><br><span class="line">mask</span><br><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</span><br><span class="line">mk=imread(<span class="string">&quot;pic.png&quot;</span>)</span><br><span class="line">w=wordcloud.WordCloud(mask=mk)</span><br><span class="line"></span><br><span class="line">backgorund_color</span><br><span class="line"></span><br><span class="line">步骤<span class="number">2</span></span><br><span class="line">w.generate(txt)   <span class="comment">#加载文本</span></span><br><span class="line">步骤<span class="number">3</span></span><br><span class="line">w.to_file(filename)  <span class="comment">#输出图片文件,png或jpg</span></span><br></pre></td></tr></table></figure>

<h2 id="例-文本文件生成词云"><a href="#例-文本文件生成词云" class="headerlink" title="例 文本文件生成词云"></a>例 文本文件生成词云</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread</span><br><span class="line">mask = imread(<span class="string">&quot;fivestart.png&quot;</span>)</span><br><span class="line">f = open(<span class="string">&quot;中国特色社会主义.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">t = f.read()</span><br><span class="line">f.close()</span><br><span class="line">ls = jieba.lcut(t)</span><br><span class="line">txt = <span class="string">&quot; &quot;</span>.join(ls)</span><br><span class="line">w=wordcloud.WordCloud(font_path=<span class="string">&quot;msyh.ttc&quot;</span>,background_color=<span class="string">&quot;white&quot;</span>,mask = mask)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(<span class="string">&quot;text.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="例-制作词云"><a href="#例-制作词云" class="headerlink" title="例 制作词云"></a>例 制作词云</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image   <span class="comment"># 导入图片</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt   <span class="comment"># 制表，这用来展示</span></span><br><span class="line"><span class="keyword">import</span> numpy   <span class="comment"># 用来制作像素矩阵</span></span><br><span class="line"><span class="comment"># 统计词频</span></span><br><span class="line">file = open(<span class="string">&#x27;t.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">t1 = file.read()</span><br><span class="line">file.close()</span><br><span class="line">t2 = t1.split()</span><br><span class="line">t3 = [w.lower() <span class="keyword">for</span> w <span class="keyword">in</span> t2]</span><br><span class="line">t4 = set(t3)</span><br><span class="line">d1 = &#123;d:t3.count(d) <span class="keyword">for</span> d <span class="keyword">in</span> t4&#125;</span><br><span class="line">d2 = sorted(d1.items(),key=<span class="keyword">lambda</span> asd:asd[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 制作词云图片</span></span><br><span class="line">image = Image.open(<span class="string">r&#x27;D:\我的文件\chine.png&#x27;</span>)   <span class="comment"># 导入图片</span></span><br><span class="line">mask1 = numpy.array(image)   <span class="comment"># 读成像素矩阵</span></span><br><span class="line">w = wordcloud.WordCloud(font_path=<span class="string">&#x27;msyh.ttc&#x27;</span>,background_color=<span class="string">&#x27;white&#x27;</span>,mask=mask1)   <span class="comment"># 格式图形制作</span></span><br><span class="line">w.generate_from_frequencies(d1)   <span class="comment"># 加载文本，d1为字典型</span></span><br><span class="line">w.to_file(<span class="string">r&#x27;D:\我的文件\1.jpg&#x27;</span>)   <span class="comment"># 输出图片</span></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">plt.imshow(w)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h1 id="json字符串"><a href="#json字符串" class="headerlink" title="json字符串"></a>json字符串</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">test = &#123;<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">x = json.dumps(test)   <span class="comment"># 转换为json字符串</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x == &#x27;&#123;&quot;1&quot;:&quot;a&quot;,&quot;2&quot;:&quot;b&quot;,&quot;3&quot;:&quot;c&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">x1 = json.loads(x)   <span class="comment"># 转换为原来的类型</span></span><br><span class="line">print(x1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x1 == &#123;&#x27;1&#x27;:&#x27;a&#x27;,&#x27;2&#x27;:&#x27;b&#x27;,&#x27;3&#x27;:&#x27;c&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="os操作系统"><a href="#os操作系统" class="headerlink" title="os操作系统"></a>os操作系统</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&quot;命令&quot;</span>)</span><br><span class="line"></span><br><span class="line">os.cpu_dount()</span><br><span class="line"></span><br><span class="line">os.getlogin()</span><br><span class="line"></span><br><span class="line">os.getpid()   <span class="comment"># 获得进程的pid</span></span><br><span class="line"></span><br><span class="line">os.name()   <span class="comment"># windows == nt,非windows == posix</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.isdir(<span class="string">&#x27;test&#x27;</span>)   <span class="comment"># 判断是否是目录</span></span><br><span class="line"></span><br><span class="line">os.path.isfile(<span class="string">&#x27;test&#x27;</span>)   <span class="comment"># 是否为文件</span></span><br><span class="line"></span><br><span class="line">os.path.exists(<span class="string">&#x27;test&#x27;</span>)   <span class="comment"># 是否存在</span></span><br><span class="line"></span><br><span class="line">os.path.splitext(<span class="string">&#x27;test.py&#x27;</span>)   <span class="comment"># (&#x27;test&#x27;,&#x27;.&#x27;,&#x27;py&#x27;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.getcwd()   <span class="comment"># 获取当前工作路径</span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;test&#x27;</span>)   <span class="comment"># 相当于cd</span></span><br><span class="line"></span><br><span class="line">os.rename(<span class="string">&#x27;old_name&#x27;</span>,<span class="string">&#x27;new_name&#x27;</span>)   <span class="comment"># 文件改名</span></span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">&#x27;test.txt&#x27;</span>)   <span class="comment"># 删除文件</span></span><br><span class="line"></span><br><span class="line">os.rmdir(<span class="string">&#x27;test&#x27;</span>)   <span class="comment"># 删除空文件夹</span></span><br><span class="line"></span><br><span class="line">os.removedirs(<span class="string">&#x27;test&#x27;</span>) <span class="comment">#删除空文件夹</span></span><br><span class="line"></span><br><span class="line">os.mkdir(<span class="string">&#x27;demo&#x27;</span>)   <span class="comment"># 创建文件夹</span></span><br><span class="line"></span><br><span class="line">os.environ   <span class="comment"># 获取环境配置</span></span><br><span class="line"></span><br><span class="line">os.environ.get(<span class="string">&#x27;PATH&#x27;</span>)   <span class="comment"># 获取指定环境配置</span></span><br></pre></td></tr></table></figure>

<h1 id="hashlib加密"><a href="#hashlib加密" class="headerlink" title="hashlib加密"></a>hashlib加密</h1><p>md5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">x = hashlib.md5()   <span class="comment"># 生产md5的对象</span></span><br><span class="line">x.update(<span class="string">&#x27;password&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="comment">#x = hashlib.md5(&#x27;passwd&#x27;.encode(&#x27;utf8&#x27;))</span></span><br><span class="line"></span><br><span class="line">print(x.hexdigest)   <span class="comment"># 以十六进制的方式输出</span></span><br></pre></td></tr></table></figure>

<p>sha 后面数字表长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = hashlib.sha224(<span class="string">&#x27;pw&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line">sha   <span class="comment"># 1,224,256,384</span></span><br></pre></td></tr></table></figure>

<h1 id="第三方库的安装"><a href="#第三方库的安装" class="headerlink" title="第三方库的安装"></a>第三方库的安装</h1><p>pip install &lt;&gt;     安装</p>
<p>pip install -U &lt;&gt;     更新</p>
<p>pip uninstall &lt;&gt;      卸载</p>
<p>pip download &lt;&gt;  下载不安装</p>
<p>pip show &lt;&gt;    查看详情信息</p>
<p>pip search &lt;&gt;    搜索</p>
<p>pip list  &lt;&gt;  将安装的列举出来</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/image-20200803165429996.png">

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>图形用户界面设计</title>
    <url>/2020/10/10/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="1-窗口-JFrame"><a href="#1-窗口-JFrame" class="headerlink" title="1.窗口(JFrame)"></a>1.窗口(JFrame)</h1><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> javax.swing.JFrame.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	JFrame window1=<span class="keyword">new</span> JFrame(<span class="string">&quot;我的世界&quot;</span>);        <span class="comment">//创建</span></span><br><span class="line">    JFrame window2=<span class="keyword">new</span> JFrame(<span class="string">&quot;星际战甲&quot;</span>);</span><br><span class="line">    window1.setBounds(<span class="number">60</span>, <span class="number">100</span>, <span class="number">1588</span>, <span class="number">980</span>);      <span class="comment">//调整（前部分为位置x,y，后面为大小w,h）</span></span><br><span class="line">    window2.setBounds(<span class="number">260</span>, <span class="number">100</span>, <span class="number">588</span>, <span class="number">308</span>);</span><br><span class="line">    window1.setVisible(<span class="keyword">true</span>);              <span class="comment">//是否显示窗口</span></span><br><span class="line">    window1.setDefaultCloseOperation(EXIT_ON_CLOSE);   <span class="comment">//点击关闭图标时的处理</span></span><br><span class="line">    window2.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    window2.setDefaultCloseOperation(DISPOSE_ON_CLOSE);</span><br><span class="line">  	&#125;&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2-菜单条-JMenubar-、菜单-JMenu-、菜单项-JMenuItem"><a href="#2-菜单条-JMenubar-、菜单-JMenu-、菜单项-JMenuItem" class="headerlink" title="2.菜单条(JMenubar)、菜单(JMenu)、菜单项(JMenuItem)"></a>2.菜单条(JMenubar)、菜单(JMenu)、菜单项(JMenuItem)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.InputEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> javax.swing.JFrame.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowMenu</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">WindowMenu</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">WindowMenu</span><span class="params">(String s,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w,<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">	init(s);</span><br><span class="line">	setLocation(x, y);</span><br><span class="line">	setSize(w, h);</span><br><span class="line">	setVisible(<span class="keyword">true</span>);</span><br><span class="line">	setDefaultCloseOperation(DISPOSE_ON_CLOSE);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">	  setTitle(s);</span><br><span class="line">	  JMenuBar menubar =<span class="keyword">new</span> JMenuBar();  <span class="comment">//建立菜单条</span></span><br><span class="line">	  JMenu menu=<span class="keyword">new</span> JMenu(<span class="string">&quot;菜单&quot;</span>);       <span class="comment">//建立菜单</span></span><br><span class="line">	  JMenu submenu=<span class="keyword">new</span> JMenu(<span class="string">&quot;软件项目&quot;</span>); </span><br><span class="line">	  JMenuItem item1=<span class="keyword">new</span> JMenuItem(<span class="string">&quot;JAVA话题&quot;</span>,<span class="keyword">new</span> ImageIcon(<span class="string">&quot;a.gif&quot;</span>));</span><br><span class="line">	  JMenuItem item2=<span class="keyword">new</span> JMenuItem(<span class="string">&quot;动画话题&quot;</span>,<span class="keyword">new</span> ImageIcon(<span class="string">&quot;b.gif&quot;</span>));</span><br><span class="line">	  menu.add(item1);</span><br><span class="line">	  menu.addSeparator();</span><br><span class="line">	  menu.add(item2);</span><br><span class="line">	  menu.add(submenu);</span><br><span class="line">	  submenu.add(<span class="keyword">new</span> JMenuItem(<span class="string">&quot;汽车销售系统&quot;</span>,<span class="keyword">new</span> ImageIcon(<span class="string">&quot;c.gif&quot;</span>)));</span><br><span class="line">	  submenu.add(<span class="keyword">new</span> JMenuItem(<span class="string">&quot;农场信息系统&quot;</span>,<span class="keyword">new</span> ImageIcon(<span class="string">&quot;d.gif&quot;</span>)));</span><br><span class="line">	  menubar.add(menu);</span><br><span class="line">	  setJMenuBar(menubar);</span><br><span class="line">  &#125;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">WindowMenu win=<span class="keyword">new</span> WindowMenu(<span class="string">&quot;我的世界&quot;</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">1200</span>,<span class="number">900</span>); 	&#125;&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/tu.png">

<h1 id="3-常用组件与布局"><a href="#3-常用组件与布局" class="headerlink" title="3.常用组件与布局"></a>3.常用组件与布局</h1><p>组件：</p>
<p>1.文本框(JTextField）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   setLayout(<span class="keyword">new</span> FlowLayout();  </span><br><span class="line">add(<span class="keyword">new</span> JLabel(<span class="string">&quot;文本框&quot;</span>));    </span><br><span class="line">JTextField  text=<span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">add(text);&#125;</span><br></pre></td></tr></table></figure>

<p>2.文本区(JTexArea)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(<span class="keyword">new</span> JLabel(<span class="string">&quot;文本区&quot;</span>));</span><br><span class="line">JTextArea texts=<span class="keyword">new</span> JTextArea(<span class="number">6</span>,<span class="number">12</span>);</span><br><span class="line">add(<span class="keyword">new</span> JScrollPane(texts));  <span class="comment">//滚动窗格</span></span><br></pre></td></tr></table></figure>

<p>3.按钮(JButton)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(<span class="keyword">new</span> JLabel(<span class="string">&quot;按钮:&quot;</span>));</span><br><span class="line">JButton button=<span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">add(button);</span><br></pre></td></tr></table></figure>

<p>4.标签(JLabel)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(<span class="keyword">new</span> JLabel(<span class="string">&quot;名称&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>5.选择框(JCheckBox)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(<span class="keyword">new</span> JLabel(<span class="string">&quot;选择框&quot;</span>));</span><br><span class="line">  JCheckBox check1=<span class="keyword">new</span> JCheckBox(<span class="string">&quot;篮球&quot;</span>);</span><br><span class="line">  JCheckBox check2=<span class="keyword">new</span> JCheckBox(<span class="string">&quot;足球&quot;</span>);</span><br><span class="line">  JCheckBox check3=<span class="keyword">new</span> JCheckBox(<span class="string">&quot;乒乓球&quot;</span>);</span><br><span class="line">  add(check1);</span><br><span class="line">  add(check2);</span><br><span class="line">  add(check3);</span><br></pre></td></tr></table></figure>

<p>6.单选按钮(JRadioButton)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(<span class="keyword">new</span> JLabel(<span class="string">&quot;单选按钮&quot;</span>));</span><br><span class="line">	  ButtonGroup group=<span class="keyword">new</span> ButtonGroup();</span><br><span class="line">	  JRadioButton radio1=<span class="keyword">new</span> JRadioButton(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">	  JRadioButton radio2=<span class="keyword">new</span> JRadioButton(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">	  group.add(radio1);</span><br><span class="line">	  group.add(radio2);</span><br><span class="line">	  add(radio1);</span><br><span class="line">	  add(radio2);</span><br></pre></td></tr></table></figure>

<p>7.下拉列表(JComboBox)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(<span class="keyword">new</span> JLabel(<span class="string">&quot;下拉列表&quot;</span>));</span><br><span class="line">  JComboBox combox=<span class="keyword">new</span> JComboBox();</span><br><span class="line">  combox.addItem(<span class="string">&quot;星际战甲&quot;</span>);</span><br><span class="line">  combox.addItem(<span class="string">&quot;英雄联盟&quot;</span>);</span><br><span class="line">  combox.addItem(<span class="string">&quot;我的世界&quot;</span>);</span><br><span class="line">  add(combox);</span><br></pre></td></tr></table></figure>

<p>8.密码框(JPasswordField)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add(<span class="keyword">new</span> JLabel(<span class="string">&quot;密码框&quot;</span>));</span><br><span class="line">JPasswordField password=<span class="keyword">new</span> JPasswordField(<span class="number">10</span>);</span><br><span class="line">password.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">add(password);</span><br></pre></td></tr></table></figure>

<p>9.面板(JPanel)</p>
<p>三种常用布局：</p>
<p>1.FlowLayout流动式布局</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setLayout(<span class="keyword">new</span> FlowLayout(FlowLayout.CENTER，<span class="number">20</span>，<span class="number">40</span>));  </span><br><span class="line">                       <span class="comment">//创建布局，中间对齐，水平间距，竖直间距。（默认是中，5，5）</span></span><br></pre></td></tr></table></figure>
<p>2.BorderLayout边框式布局</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setLayout(<span class="keyword">new</span> BorderLayout());  <span class="comment">//创建布局</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> JButton button=<span class="keyword">new</span> JButton(<span class="string">&quot;确1定&quot;</span>);</span><br><span class="line"> add(button,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line"> JButton button1=<span class="keyword">new</span> JButton(<span class="string">&quot;确2定&quot;</span>);</span><br><span class="line"> add(button1,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line"> JButton button2=<span class="keyword">new</span> JButton(<span class="string">&quot;确3定&quot;</span>);</span><br><span class="line"> add(button2,BorderLayout.WEST);</span><br><span class="line"></span><br><span class="line"> JButton button3=<span class="keyword">new</span> JButton(<span class="string">&quot;确4定&quot;</span>);</span><br><span class="line"> add(button3,BorderLayout.EAST);</span><br><span class="line"></span><br><span class="line"> add(<span class="keyword">new</span> JButton(<span class="string">&quot;确5定&quot;</span>),BorderLayout.NORTH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/KZEN3])JY~2{$SFZFLZ9A04.png">

<p>3.GridLayout网格式布局</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">2</span>));  <span class="comment">//2行2列</span></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JButton button=<span class="keyword">new</span> JButton(<span class="string">&quot;确1定&quot;</span>);</span><br><span class="line">add(button);</span><br><span class="line"></span><br><span class="line">JButton button1=<span class="keyword">new</span> JButton(<span class="string">&quot;确2定&quot;</span>);</span><br><span class="line">add(button1);</span><br><span class="line"></span><br><span class="line">JButton button2=<span class="keyword">new</span> JButton(<span class="string">&quot;确3定&quot;</span>);</span><br><span class="line">add(button2);</span><br><span class="line"></span><br><span class="line">JButton button3=<span class="keyword">new</span> JButton(<span class="string">&quot;确4定&quot;</span>);</span><br><span class="line">add(button3,BorderLayout.EAST); &#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/@{WJ)@8O$G5ZAZS1$2N{)0J.png">

<p>混合使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 	  JLabel label=<span class="keyword">new</span> JLabel(<span class="string">&quot;标签&quot;</span>);</span><br><span class="line"> 	  JPanel panel=<span class="keyword">new</span> JPanel();</span><br><span class="line">   panel.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">2</span>));  <span class="comment">//创建布局</span></span><br><span class="line"></span><br><span class="line">JButton button=<span class="keyword">new</span> JButton(<span class="string">&quot;确1定&quot;</span>);</span><br><span class="line">panel.add(button);</span><br><span class="line">JButton button1=<span class="keyword">new</span> JButton(<span class="string">&quot;确2定&quot;</span>);</span><br><span class="line">panel.add(button1);</span><br><span class="line">JButton button2=<span class="keyword">new</span> JButton(<span class="string">&quot;确3定&quot;</span>);</span><br><span class="line">panel.add(button2);</span><br><span class="line">JButton button3=<span class="keyword">new</span> JButton(<span class="string">&quot;确4定&quot;</span>);</span><br><span class="line"> panel.add(button3);</span><br><span class="line"> </span><br><span class="line"> add(label,BorderLayout.NORTH);</span><br><span class="line"> add(panel,BorderLayout.SOUTH);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/AE}$FEBT3UCH)F01BA)006M.png">

<h1 id="4-处理事件"><a href="#4-处理事件" class="headerlink" title="4.处理事件"></a>4.处理事件</h1><h5 id="1-ActionEvent事件（文本框、按钮、菜单项、密码框、单选按钮）"><a href="#1-ActionEvent事件（文本框、按钮、菜单项、密码框、单选按钮）" class="headerlink" title="1.ActionEvent事件（文本框、按钮、菜单项、密码框、单选按钮）"></a>1.ActionEvent事件（文本框、按钮、菜单项、密码框、单选按钮）</h5><p>setText()设置内容   getText()获得内容</p>
<p>append()  添加内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	 init();</span><br><span class="line">	 setVisible(<span class="keyword">true</span>);</span><br><span class="line">	 setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"> JButton button,button1; </span><br><span class="line"> JTextField text1;</span><br><span class="line"> JPasswordField text2;</span><br><span class="line"> Box basebox,box1,box2; </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  setLayout(<span class="keyword">new</span> FlowLayout());  </span><br><span class="line">  JPanel panel=<span class="keyword">new</span> JPanel();  </span><br><span class="line">text1=<span class="keyword">new</span> JTextField(<span class="number">10</span>);   <span class="comment">//定义事件源</span></span><br><span class="line">text2=<span class="keyword">new</span> JPasswordField(<span class="number">10</span>);</span><br><span class="line">button=<span class="keyword">new</span> JButton(<span class="string">&quot;登录&quot;</span>);</span><br><span class="line">button1=<span class="keyword">new</span> JButton(<span class="string">&quot;清空&quot;</span>);</span><br><span class="line"> text1.addActionListener(<span class="keyword">this</span>);<span class="comment">//注册监视器</span></span><br><span class="line"> text2.addActionListener(<span class="keyword">this</span>);</span><br><span class="line"> button.addActionListener(<span class="keyword">this</span>);</span><br><span class="line"> button1.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">box1=Box.createVerticalBox();    <span class="comment">//布局</span></span><br><span class="line">box1.add(<span class="keyword">new</span> JLabel(<span class="string">&quot;用户名：&quot;</span>));</span><br><span class="line">box1.add(Box.createVerticalStrut(<span class="number">8</span>));</span><br><span class="line">box1.add(<span class="keyword">new</span> JLabel(<span class="string">&quot;密码：&quot;</span>));</span><br><span class="line">box1.add(Box.createVerticalStrut(<span class="number">8</span>));</span><br><span class="line">box2=Box.createVerticalBox();</span><br><span class="line">box2.add(text1);</span><br><span class="line">box2.add(Box.createVerticalStrut(<span class="number">8</span>));</span><br><span class="line">box2.add(text2);</span><br><span class="line">box2.add(Box.createVerticalStrut(<span class="number">8</span>));</span><br><span class="line">basebox=Box.createHorizontalBox();</span><br><span class="line">basebox.add(box1);</span><br><span class="line">basebox.add(Box.createHorizontalStrut(<span class="number">10</span>));</span><br><span class="line">basebox.add(box2);</span><br><span class="line">add(basebox);</span><br><span class="line">panel.add(button);</span><br><span class="line">panel.add(button1);</span><br><span class="line">add(panel);&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;   <span class="comment">//重写抽象方法</span></span><br><span class="line">		<span class="keyword">if</span>(e.getSource()==button)</span><br><span class="line">		&#123;</span><br><span class="line">		String s1=text1.getText();</span><br><span class="line">		String s2=text2.getText();</span><br><span class="line">		String s3=<span class="string">&quot;123456&quot;</span>;</span><br><span class="line">		String s4=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span>(s1.matches(s4)&amp;&amp;s2.matches(s3)) JOptionPane.showMessageDialog(<span class="keyword">this</span>, <span class="string">&quot;密码正确&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> &#123;JOptionPane.showMessageDialog(<span class="keyword">this</span>, <span class="string">&quot;密码错误&quot;</span>);&#125;  <span class="comment">//弹出对话框</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;text1.setText(<span class="keyword">null</span>);</span><br><span class="line">		       text2.setText(<span class="keyword">null</span>);&#125;</span><br><span class="line">		&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Action win=<span class="keyword">new</span> Action();</span><br><span class="line"> win.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">310</span>, <span class="number">260</span>);</span><br><span class="line"> win.setTitle(<span class="string">&quot;登录窗口&quot;</span>);</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-ItemEvent事件（下拉列表、选择框）"><a href="#2-ItemEvent事件（下拉列表、选择框）" class="headerlink" title="2.ItemEvent事件（下拉列表、选择框）"></a>2.ItemEvent事件（下拉列表、选择框）</h5><p>getItemSelectable()返回事件源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ItemListener</span></span>&#123;</span><br><span class="line">JComboBox chioce;</span><br><span class="line">JTextArea textshow;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	setVisible(<span class="keyword">true</span>);</span><br><span class="line">	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">	chioce=<span class="keyword">new</span> JComboBox();</span><br><span class="line">	chioce.addItem(<span class="string">&quot;请做出你的选择&quot;</span>);</span><br><span class="line">	chioce.addItem(<span class="string">&quot;星际战甲&quot;</span>);</span><br><span class="line">	chioce.addItem(<span class="string">&quot;我的世界&quot;</span>);</span><br><span class="line">	chioce.addItem(<span class="string">&quot;英雄联盟&quot;</span>);</span><br><span class="line">	JButton button=<span class="keyword">new</span> JButton(<span class="string">&quot;选择&quot;</span>);</span><br><span class="line">	chioce.addItemListener(<span class="keyword">this</span>);</span><br><span class="line">	textshow=<span class="keyword">new</span> JTextArea(<span class="number">9</span>,<span class="number">20</span>);  <span class="comment">//高，宽</span></span><br><span class="line">	add(chioce);</span><br><span class="line">	add(button);</span><br><span class="line">	add(<span class="keyword">new</span> JScrollPane(textshow));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemStateChanged</span><span class="params">(ItemEvent e)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(chioce.getSelectedItem().equals(<span class="string">&quot;星际战甲&quot;</span>)) textshow.setText(<span class="string">&quot;我喜欢&quot;</span>);</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(chioce.getSelectedItem().equals(<span class="string">&quot;我的世界&quot;</span>))textshow.setText(<span class="string">&quot;怀念&quot;</span>);</span><br><span class="line">   <span class="keyword">else</span> textshow.setText(<span class="string">&quot;无限火力！！！&quot;</span>);</span><br><span class="line">	&#125;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Action win=<span class="keyword">new</span> Action();</span><br><span class="line"> win.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">310</span>, <span class="number">260</span>);</span><br><span class="line"> win.setTitle(<span class="string">&quot;登录窗口&quot;</span>);</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/haha.png">

<h5 id="3-DocumentEvent事件（文本区）"><a href="#3-DocumentEvent事件（文本区）" class="headerlink" title="3.DocumentEvent事件（文本区）"></a>3.DocumentEvent事件（文本区）</h5><p>getDocument()返回文档事件源，注册监视器的时候用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.DocumentEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.DocumentListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">DocumentListener</span></span>&#123;</span><br><span class="line">JTextArea text1,text2;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">	setVisible(<span class="keyword">true</span>);</span><br><span class="line">	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  text1=<span class="keyword">new</span> JTextArea(<span class="number">6</span>,<span class="number">8</span>);</span><br><span class="line">  text2=<span class="keyword">new</span> JTextArea(<span class="number">6</span>,<span class="number">8</span>);</span><br><span class="line">  add(<span class="keyword">new</span> JScrollPane(text1));</span><br><span class="line">  add(<span class="keyword">new</span> JScrollPane(text2));</span><br><span class="line">  text1.getDocument().addDocumentListener(<span class="keyword">this</span>);   <span class="comment">//像文档注册监视器</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changedUpdate</span><span class="params">(DocumentEvent e)</span> </span>&#123;</span><br><span class="line">	String s1=text1.getText();</span><br><span class="line">	String regex=<span class="string">&quot;[\\s\\d\\p&#123;Punct&#125;]+&quot;</span>; <span class="comment">//空格类字符、0~9、标点符号其中一个出现1次或n次</span></span><br><span class="line">	String[] word=s1.split(regex);</span><br><span class="line">	Arrays.sort(word);  <span class="comment">//将字典从小到大排序</span></span><br><span class="line">	text2.setText(<span class="keyword">null</span>);</span><br><span class="line">	<span class="keyword">for</span>(String s:word)</span><br><span class="line">		text2.append(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUpdate</span><span class="params">(DocumentEvent e)</span> </span>&#123;</span><br><span class="line">	changedUpdate(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeUpdate</span><span class="params">(DocumentEvent e)</span> </span>&#123;</span><br><span class="line">	changedUpdate(e);</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="4-MouseEvent事件-鼠标"><a href="#4-MouseEvent事件-鼠标" class="headerlink" title="4.MouseEvent事件(鼠标)"></a>4.MouseEvent事件(鼠标)</h5><p>getX() getY()  获取鼠标在事件源上的x-y坐标   getClickCount() 获取鼠标单击次数</p>
<p>getModifiers()  获取鼠标的左键或右键,使用InputEvent类中的常量BUTTON1_MASK与BUTTON3_MASK表示</p>
<p>1.mousePressed(MouseEvent)  在事件源上按下鼠标</p>
<p>2.mouseReleased(MouseEvent)  在事件源上释放鼠标</p>
<p>3.mouseEntered(MouseEvent)    鼠标进入组件时</p>
<p>4.mouseExited(MouseEvent)    鼠标离开容器时</p>
<p>5.mouseClicked(MouseEvent)    单击鼠标时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">MouseListener</span></span>&#123;</span><br><span class="line">JTextField text;</span><br><span class="line">JTextArea area;</span><br><span class="line">JButton button;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  init();</span><br><span class="line">  setVisible(<span class="keyword">true</span>);</span><br><span class="line">  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">	text=<span class="keyword">new</span> JTextField(<span class="number">8</span>);</span><br><span class="line">	area=<span class="keyword">new</span> JTextArea(<span class="number">55</span>,<span class="number">138</span>);</span><br><span class="line">	text.addMouseListener(<span class="keyword">this</span>);</span><br><span class="line">	button=<span class="keyword">new</span> JButton(<span class="string">&quot;按钮&quot;</span>);</span><br><span class="line">	button.addMouseListener(<span class="keyword">this</span>);</span><br><span class="line">	addMouseListener(<span class="keyword">this</span>);</span><br><span class="line">	add(button);</span><br><span class="line">	add(text);</span><br><span class="line">	add(<span class="keyword">new</span> JScrollPane(area));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(e.getClickCount()&gt;=<span class="number">2</span>) </span><br><span class="line">		area.append(<span class="string">&quot;\n鼠标连击，位置：&quot;</span>+<span class="string">&quot;(&quot;</span>+e.getX()+<span class="string">&quot;,&quot;</span>+e.getY()+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.getSource() <span class="keyword">instanceof</span> JButton)    <span class="comment">//instanceof属于</span></span><br><span class="line">	  area.append(<span class="string">&quot;\n鼠标进入按钮，位置：&quot;</span>+<span class="string">&quot;(&quot;</span>+e.getX()+<span class="string">&quot;,&quot;</span>+e.getY()+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(e.getSource() <span class="keyword">instanceof</span> JTextField)</span><br><span class="line">	  area.append(<span class="string">&quot;\n鼠标进入文本框，位置：&quot;</span>+<span class="string">&quot;(&quot;</span>+e.getX()+<span class="string">&quot;,&quot;</span>+e.getY()+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(e.getSource() <span class="keyword">instanceof</span> JFrame)</span><br><span class="line">	  area.append(<span class="string">&quot;\n鼠标进入窗口，位置：&quot;</span>+<span class="string">&quot;(&quot;</span>+e.getX()+<span class="string">&quot;,&quot;</span>+e.getY()+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">	area.append(<span class="string">&quot;\n鼠标退出，位置：&quot;</span>+<span class="string">&quot;(&quot;</span>+e.getX()+<span class="string">&quot;,&quot;</span>+e.getY()+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">	area.append(<span class="string">&quot;\n鼠标按下，位置：&quot;</span>+<span class="string">&quot;(&quot;</span>+e.getX()+<span class="string">&quot;,&quot;</span>+e.getY()+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">	area.append(<span class="string">&quot;\n鼠标释放，位置：&quot;</span>+<span class="string">&quot;(&quot;</span>+e.getX()+<span class="string">&quot;,&quot;</span>+e.getY()+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">	</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>mouseDragged(MouseEvent)   拖动鼠标(不必在事件源上)</p>
<p>mouseMoved(MouseEvent)  移动鼠标(在事件源上)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoliceListen</span> <span class="keyword">extends</span> <span class="title">JLayeredPane</span> <span class="keyword">implements</span> <span class="title">MouseListener</span>,<span class="title">MouseMotionListener</span></span>&#123;</span><br><span class="line">  JButton button=<span class="keyword">new</span> JButton(<span class="string">&quot;用鼠标拖动我&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> x,y,a,b,x0,y0;  <span class="comment">//x,y鼠标在组件中的位置,a,b组件左上角在容器的位置</span></span><br><span class="line">    PoliceListen()&#123;</span><br><span class="line">    	JButton button=<span class="keyword">new</span> JButton(<span class="string">&quot;用鼠标拖动我&quot;</span>);</span><br><span class="line">    	button.addMouseListener(<span class="keyword">this</span>);</span><br><span class="line">    	button.addMouseMotionListener(<span class="keyword">this</span>);</span><br><span class="line">    	setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">    	add(button,JLayeredPane.DEFAULT_LAYER);    <span class="comment">//默认层</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">		Component com=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span>(e.getSource() <span class="keyword">instanceof</span> Component) &#123;</span><br><span class="line">			com=(Component) e.getSource();</span><br><span class="line">			a=com.getBounds().x;  b=com.getBounds().y;</span><br><span class="line">			x=e.getX();y=e.getY();</span><br><span class="line">			a=a+x;</span><br><span class="line">			b=b+y;</span><br><span class="line">			com.setLocation(a-x0, b-y0);</span><br><span class="line">		&#125;			&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseMoved</span><span class="params">(MouseEvent e)</span> </span>&#123;	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">		JComponent com=<span class="keyword">null</span>;            <span class="comment">//定义组件容器</span></span><br><span class="line">		com=(JComponent) e.getSource();   <span class="comment">//放入事件源</span></span><br><span class="line">		setLayer(com,JLayeredPane.DRAG_LAYER); <span class="comment">//点击进入拖拽层</span></span><br><span class="line">	a=com.getBounds().x;                    </span><br><span class="line">	b=com.getBounds().y;</span><br><span class="line">	x0=e.getX();</span><br><span class="line">	y0=e.getY();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">		JComponent com=<span class="keyword">null</span>;</span><br><span class="line">		com=(JComponent) e.getSource();</span><br><span class="line">		setLayer(com,JLayeredPane.DEFAULT_LAYER);	&#125;&#125;    <span class="comment">//释放 返回默认层</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">   PoliceListen listen;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  listen=<span class="keyword">new</span> PoliceListen();</span><br><span class="line">  add(listen,BorderLayout.CENTER);</span><br><span class="line">  setVisible(<span class="keyword">true</span>);</span><br><span class="line">  setBounds(<span class="number">12</span>,<span class="number">12</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Action win=<span class="keyword">new</span> Action();</span><br><span class="line"> win.setBounds(<span class="number">10</span>, <span class="number">10</span>, <span class="number">460</span>, <span class="number">360</span>);</span><br><span class="line"> win.setTitle(<span class="string">&quot;拖动&quot;</span>);</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="5-焦点事件-FocusEvent"><a href="#5-焦点事件-FocusEvent" class="headerlink" title="5.焦点事件(FocusEvent)"></a>5.焦点事件(FocusEvent)</h5><p>当点击一个组件时，该组件就有输入焦点，其他就没有，一个组件时可以调用public boolean requestFocusInWindow()方法获得输入焦点</p>
<p>添加监视器：addFocusListener()</p>
<p>方法：1.focusGained(FocusEvent e) 从无输入焦点到有输入焦点</p>
<p>​            2.focusLost(FocusEvent e)从有输入焦点到无输入焦点</p>
<h5 id="6-键盘事件-KeyEvent"><a href="#6-键盘事件-KeyEvent" class="headerlink" title="6.键盘事件(KeyEvent)"></a>6.键盘事件(KeyEvent)</h5><p>KeyPressed(KeyEvent e)    按下         </p>
<p>KeyReleased(KeyEvent e)   释放</p>
<p>KeyTyped(KeyEvent e)      按下又释放</p>
<p>getKeyCode()     获取键码值           getKeyChar  获取键盘字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">KeyListener</span>,<span class="title">FocusListener</span></span>&#123;</span><br><span class="line">	JTextField text[]=<span class="keyword">new</span> JTextField[<span class="number">3</span>];</span><br><span class="line">	JButton button;</span><br><span class="line">	Action()&#123;</span><br><span class="line">		setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    	&#123;text[i]=<span class="keyword">new</span> JTextField(<span class="number">7</span>);</span><br><span class="line">    	text[i].addKeyListener(<span class="keyword">this</span>);</span><br><span class="line">    	text[i].addFocusListener(<span class="keyword">this</span>);</span><br><span class="line">    	add(text[i]);</span><br><span class="line">    	&#125;</span><br><span class="line">      button=<span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">      add(button);</span><br><span class="line">      text[<span class="number">0</span>].requestFocusInWindow();</span><br><span class="line">      setVisible(<span class="keyword">true</span>);</span><br><span class="line">      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">focusGained</span><span class="params">(FocusEvent e)</span> </span>&#123;</span><br><span class="line">		JTextField t=(JTextField) e.getSource();</span><br><span class="line">		t.setText(<span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">focusLost</span><span class="params">(FocusEvent e)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">		JTextField t=(JTextField) e.getSource();</span><br><span class="line">		<span class="keyword">if</span>(t.getCaretPosition()&gt;=<span class="number">6</span>)   <span class="comment">//获取插入的字符数</span></span><br><span class="line">			t.transferFocus();           <span class="comment">//转移焦点</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="5-使用MVA结构"><a href="#5-使用MVA结构" class="headerlink" title="5.使用MVA结构"></a>5.使用MVA结构</h1><p>模型、视图、控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoliceListen</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> a,b,c,area;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set1</span><span class="params">(<span class="keyword">double</span> e)</span> </span>&#123;</span><br><span class="line">		a=e;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set2</span><span class="params">(<span class="keyword">double</span> e)</span> </span>&#123;</span><br><span class="line">		b=e;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set3</span><span class="params">(<span class="keyword">double</span> e)</span> </span>&#123;</span><br><span class="line">		c=e;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getarea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a+b&gt;c&amp;&amp;a+c&gt;b&amp;&amp;b+c&gt;a) &#123;</span><br><span class="line">		<span class="keyword">double</span> p=(a+b+c)/<span class="number">2.0</span>;</span><br><span class="line">		area=Math.sqrt(p*(p-a)*(p-b)*(p-c));</span><br><span class="line">	<span class="keyword">return</span> String.valueOf(area);&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		&#123;<span class="keyword">return</span> <span class="string">&quot;不是三角形&quot;</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    PoliceListen listen;</span><br><span class="line">	JTextField text1,text2,text3;</span><br><span class="line">   JTextArea area;      <span class="comment">//提供视图</span></span><br><span class="line">   JButton button=<span class="keyword">new</span> JButton();</span><br><span class="line">   <span class="keyword">double</span> a,b,c;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	setVisible(<span class="keyword">true</span>);</span><br><span class="line">	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	listen=<span class="keyword">new</span> PoliceListen();</span><br><span class="line">	text1=<span class="keyword">new</span> JTextField(<span class="number">5</span>);</span><br><span class="line">	text2=<span class="keyword">new</span> JTextField(<span class="number">5</span>);</span><br><span class="line">	text3=<span class="keyword">new</span> JTextField(<span class="number">5</span>);</span><br><span class="line">	area=<span class="keyword">new</span> JTextArea();</span><br><span class="line">	button=<span class="keyword">new</span> JButton(<span class="string">&quot;计算面积&quot;</span>);</span><br><span class="line">	JPanel panel=<span class="keyword">new</span> JPanel();</span><br><span class="line">	panel.add(<span class="keyword">new</span> JLabel(<span class="string">&quot;边A&quot;</span>));</span><br><span class="line">	panel.add(text1);</span><br><span class="line">	panel.add(<span class="keyword">new</span> JLabel(<span class="string">&quot;边B&quot;</span>));</span><br><span class="line">	panel.add(text2);</span><br><span class="line">	panel.add(<span class="keyword">new</span> JLabel(<span class="string">&quot;边C&quot;</span>));</span><br><span class="line">	panel.add(text3);</span><br><span class="line">	panel.add(button);</span><br><span class="line">	button.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">	add(panel,BorderLayout.NORTH);</span><br><span class="line">	add(<span class="keyword">new</span> JScrollPane(area),BorderLayout.CENTER);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">try</span>&#123;a=Double.parseDouble(text1.getText().trim());    <span class="comment">//......</span></span><br><span class="line">	b=Double.parseDouble(text2.getText().trim());</span><br><span class="line">	c=Double.parseDouble(text3.getText().trim());</span><br><span class="line">	listen.set1(a);</span><br><span class="line">	listen.set2(b);</span><br><span class="line">	listen.set3(c);</span><br><span class="line">	String max=listen.getarea();</span><br><span class="line">	area.append(<span class="string">&quot;三角形&quot;</span>+a+<span class="string">&quot;,&quot;</span>+b+<span class="string">&quot;,&quot;</span>+c+<span class="string">&quot;的面积：&quot;</span>);</span><br><span class="line">	area.append(max+<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line">	<span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">		area.append(<span class="string">&quot;\n&quot;</span>+ex+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Action win=<span class="keyword">new</span> Action();</span><br><span class="line"> win.setBounds(<span class="number">10</span>, <span class="number">10</span>, <span class="number">460</span>, <span class="number">360</span>);</span><br><span class="line"> win.setTitle(<span class="string">&quot;三角形&quot;</span>);</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="6-对话框（JDialog）"><a href="#6-对话框（JDialog）" class="headerlink" title="6.对话框（JDialog）"></a>6.对话框（JDialog）</h1><p>有点多。。。假期再写</p>
<p>有模式：弹出对话框后堵塞其他线程的执行</p>
<p>无模式：不堵塞</p>
<p>1.消息对话框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">  JTextField text;</span><br><span class="line">  JTextArea area;</span><br><span class="line">  String regex=<span class="string">&quot;[a-zA-Z]+&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  text=<span class="keyword">new</span> JTextField(<span class="number">22</span>);</span><br><span class="line">  text.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">  area=<span class="keyword">new</span> JTextArea();</span><br><span class="line">  add(text,BorderLayout.NORTH);</span><br><span class="line">  add(area,BorderLayout.CENTER);</span><br><span class="line">  setVisible(<span class="keyword">true</span>);</span><br><span class="line">  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(e.getSource()==text) &#123;</span><br><span class="line">		String str=text.getText();</span><br><span class="line">		<span class="keyword">if</span>(str.matches(regex)) &#123;</span><br><span class="line">			area.append(str+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			JOptionPane.showMessageDialog(<span class="keyword">this</span>, <span class="string">&quot;输入错误&quot;</span>,<span class="string">&quot;警告&quot;</span>,JOptionPane.WARNING_MESSAGE);</span><br><span class="line">			text.setText(<span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>2.输入对话框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">  JButton button;</span><br><span class="line">  JTextArea area;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  button=<span class="keyword">new</span> JButton(<span class="string">&quot;弹出&quot;</span>);</span><br><span class="line">  area=<span class="keyword">new</span> JTextArea();</span><br><span class="line">  add(button,BorderLayout.NORTH);</span><br><span class="line">  add(<span class="keyword">new</span> JScrollPane(area),BorderLayout.CENTER);</span><br><span class="line">  button.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">  setVisible(<span class="keyword">true</span>);</span><br><span class="line">  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">	String str=JOptionPane.showInputDialog(<span class="keyword">this</span>, <span class="string">&quot;输入数字，用空格分隔&quot;</span>,<span class="string">&quot;输入对话框&quot;</span>,JOptionPane.PLAIN_MESSAGE); <span class="comment">//showInputDialog</span></span><br><span class="line">	<span class="keyword">if</span>(str!=<span class="keyword">null</span>) &#123;</span><br><span class="line">		Scanner scanner=<span class="keyword">new</span> Scanner(str);</span><br><span class="line">		<span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">double</span> number=scanner.nextDouble();</span><br><span class="line">			<span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">				area.append(<span class="string">&quot; &quot;</span>+number);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				area.append(<span class="string">&quot;+&quot;</span>+number);</span><br><span class="line">			sum=sum+number;</span><br><span class="line">			k++;&#125;</span><br><span class="line">			<span class="keyword">catch</span>(InputMismatchException exp) &#123;</span><br><span class="line">				String t=scanner.next();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		area.append(<span class="string">&quot;=&quot;</span>+sum+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>3.确认对话框</p>
<p>JOptionPane.YES_ON_OPTION</p>
<p>JOptionPane.YES_ON_CANCEL_OPTION</p>
<p>JOptionPane.OK_CANCEL_OPTION</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">WindowListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	setVisible(<span class="keyword">true</span>);</span><br><span class="line">	 setDefaultCloseOperation(JFrame.DEFAULT_CURSOR);</span><br><span class="line">	 <span class="keyword">this</span>.addWindowListener(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowActivated</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosed</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=JOptionPane.showConfirmDialog(<span class="keyword">null</span>, <span class="string">&quot;你确定？？&quot;</span>,<span class="string">&quot;关闭&quot;</span>,JOptionPane.YES_NO_OPTION);</span><br><span class="line">	<span class="keyword">if</span>(a==JOptionPane.YES_OPTION)</span><br><span class="line">		System.exit(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeactivated</span><span class="params">(WindowEvent e)</span> </span>&#123;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeiconified</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowIconified</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowOpened</span><span class="params">(WindowEvent e)</span> </span>&#123;	</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.颜色对话框</p>
<p>5.文件对话框</p>
<p>6.自定义对话框</p>
<h1 id="7-发布GUI程序"><a href="#7-发布GUI程序" class="headerlink" title="7.发布GUI程序"></a>7.发布GUI程序</h1><p>可以直接用eclipse打包jar.然后用exe4j转换exe。wo它🦄</p>
<p>步骤：</p>
<p>1.先找到写的java后缀源文件  d</p>
<p>2.将源文件编码为后缀为class的源文件(cmd中用javac A.java指令，A为类名)</p>
<p>3.编写后缀为mf的清单文件，格式如下：</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/qing.png">

<p>4.使用cmd生成jar文件</p>
<img src="https://cdn.jsdelivr.net/gh/2544165563/2544165563.github.io/assets/dai1.png">

<p>c表示生成新的jar文件，f表示生成jar的名称(Tom.jar)，m表示文件清单的名字(Mymoon.mf)，后跟源文件，*表示该目录下的所有文件。</p>
<p>另：java -jar A.jar可以解压,也可以直接解压软件解压。</p>
<p>public class Test {</p>
<pre><code>// 默认60秒后关机
public void shutdown() &#123;
    // 关机
    try &#123;
        Runtime.getRuntime().exec(&quot;shutdown /s /t  60&quot;);   
    &#125; catch (IOException e) &#123;
        // TODO Auto-generated catch block
        e.printStackTrace();
    &#125;
&#125;

// 根据输入的时间秒数关机
public void shutdown(String s) &#123;
    try &#123;
        // 关机
        Runtime.getRuntime().exec(&quot;shutdown /s /t &quot; + s);  //关机时间可以自动设置
    &#125; catch (IOException e) &#123;
        e.printStackTrace();
    &#125;
&#125;</code></pre>
<p>————————————————<br>版权声明：本文为CSDN博主「sarida」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/sarida/java/article/details/81195378">https://blog.csdn.net/sarida/java/article/details/81195378</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>python网络编程</title>
    <url>/2020/11/09/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h1><h2 id="udp发送"><a href="#udp发送" class="headerlink" title="udp发送"></a>udp发送</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 1.创建socket并连接</span></span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line"><span class="comment"># AF_INET表示这个socket表示用来进行网络连接</span></span><br><span class="line"><span class="comment"># SOCK_DGRAM表示这是一个udp连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.发送数据</span></span><br><span class="line">s.sendto(<span class="string">&#x27;憨憨&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>),(<span class="string">&#x27;10.173.86.27&#x27;</span>,<span class="number">19000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.关闭socket</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>

<h2 id="udp接收数据"><a href="#udp接收数据" class="headerlink" title="udp接收数据"></a>udp接收数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">s.bind((<span class="string">&#x27;10.173.86.27&#x27;</span>,<span class="number">19000</span>))   <span class="comment"># 绑定自己的地址端号</span></span><br><span class="line">data,addr = s.recvfrom(<span class="number">1024</span>)   <span class="comment"># 接收(消息,(地址，端号))</span></span><br><span class="line"></span><br><span class="line">print(data.decode(<span class="string">&#x27;utf8&#x27;</span>))   <span class="comment"># 将接收的消息编码</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>

<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h2 id="客户端-发送"><a href="#客户端-发送" class="headerlink" title="客户端(发送)"></a>客户端(发送)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect((<span class="string">&#x27;10.173.86.27&#x27;</span>,<span class="number">19000</span>))    <span class="comment"># 连接对面服务器</span></span><br><span class="line">s.send(<span class="string">&#x27;Hellow&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>

<h2 id="服务端-接收"><a href="#服务端-接收" class="headerlink" title="服务端(接收)"></a>服务端(接收)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.bind((<span class="string">&#x27;10.173.37.31&#x27;</span>,<span class="number">190000</span>))   <span class="comment"># 绑定自己的ip</span></span><br><span class="line">s.listen(<span class="number">128</span>)   <span class="comment"># 能同时接收128个</span></span><br><span class="line">client_socket,client_addr = s.accept()</span><br><span class="line">data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">print(<span class="string">&#x27;接收到了&#123;&#125;客户端&#123;&#125;端口号发送的内容:&#123;&#125;&#x27;</span>.format(client_addr[<span class="number">0</span>],client_addr[<span class="number">1</span>],data.decode(<span class="string">&#x27;utf8&#x27;</span>)))</span><br></pre></td></tr></table></figure>

<h1 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h1><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">        print(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">        print(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=dance)   <span class="comment"># 创建线程,target指定函数</span></span><br><span class="line">t2 = threading.Thread(target=sing)</span><br><span class="line"></span><br><span class="line">t1.start()   <span class="comment"># 启动进程</span></span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure>

<h3 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="comment"># 上锁</span></span><br><span class="line">lock.acquire()</span><br><span class="line"><span class="comment"># 解锁</span></span><br><span class="line">lock.release()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建锁</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">sum = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sell</span>():</span></span><br><span class="line">    <span class="keyword">global</span> sum</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        lock.acquire()   <span class="comment"># 加同步锁</span></span><br><span class="line">        <span class="keyword">if</span> sum &gt; <span class="number">0</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            sum -= <span class="number">1</span></span><br><span class="line">            lock.release()</span><br><span class="line">            print(<span class="string">&#x27;&#123;&#125;卖出1张，还剩&#123;&#125;张&#x27;</span>.format(threading.current_thread().name,sum))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lock.release()</span><br><span class="line">            print(<span class="string">&#x27;票卖完了&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=sell,name=<span class="string">&#x27;线程1&#x27;</span>)</span><br><span class="line">t2 = threading.Thread(target=sell,name=<span class="string">&#x27;线程2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure>

<h3 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">produce</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">&#x27;生产了面包b&#123;&#125;&#x27;</span>.format(i))</span><br><span class="line">        q.put(<span class="string">&#x27;b&#123;&#125;&#x27;</span>.format(i))   <span class="comment"># 添加到队列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(<span class="string">&#x27;买到面包&#123;&#125;&#x27;</span>.format(q.get()))   <span class="comment"># 堵塞方法，将队列中的内容拿出</span></span><br><span class="line"></span><br><span class="line">q = queue.Queue()   <span class="comment"># 创建队列</span></span><br><span class="line">p1 = threading.Thread(target=produce)</span><br><span class="line">p2 = threading.Thread(target=consumer)</span><br><span class="line">p1.start()</span><br><span class="line">p2.start()</span><br></pre></td></tr></table></figure>

<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        print(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        print(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1 = multiprocessing.Process(target=sing,args=(<span class="number">10</span>,))</span><br><span class="line">    p2 = multiprocessing.Process(target=dance,args=(<span class="number">10</span>,))</span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br></pre></td></tr></table></figure>

<h3 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">produce</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        print(<span class="string">&#x27;+++++面包&#123;&#125; &#123;&#125;&#x27;</span>.format(os.getpid(),i))</span><br><span class="line">        q.put(<span class="string">&#x27;&#123;&#125;&#x27;</span>.format(i))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(<span class="string">&#x27;-----面包&#123;&#125; &#123;&#125;&#x27;</span>.format(os.getpid(),q.get()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = multiprocessing.Queue()</span><br><span class="line"></span><br><span class="line">    p = multiprocessing.Process(target=produce,args=(q,))   <span class="comment"># 由于线程间不能使用全局变量，所以要传参</span></span><br><span class="line">    c = multiprocessing.Process(target=consumer,args=(q,))</span><br><span class="line"></span><br><span class="line">    p.start()</span><br><span class="line">    c.start()</span><br></pre></td></tr></table></figure>

<h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing,time,random,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span>(<span class="params">msg</span>):</span></span><br><span class="line">    t_start = time.time()</span><br><span class="line">    print(<span class="string">&#x27;%s开始执行，进程号为%d&#x27;</span> %(msg,os.getpid()))</span><br><span class="line">    time.sleep(random.random()*<span class="number">2</span>)</span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    print(msg,<span class="string">&#x27;执行完毕,耗时%0.2f&#x27;</span> %(t_stop-t_start))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    po = multiprocessing.Pool(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        po.apply_async(worker,(i,))</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">&quot;----start----&quot;</span>)</span><br><span class="line">    po.close()</span><br><span class="line">    po.join()   <span class="comment"># 让主线程等待子线程结束</span></span><br><span class="line">    print(<span class="string">&quot;----end----&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="简单的HTTP服务器"><a href="#简单的HTTP服务器" class="headerlink" title="简单的HTTP服务器"></a>简单的HTTP服务器</h1><p>只有自己能访问。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>,<span class="number">8090</span>))   <span class="comment"># 0.0.0.0代表可以访问的任何形式地址</span></span><br><span class="line">s.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    client_socket,client_addr = s.accept()</span><br><span class="line">    data = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    path = data.splitlines()[<span class="number">0</span>].split()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    response_header = <span class="string">&#x27;HTTP/1.1 200 OK\n&#x27;</span></span><br><span class="line">    response_body = <span class="string">&#x27;Hellow&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据不同的请求返回不同内容</span></span><br><span class="line">    <span class="keyword">if</span> path == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        response_body = <span class="string">&#x27;欢迎来到登陆界面&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> path == <span class="string">&#x27;/register&#x27;</span>:</span><br><span class="line">        response_body = <span class="string">&#x27;欢迎来到注册界面&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> path == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">        response_body = <span class="string">&#x27;欢迎来到首页&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response_header = <span class="string">&#x27;HTTP/1.1 404 Page Not Found\n&#x27;</span></span><br><span class="line">        response_body = <span class="string">&#x27;&lt;p style=&quot;color:red;text-align:center;font-size:120px&quot;&gt;页面不存在&lt;/p&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    response_header += <span class="string">&#x27;content-type:text/html;charset=utf8\n&#x27;</span>   <span class="comment"># charset指定浏览器解码</span></span><br><span class="line">    response_header += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    response = response_header + response_body</span><br><span class="line"></span><br><span class="line">    client_socket.send(response.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure>

<h2 id="WSGI服务器"><a href="#WSGI服务器" class="headerlink" title="WSGI服务器"></a>WSGI服务器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demp_app</span>(<span class="params">environ,start_response</span>):</span></span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>,[(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf8&#x27;</span>),(<span class="string">&#x27;Server&#x27;</span>,<span class="string">&#x27;WSGI&#x27;</span>)])   <span class="comment"># 处理响应头</span></span><br><span class="line">    path = environ[<span class="string">&#x27;PATH_INFO&#x27;</span>]</span><br><span class="line">    print(path)</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;你好&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    httpd = make_server(<span class="string">&#x27;&#x27;</span>,<span class="number">8000</span>,demp_app)   <span class="comment"># ip地址，端口号，处理函数</span></span><br><span class="line">    sa = httpd.socket.getsockname()</span><br><span class="line">    print(<span class="string">&#x27;Serving HTTP on&#x27;</span>,sa[<span class="number">0</span>],<span class="string">&#x27;port&#x27;</span>,sa[<span class="number">1</span>],<span class="string">&#x27;...&#x27;</span>)</span><br><span class="line">    <span class="comment"># httpd.handle_request() 接收一次</span></span><br><span class="line">    httpd.serve_forever()   <span class="comment"># 一直接收</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>网络攻防</title>
    <url>/2020/11/17/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/</url>
    <content><![CDATA[<h1 id="whois域名信息收集"><a href="#whois域名信息收集" class="headerlink" title="whois域名信息收集"></a>whois域名信息收集</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whois &lt;域名&gt;</span><br></pre></td></tr></table></figure>

<h1 id="nmap端口收集"><a href="#nmap端口收集" class="headerlink" title="nmap端口收集"></a>nmap端口收集</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -A -v -T4 &lt;ip&gt;</span><br></pre></td></tr></table></figure>

<h1 id="masscan端口探测"><a href="#masscan端口探测" class="headerlink" title="masscan端口探测"></a>masscan端口探测</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">masscan -p80 10.173.255.254&#x2F;16 --rate&#x3D;10000</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\86184\AppData\Roaming\Typora\typora-user-images\image-20201129184758308.png" alt="image-20201129184758308"></p>
<h1 id="shodan搜索"><a href="#shodan搜索" class="headerlink" title="shodan搜索"></a>shodan搜索</h1><h2 id="webcam"><a href="#webcam" class="headerlink" title="webcam"></a>webcam</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webcam</span><br></pre></td></tr></table></figure>

<h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">host:22</span><br></pre></td></tr></table></figure>

<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port:22</span><br></pre></td></tr></table></figure>

<h2 id="城市"><a href="#城市" class="headerlink" title="城市"></a>城市</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">city:beijing</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>网络攻防</tag>
      </tags>
  </entry>
  <entry>
    <title>python图片识别</title>
    <url>/2021/03/17/python%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h1 id="安装tesserocr"><a href="#安装tesserocr" class="headerlink" title="安装tesserocr"></a>安装tesserocr</h1><h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><p>打开链接，<a href="https://digi.bib.uni-mannheim.de/tesseract/%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%EF%BC%8C%E5%AE%89%E8%A3%85">https://digi.bib.uni-mannheim.de/tesseract/下载最新版，安装</a></p>
<h2 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h2><p>将Tesseract-OCR路径添加到Path里</p>
<p>在系统变量里，创建一个新的变量名为TESSDATA_PREFIX，值为D:\Tesseract-OCR\tessdata(根据自己安装的tesserocr安装路径为准)</p>
<h2 id="3、检查配置"><a href="#3、检查配置" class="headerlink" title="3、检查配置"></a>3、检查配置</h2><p>打开cmd,输入pip show tesseract查看版本</p>
<h2 id="4、安装Python的OCR识别库"><a href="#4、安装Python的OCR识别库" class="headerlink" title="4、安装Python的OCR识别库"></a>4、安装Python的OCR识别库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install Pillow</span><br><span class="line">pip install pytesseract</span><br></pre></td></tr></table></figure>

<p>打开python目录下的\Lib\site-packages\pytesseract里的pytesseract.py</p>
<p>更改pytesseract.py里的tesseract_cmd =  r’D:\Tesseract-OCR\tesseract.exe’</p>
<h2 id="5、安装中文语言包"><a href="#5、安装中文语言包" class="headerlink" title="5、安装中文语言包"></a>5、安装中文语言包</h2><p><a href="https://github.com/tesseract-ocr/tessdata,%E4%B8%8B%E8%BD%BDchi_sim.traineddate%E3%80%82%E7%84%B6%E5%90%8E%E5%B0%86%E6%AD%A4%E6%96%87%E4%BB%B6%E6%94%BE%E7%BD%AE%E5%88%B0D:/Tesseract-OCR/tessdata%E9%87%8C%E9%9D%A2">https://github.com/tesseract-ocr/tessdata,下载chi_sim.traineddate。然后将此文件放置到D:\Tesseract-OCR\tessdata里面</a></p>
<h2 id="6、python代码"><a href="#6、python代码" class="headerlink" title="6、python代码"></a>6、python代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_text</span>(<span class="params">text_path</span>):</span></span><br><span class="line">    <span class="comment">#图片转字符串</span></span><br><span class="line">    im = Image.open(text_path)</span><br><span class="line">    <span class="comment">#转8bit的黑白图片</span></span><br><span class="line">    imgry = im.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    <span class="comment">#二值化，采用阈值分割算法,threshold为分割点。。。不懂啊</span></span><br><span class="line">    threshold = <span class="number">140</span></span><br><span class="line">    table = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> j &lt; threshold:</span><br><span class="line">            table.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            table.append(<span class="number">1</span>)</span><br><span class="line">    out = imgry.point(table,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="comment">#识别文本,识别汉字时用chi_sim,其余用eng</span></span><br><span class="line">    text = pytesseract.image_to_string(out,lang=<span class="string">&quot;chi_sim&quot;</span>,config=<span class="string">&#x27;--psm 6&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line">t = read_text(<span class="string">&quot;./hanzi.png&quot;</span>)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>

<h1 id="来自"><a href="#来自" class="headerlink" title="来自"></a>来自</h1><h1 id="https-www-jb51-net-article-183990-htm"><a href="#https-www-jb51-net-article-183990-htm" class="headerlink" title="https://www.jb51.net/article/183990.htm"></a><a href="https://www.jb51.net/article/183990.htm">https://www.jb51.net/article/183990.htm</a></h1>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
